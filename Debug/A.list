
A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000602c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006138  08006138  00007138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  00008098  2**0
                  CONTENTS
  4 .ARM          00000000  08006278  08006278  00008098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006278  08006278  00008098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006278  08006278  00007278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800627c  0800627c  0000727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006280  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000098  08006318  00008098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08006318  00008414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b3e  00000000  00000000  000080c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa9  00000000  00000000  00018bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  0001b6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d29  00000000  00000000  0001c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a6e  00000000  00000000  0001d4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f6b  00000000  00000000  00036f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d50c  00000000  00000000  0004de9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a98  00000000  00000000  000db3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08006120 	.word	0x08006120

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08006120 	.word	0x08006120

0800014c <isButtonPressed>:
int KeyReg[10] = {0};
int TimeOutForKeyPress =  500;
int button_long_pressed[10]={0};
int button_flag[10]={0};
int state[10] = {0};
int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	@ (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000104 	.word	0x20000104

08000180 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
//  KeyReg2 = KeyReg1;
//  KeyReg1 = KeyReg0;
 	KeyReg[0] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 8000186:	2101      	movs	r1, #1
 8000188:	4858      	ldr	r0, [pc, #352]	@ (80002ec <getKeyInput+0x16c>)
 800018a:	f002 ffbf 	bl	800310c <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	461a      	mov	r2, r3
 8000192:	4b57      	ldr	r3, [pc, #348]	@ (80002f0 <getKeyInput+0x170>)
 8000194:	601a      	str	r2, [r3, #0]
 	KeyReg[1] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 8000196:	2102      	movs	r1, #2
 8000198:	4854      	ldr	r0, [pc, #336]	@ (80002ec <getKeyInput+0x16c>)
 800019a:	f002 ffb7 	bl	800310c <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b53      	ldr	r3, [pc, #332]	@ (80002f0 <getKeyInput+0x170>)
 80001a4:	605a      	str	r2, [r3, #4]
 	KeyReg[2] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001a6:	2110      	movs	r1, #16
 80001a8:	4850      	ldr	r0, [pc, #320]	@ (80002ec <getKeyInput+0x16c>)
 80001aa:	f002 ffaf 	bl	800310c <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b4f      	ldr	r3, [pc, #316]	@ (80002f0 <getKeyInput+0x170>)
 80001b4:	609a      	str	r2, [r3, #8]
 	KeyReg[3] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 80001b6:	2101      	movs	r1, #1
 80001b8:	484e      	ldr	r0, [pc, #312]	@ (80002f4 <getKeyInput+0x174>)
 80001ba:	f002 ffa7 	bl	800310c <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b4b      	ldr	r3, [pc, #300]	@ (80002f0 <getKeyInput+0x170>)
 80001c4:	60da      	str	r2, [r3, #12]
//  KeyReg[5] = HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin);
//  KeyReg[6] = HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin);
//  KeyReg[7] = HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin);
//  KeyReg[8] = HAL_GPIO_ReadPin(BUTTON9_GPIO_Port, BUTTON9_Pin);
//  KeyReg[9] = HAL_GPIO_ReadPin(BUTTON10_GPIO_Port, BUTTON10_Pin);
  for(int i=0;i<4;i++){
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	e086      	b.n	80002da <getKeyInput+0x15a>
	  switch(state[i]){
 80001cc:	4a4a      	ldr	r2, [pc, #296]	@ (80002f8 <getKeyInput+0x178>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	2b04      	cmp	r3, #4
 80001d6:	d878      	bhi.n	80002ca <getKeyInput+0x14a>
 80001d8:	a201      	add	r2, pc, #4	@ (adr r2, 80001e0 <getKeyInput+0x60>)
 80001da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001de:	bf00      	nop
 80001e0:	080001f5 	.word	0x080001f5
 80001e4:	08000217 	.word	0x08000217
 80001e8:	0800023b 	.word	0x0800023b
 80001ec:	0800025f 	.word	0x0800025f
 80001f0:	08000295 	.word	0x08000295
	  	case 0:	// KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE
		  button_flag[i] = 0;
 80001f4:	4a41      	ldr	r2, [pc, #260]	@ (80002fc <getKeyInput+0x17c>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	2100      	movs	r1, #0
 80001fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(KeyReg[i] == PRESSED_STATE) state[i] = 1;
 80001fe:	4a3c      	ldr	r2, [pc, #240]	@ (80002f0 <getKeyInput+0x170>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d161      	bne.n	80002ce <getKeyInput+0x14e>
 800020a:	4a3b      	ldr	r2, [pc, #236]	@ (80002f8 <getKeyInput+0x178>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	2101      	movs	r1, #1
 8000210:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000214:	e05b      	b.n	80002ce <getKeyInput+0x14e>
		case 1:	// KeyReg2 == NORMAL_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE)
 8000216:	4a36      	ldr	r2, [pc, #216]	@ (80002f0 <getKeyInput+0x170>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d105      	bne.n	800022e <getKeyInput+0xae>
				state[i] = 3;
 8000222:	4a35      	ldr	r2, [pc, #212]	@ (80002f8 <getKeyInput+0x178>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	2103      	movs	r1, #3
 8000228:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 2;
			break;
 800022c:	e052      	b.n	80002d4 <getKeyInput+0x154>
				state[i] = 2;
 800022e:	4a32      	ldr	r2, [pc, #200]	@ (80002f8 <getKeyInput+0x178>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2102      	movs	r1, #2
 8000234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000238:	e04c      	b.n	80002d4 <getKeyInput+0x154>
		case 2:	// KeyReg2 == PRESSED_STATE && KeyReg1 == NORMAL_STATE
			if (KeyReg[i] == PRESSED_STATE)
 800023a:	4a2d      	ldr	r2, [pc, #180]	@ (80002f0 <getKeyInput+0x170>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d105      	bne.n	8000252 <getKeyInput+0xd2>
				state[i] = 1;
 8000246:	4a2c      	ldr	r2, [pc, #176]	@ (80002f8 <getKeyInput+0x178>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2101      	movs	r1, #1
 800024c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 0;
			break;
 8000250:	e040      	b.n	80002d4 <getKeyInput+0x154>
				state[i] = 0;
 8000252:	4a29      	ldr	r2, [pc, #164]	@ (80002f8 <getKeyInput+0x178>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2100      	movs	r1, #0
 8000258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800025c:	e03a      	b.n	80002d4 <getKeyInput+0x154>
		case 3:	// KeyReg2 == PRESSED_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE) {
 800025e:	4a24      	ldr	r2, [pc, #144]	@ (80002f0 <getKeyInput+0x170>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d10e      	bne.n	8000288 <getKeyInput+0x108>
				button_flag[i] = 1;
 800026a:	4a24      	ldr	r2, [pc, #144]	@ (80002fc <getKeyInput+0x17c>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2101      	movs	r1, #1
 8000270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				TimeOutForKeyPress = 500;
 8000274:	4b22      	ldr	r3, [pc, #136]	@ (8000300 <getKeyInput+0x180>)
 8000276:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800027a:	601a      	str	r2, [r3, #0]
				state[i] = 4;
 800027c:	4a1e      	ldr	r2, [pc, #120]	@ (80002f8 <getKeyInput+0x178>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2104      	movs	r1, #4
 8000282:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			} else
				state[i] = 1;
			break;
 8000286:	e025      	b.n	80002d4 <getKeyInput+0x154>
				state[i] = 1;
 8000288:	4a1b      	ldr	r2, [pc, #108]	@ (80002f8 <getKeyInput+0x178>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2101      	movs	r1, #1
 800028e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000292:	e01f      	b.n	80002d4 <getKeyInput+0x154>
		case 4: // KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE && KeyReg0 = PRESSED_STATE
			if (KeyReg[i] != PRESSED_STATE) {
 8000294:	4a16      	ldr	r2, [pc, #88]	@ (80002f0 <getKeyInput+0x170>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d005      	beq.n	80002ac <getKeyInput+0x12c>
				state[i] = 1;
 80002a0:	4a15      	ldr	r2, [pc, #84]	@ (80002f8 <getKeyInput+0x178>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2101      	movs	r1, #1
 80002a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80002aa:	e013      	b.n	80002d4 <getKeyInput+0x154>
			}
			TimeOutForKeyPress--;
 80002ac:	4b14      	ldr	r3, [pc, #80]	@ (8000300 <getKeyInput+0x180>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	3b01      	subs	r3, #1
 80002b2:	4a13      	ldr	r2, [pc, #76]	@ (8000300 <getKeyInput+0x180>)
 80002b4:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) button_long_pressed[i] = 1;
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <getKeyInput+0x180>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d109      	bne.n	80002d2 <getKeyInput+0x152>
 80002be:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <getKeyInput+0x184>)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2101      	movs	r1, #1
 80002c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002c8:	e003      	b.n	80002d2 <getKeyInput+0x152>
		default:
			break;
 80002ca:	bf00      	nop
 80002cc:	e002      	b.n	80002d4 <getKeyInput+0x154>
			break;
 80002ce:	bf00      	nop
 80002d0:	e000      	b.n	80002d4 <getKeyInput+0x154>
			break;
 80002d2:	bf00      	nop
  for(int i=0;i<4;i++){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	607b      	str	r3, [r7, #4]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2b03      	cmp	r3, #3
 80002de:	f77f af75 	ble.w	80001cc <getKeyInput+0x4c>
	  }
  }
}
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010800 	.word	0x40010800
 80002f0:	200000b4 	.word	0x200000b4
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	2000012c 	.word	0x2000012c
 80002fc:	20000104 	.word	0x20000104
 8000300:	20000000 	.word	0x20000000
 8000304:	200000dc 	.word	0x200000dc

08000308 <command_parser_init>:

uint8_t request_flag = 0;
uint8_t ok_flag = 0;


void command_parser_init() {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &temp, 1);
 800030c:	2201      	movs	r2, #1
 800030e:	4903      	ldr	r1, [pc, #12]	@ (800031c <command_parser_init+0x14>)
 8000310:	4803      	ldr	r0, [pc, #12]	@ (8000320 <command_parser_init+0x18>)
 8000312:	f004 fcc6 	bl	8004ca2 <HAL_UART_Receive_IT>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000154 	.word	0x20000154
 8000320:	2000022c 	.word	0x2000022c

08000324 <getRunFlag>:
;
uint8_t getRunFlag() {
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	return run_flag;
 8000328:	4b02      	ldr	r3, [pc, #8]	@ (8000334 <getRunFlag+0x10>)
 800032a:	781b      	ldrb	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	20000158 	.word	0x20000158

08000338 <setRunFlag>:
;
void setRunFlag(uint8_t value) {
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	run_flag = value;
 8000342:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <setRunFlag+0x1c>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	7013      	strb	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000158 	.word	0x20000158

08000358 <getRYFlag>:
;
uint8_t getRYFlag() {
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	return ry_flag;
 800035c:	4b02      	ldr	r3, [pc, #8]	@ (8000368 <getRYFlag+0x10>)
 800035e:	781b      	ldrb	r3, [r3, #0]
}
 8000360:	4618      	mov	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000159 	.word	0x20000159

0800036c <setRYFlag>:
;
void setRYFlag(uint8_t value) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	ry_flag = value;
 8000376:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <setRYFlag+0x1c>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	7013      	strb	r3, [r2, #0]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	20000159 	.word	0x20000159

0800038c <getRGFlag>:
;
uint8_t getRGFlag() {
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
	return rg_flag;
 8000390:	4b02      	ldr	r3, [pc, #8]	@ (800039c <getRGFlag+0x10>)
 8000392:	781b      	ldrb	r3, [r3, #0]
}
 8000394:	4618      	mov	r0, r3
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	2000015a 	.word	0x2000015a

080003a0 <setRGFlag>:
;
void setRGFlag(uint8_t value) {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	rg_flag = value;
 80003aa:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <setRGFlag+0x1c>)
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	7013      	strb	r3, [r2, #0]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	2000015a 	.word	0x2000015a

080003c0 <getYRFlag>:
;
uint8_t getYRFlag() {
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return yr_flag;
 80003c4:	4b02      	ldr	r3, [pc, #8]	@ (80003d0 <getYRFlag+0x10>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	2000015b 	.word	0x2000015b

080003d4 <setYRFlag>:
;
void setYRFlag(uint8_t value) {
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
	yr_flag = value;
 80003de:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <setYRFlag+0x1c>)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	7013      	strb	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bc80      	pop	{r7}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	2000015b 	.word	0x2000015b

080003f4 <getGRFlag>:
;
uint8_t getGRFlag() {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	return gr_flag;
 80003f8:	4b02      	ldr	r3, [pc, #8]	@ (8000404 <getGRFlag+0x10>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	2000015c 	.word	0x2000015c

08000408 <setGRFlag>:
;
void setGRFlag(uint8_t value) {
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	4603      	mov	r3, r0
 8000410:	71fb      	strb	r3, [r7, #7]
	gr_flag = value;
 8000412:	4a04      	ldr	r2, [pc, #16]	@ (8000424 <setGRFlag+0x1c>)
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	7013      	strb	r3, [r2, #0]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	2000015c 	.word	0x2000015c

08000428 <getSetFlag>:
;
uint8_t getSetFlag() {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	return set_flag;
 800042c:	4b02      	ldr	r3, [pc, #8]	@ (8000438 <getSetFlag+0x10>)
 800042e:	781b      	ldrb	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	2000015d 	.word	0x2000015d

0800043c <setSetFlag>:
;
void setSetFlag(uint8_t value) {
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]
	set_flag = value;
 8000446:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <setSetFlag+0x1c>)
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	7013      	strb	r3, [r2, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	2000015d 	.word	0x2000015d

0800045c <getManFlag>:
;
uint8_t getManFlag() {
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	return man_flag;
 8000460:	4b02      	ldr	r3, [pc, #8]	@ (800046c <getManFlag+0x10>)
 8000462:	781b      	ldrb	r3, [r3, #0]
}
 8000464:	4618      	mov	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	2000015e 	.word	0x2000015e

08000470 <setManFlag>:
;
void setManFlag(uint8_t value) {
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
	man_flag = value;
 800047a:	4a04      	ldr	r2, [pc, #16]	@ (800048c <setManFlag+0x1c>)
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	7013      	strb	r3, [r2, #0]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	2000015e 	.word	0x2000015e

08000490 <getDataFlag>:
;
uint8_t getDataFlag() {
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	return data_flag;
 8000494:	4b02      	ldr	r3, [pc, #8]	@ (80004a0 <getDataFlag+0x10>)
 8000496:	781b      	ldrb	r3, [r3, #0]
}
 8000498:	4618      	mov	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	2000015f 	.word	0x2000015f

080004a4 <setDataFlag>:
;
void setDataFlag(uint8_t value) {
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	data_flag = value;
 80004ae:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <setDataFlag+0x1c>)
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	7013      	strb	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	2000015f 	.word	0x2000015f

080004c4 <command_parser_fsm>:
}
;

int process_idx = 0;
int old_process_idx = 0;
void command_parser_fsm() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	switch (status) {
 80004c8:	4ba2      	ldr	r3, [pc, #648]	@ (8000754 <command_parser_fsm+0x290>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b14      	cmp	r3, #20
 80004ce:	f200 8482 	bhi.w	8000dd6 <command_parser_fsm+0x912>
 80004d2:	a201      	add	r2, pc, #4	@ (adr r2, 80004d8 <command_parser_fsm+0x14>)
 80004d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d8:	08000537 	.word	0x08000537
 80004dc:	08000577 	.word	0x08000577
 80004e0:	080006df 	.word	0x080006df
 80004e4:	080007a3 	.word	0x080007a3
 80004e8:	080008e7 	.word	0x080008e7
 80004ec:	0800080b 	.word	0x0800080b
 80004f0:	08000879 	.word	0x08000879
 80004f4:	08000955 	.word	0x08000955
 80004f8:	080009bd 	.word	0x080009bd
 80004fc:	08000a51 	.word	0x08000a51
 8000500:	08000ab9 	.word	0x08000ab9
 8000504:	08000b27 	.word	0x08000b27
 8000508:	08000c05 	.word	0x08000c05
 800050c:	08000cfb 	.word	0x08000cfb
 8000510:	08000b9d 	.word	0x08000b9d
 8000514:	08000c6d 	.word	0x08000c6d
 8000518:	08000d69 	.word	0x08000d69
 800051c:	08000dd7 	.word	0x08000dd7
 8000520:	0800067b 	.word	0x0800067b
 8000524:	08000dd7 	.word	0x08000dd7
 8000528:	0800052d 	.word	0x0800052d
	case CMD_PARSER_INIT:
		status = CMD_PARSER_IDLE;
 800052c:	4b89      	ldr	r3, [pc, #548]	@ (8000754 <command_parser_fsm+0x290>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
		break;
 8000532:	f000 bc51 	b.w	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_IDLE:
		idx = process_idx % 30;
 8000536:	4b88      	ldr	r3, [pc, #544]	@ (8000758 <command_parser_fsm+0x294>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	4b88      	ldr	r3, [pc, #544]	@ (800075c <command_parser_fsm+0x298>)
 800053c:	fb83 1302 	smull	r1, r3, r3, r2
 8000540:	4413      	add	r3, r2
 8000542:	1119      	asrs	r1, r3, #4
 8000544:	17d3      	asrs	r3, r2, #31
 8000546:	1ac9      	subs	r1, r1, r3
 8000548:	460b      	mov	r3, r1
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	1ad1      	subs	r1, r2, r3
 8000552:	b2ca      	uxtb	r2, r1
 8000554:	4b82      	ldr	r3, [pc, #520]	@ (8000760 <command_parser_fsm+0x29c>)
 8000556:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000558:	4b81      	ldr	r3, [pc, #516]	@ (8000760 <command_parser_fsm+0x29c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b81      	ldr	r3, [pc, #516]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000560:	5c9b      	ldrb	r3, [r3, r2]
 8000562:	2b21      	cmp	r3, #33	@ 0x21
 8000564:	d107      	bne.n	8000576 <command_parser_fsm+0xb2>
			status = CMD_PARSER_MARK;
 8000566:	4b7b      	ldr	r3, [pc, #492]	@ (8000754 <command_parser_fsm+0x290>)
 8000568:	2201      	movs	r2, #1
 800056a:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 800056c:	4b7e      	ldr	r3, [pc, #504]	@ (8000768 <command_parser_fsm+0x2a4>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
			break;
 8000572:	f000 bc31 	b.w	8000dd8 <command_parser_fsm+0x914>
		}
		;
	case CMD_PARSER_MARK: // this is !
		idx = process_idx % 30;
 8000576:	4b78      	ldr	r3, [pc, #480]	@ (8000758 <command_parser_fsm+0x294>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4b78      	ldr	r3, [pc, #480]	@ (800075c <command_parser_fsm+0x298>)
 800057c:	fb83 1302 	smull	r1, r3, r3, r2
 8000580:	4413      	add	r3, r2
 8000582:	1119      	asrs	r1, r3, #4
 8000584:	17d3      	asrs	r3, r2, #31
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	460b      	mov	r3, r1
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	1ad1      	subs	r1, r2, r3
 8000592:	b2ca      	uxtb	r2, r1
 8000594:	4b72      	ldr	r3, [pc, #456]	@ (8000760 <command_parser_fsm+0x29c>)
 8000596:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000598:	4b71      	ldr	r3, [pc, #452]	@ (8000760 <command_parser_fsm+0x29c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b71      	ldr	r3, [pc, #452]	@ (8000764 <command_parser_fsm+0x2a0>)
 80005a0:	5c9b      	ldrb	r3, [r3, r2]
 80005a2:	2b21      	cmp	r3, #33	@ 0x21
 80005a4:	d10e      	bne.n	80005c4 <command_parser_fsm+0x100>
			status = CMD_PARSER_MARK;
 80005a6:	4b6b      	ldr	r3, [pc, #428]	@ (8000754 <command_parser_fsm+0x290>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (unsigned char*)'N', 1, 1000);
 80005ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005b0:	2201      	movs	r2, #1
 80005b2:	214e      	movs	r1, #78	@ 0x4e
 80005b4:	486d      	ldr	r0, [pc, #436]	@ (800076c <command_parser_fsm+0x2a8>)
 80005b6:	f004 fae9 	bl	8004b8c <HAL_UART_Transmit>
			buffer_flag = 0;
 80005ba:	4b6b      	ldr	r3, [pc, #428]	@ (8000768 <command_parser_fsm+0x2a4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
			break;
 80005c0:	f000 bc0a 	b.w	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'r') {
 80005c4:	4b66      	ldr	r3, [pc, #408]	@ (8000760 <command_parser_fsm+0x29c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b66      	ldr	r3, [pc, #408]	@ (8000764 <command_parser_fsm+0x2a0>)
 80005cc:	5c9b      	ldrb	r3, [r3, r2]
 80005ce:	2b72      	cmp	r3, #114	@ 0x72
 80005d0:	d106      	bne.n	80005e0 <command_parser_fsm+0x11c>
			status = CMD_PARSER_R;
 80005d2:	4b60      	ldr	r3, [pc, #384]	@ (8000754 <command_parser_fsm+0x290>)
 80005d4:	2202      	movs	r2, #2
 80005d6:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80005d8:	4b63      	ldr	r3, [pc, #396]	@ (8000768 <command_parser_fsm+0x2a4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
			break;
 80005de:	e3fb      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'y') {
 80005e0:	4b5f      	ldr	r3, [pc, #380]	@ (8000760 <command_parser_fsm+0x29c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	461a      	mov	r2, r3
 80005e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000764 <command_parser_fsm+0x2a0>)
 80005e8:	5c9b      	ldrb	r3, [r3, r2]
 80005ea:	2b79      	cmp	r3, #121	@ 0x79
 80005ec:	d106      	bne.n	80005fc <command_parser_fsm+0x138>
			status = CMD_PARSER_Y;
 80005ee:	4b59      	ldr	r3, [pc, #356]	@ (8000754 <command_parser_fsm+0x290>)
 80005f0:	2207      	movs	r2, #7
 80005f2:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80005f4:	4b5c      	ldr	r3, [pc, #368]	@ (8000768 <command_parser_fsm+0x2a4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
			break;
 80005fa:	e3ed      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'g') {
 80005fc:	4b58      	ldr	r3, [pc, #352]	@ (8000760 <command_parser_fsm+0x29c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b58      	ldr	r3, [pc, #352]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000604:	5c9b      	ldrb	r3, [r3, r2]
 8000606:	2b67      	cmp	r3, #103	@ 0x67
 8000608:	d106      	bne.n	8000618 <command_parser_fsm+0x154>
			status = CMD_PARSER_G;
 800060a:	4b52      	ldr	r3, [pc, #328]	@ (8000754 <command_parser_fsm+0x290>)
 800060c:	2209      	movs	r2, #9
 800060e:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000610:	4b55      	ldr	r3, [pc, #340]	@ (8000768 <command_parser_fsm+0x2a4>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
			break;
 8000616:	e3df      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 's') {
 8000618:	4b51      	ldr	r3, [pc, #324]	@ (8000760 <command_parser_fsm+0x29c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b51      	ldr	r3, [pc, #324]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000620:	5c9b      	ldrb	r3, [r3, r2]
 8000622:	2b73      	cmp	r3, #115	@ 0x73
 8000624:	d106      	bne.n	8000634 <command_parser_fsm+0x170>
			status = CMD_PARSER_S;
 8000626:	4b4b      	ldr	r3, [pc, #300]	@ (8000754 <command_parser_fsm+0x290>)
 8000628:	220e      	movs	r2, #14
 800062a:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 800062c:	4b4e      	ldr	r3, [pc, #312]	@ (8000768 <command_parser_fsm+0x2a4>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
			break;
 8000632:	e3d1      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'm') {
 8000634:	4b4a      	ldr	r3, [pc, #296]	@ (8000760 <command_parser_fsm+0x29c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	461a      	mov	r2, r3
 800063a:	4b4a      	ldr	r3, [pc, #296]	@ (8000764 <command_parser_fsm+0x2a0>)
 800063c:	5c9b      	ldrb	r3, [r3, r2]
 800063e:	2b6d      	cmp	r3, #109	@ 0x6d
 8000640:	d106      	bne.n	8000650 <command_parser_fsm+0x18c>
			status = CMD_PARSER_M;
 8000642:	4b44      	ldr	r3, [pc, #272]	@ (8000754 <command_parser_fsm+0x290>)
 8000644:	220b      	movs	r2, #11
 8000646:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000648:	4b47      	ldr	r3, [pc, #284]	@ (8000768 <command_parser_fsm+0x2a4>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e3c3      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if(buffer[idx] == '*'){
 8000650:	4b43      	ldr	r3, [pc, #268]	@ (8000760 <command_parser_fsm+0x29c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	461a      	mov	r2, r3
 8000656:	4b43      	ldr	r3, [pc, #268]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000658:	5c9b      	ldrb	r3, [r3, r2]
 800065a:	2b2a      	cmp	r3, #42	@ 0x2a
 800065c:	d106      	bne.n	800066c <command_parser_fsm+0x1a8>
			status = CMD_PARSER_STAR;
 800065e:	4b3d      	ldr	r3, [pc, #244]	@ (8000754 <command_parser_fsm+0x290>)
 8000660:	2212      	movs	r2, #18
 8000662:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000664:	4b40      	ldr	r3, [pc, #256]	@ (8000768 <command_parser_fsm+0x2a4>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
			break;
 800066a:	e3b5      	b.n	8000dd8 <command_parser_fsm+0x914>

		};
		status = CMD_PARSER_IDLE;
 800066c:	4b39      	ldr	r3, [pc, #228]	@ (8000754 <command_parser_fsm+0x290>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000672:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <command_parser_fsm+0x2a4>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
		break;
 8000678:	e3ae      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_STAR:
			idx = process_idx % 30;
 800067a:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <command_parser_fsm+0x294>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b37      	ldr	r3, [pc, #220]	@ (800075c <command_parser_fsm+0x298>)
 8000680:	fb83 1302 	smull	r1, r3, r3, r2
 8000684:	4413      	add	r3, r2
 8000686:	1119      	asrs	r1, r3, #4
 8000688:	17d3      	asrs	r3, r2, #31
 800068a:	1ac9      	subs	r1, r1, r3
 800068c:	460b      	mov	r3, r1
 800068e:	011b      	lsls	r3, r3, #4
 8000690:	1a5b      	subs	r3, r3, r1
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	1ad1      	subs	r1, r2, r3
 8000696:	b2ca      	uxtb	r2, r1
 8000698:	4b31      	ldr	r3, [pc, #196]	@ (8000760 <command_parser_fsm+0x29c>)
 800069a:	701a      	strb	r2, [r3, #0]
			if (buffer[idx] == '!') {
 800069c:	4b30      	ldr	r3, [pc, #192]	@ (8000760 <command_parser_fsm+0x29c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b30      	ldr	r3, [pc, #192]	@ (8000764 <command_parser_fsm+0x2a0>)
 80006a4:	5c9b      	ldrb	r3, [r3, r2]
 80006a6:	2b21      	cmp	r3, #33	@ 0x21
 80006a8:	d106      	bne.n	80006b8 <command_parser_fsm+0x1f4>
				status = CMD_PARSER_MARK;
 80006aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <command_parser_fsm+0x290>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
				buffer_flag = 0;
 80006b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000768 <command_parser_fsm+0x2a4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	701a      	strb	r2, [r3, #0]
				break;
 80006b6:	e38f      	b.n	8000dd8 <command_parser_fsm+0x914>
			}
			;
			if (buffer[idx] == '#') { // !*r00&y00&g00#
 80006b8:	4b29      	ldr	r3, [pc, #164]	@ (8000760 <command_parser_fsm+0x29c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b29      	ldr	r3, [pc, #164]	@ (8000764 <command_parser_fsm+0x2a0>)
 80006c0:	5c9b      	ldrb	r3, [r3, r2]
 80006c2:	2b23      	cmp	r3, #35	@ 0x23
 80006c4:	d107      	bne.n	80006d6 <command_parser_fsm+0x212>
				old_process_idx = process_idx;
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <command_parser_fsm+0x294>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a29      	ldr	r2, [pc, #164]	@ (8000770 <command_parser_fsm+0x2ac>)
 80006cc:	6013      	str	r3, [r2, #0]
				data_flag = 1;
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <command_parser_fsm+0x2b0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	701a      	strb	r2, [r3, #0]
				break;
 80006d4:	e380      	b.n	8000dd8 <command_parser_fsm+0x914>
			}
			;
			buffer_flag = 0;
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <command_parser_fsm+0x2a4>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]
			break;
 80006dc:	e37c      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_R:
		idx = process_idx % 30;
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <command_parser_fsm+0x294>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	4b1e      	ldr	r3, [pc, #120]	@ (800075c <command_parser_fsm+0x298>)
 80006e4:	fb83 1302 	smull	r1, r3, r3, r2
 80006e8:	4413      	add	r3, r2
 80006ea:	1119      	asrs	r1, r3, #4
 80006ec:	17d3      	asrs	r3, r2, #31
 80006ee:	1ac9      	subs	r1, r1, r3
 80006f0:	460b      	mov	r3, r1
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	1a5b      	subs	r3, r3, r1
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1ad1      	subs	r1, r2, r3
 80006fa:	b2ca      	uxtb	r2, r1
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <command_parser_fsm+0x29c>)
 80006fe:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <command_parser_fsm+0x29c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000708:	5c9b      	ldrb	r3, [r3, r2]
 800070a:	2b21      	cmp	r3, #33	@ 0x21
 800070c:	d106      	bne.n	800071c <command_parser_fsm+0x258>
			status = CMD_PARSER_MARK;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <command_parser_fsm+0x290>)
 8000710:	2201      	movs	r2, #1
 8000712:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000714:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <command_parser_fsm+0x2a4>)
 8000716:	2200      	movs	r2, #0
 8000718:	701a      	strb	r2, [r3, #0]
			break;
 800071a:	e35d      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'g') {
 800071c:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <command_parser_fsm+0x29c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	2b67      	cmp	r3, #103	@ 0x67
 8000728:	d106      	bne.n	8000738 <command_parser_fsm+0x274>
			status = CMD_PARSER_RG;
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <command_parser_fsm+0x290>)
 800072c:	2206      	movs	r2, #6
 800072e:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000730:	4b0d      	ldr	r3, [pc, #52]	@ (8000768 <command_parser_fsm+0x2a4>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
			break;
 8000736:	e34f      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'u') {
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <command_parser_fsm+0x29c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b09      	ldr	r3, [pc, #36]	@ (8000764 <command_parser_fsm+0x2a0>)
 8000740:	5c9b      	ldrb	r3, [r3, r2]
 8000742:	2b75      	cmp	r3, #117	@ 0x75
 8000744:	d118      	bne.n	8000778 <command_parser_fsm+0x2b4>
			status = CMD_PARSER_RU;
 8000746:	4b03      	ldr	r3, [pc, #12]	@ (8000754 <command_parser_fsm+0x290>)
 8000748:	2203      	movs	r2, #3
 800074a:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <command_parser_fsm+0x2a4>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
			break;
 8000752:	e341      	b.n	8000dd8 <command_parser_fsm+0x914>
 8000754:	20000004 	.word	0x20000004
 8000758:	20000160 	.word	0x20000160
 800075c:	88888889 	.word	0x88888889
 8000760:	20000156 	.word	0x20000156
 8000764:	20000008 	.word	0x20000008
 8000768:	20000157 	.word	0x20000157
 800076c:	2000022c 	.word	0x2000022c
 8000770:	20000164 	.word	0x20000164
 8000774:	2000015f 	.word	0x2000015f
		}
		;
		if (buffer[idx] == 'y') {
 8000778:	4ba0      	ldr	r3, [pc, #640]	@ (80009fc <command_parser_fsm+0x538>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4ba0      	ldr	r3, [pc, #640]	@ (8000a00 <command_parser_fsm+0x53c>)
 8000780:	5c9b      	ldrb	r3, [r3, r2]
 8000782:	2b79      	cmp	r3, #121	@ 0x79
 8000784:	d106      	bne.n	8000794 <command_parser_fsm+0x2d0>
			status = CMD_PARSER_RY;
 8000786:	4b9f      	ldr	r3, [pc, #636]	@ (8000a04 <command_parser_fsm+0x540>)
 8000788:	2205      	movs	r2, #5
 800078a:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 800078c:	4b9e      	ldr	r3, [pc, #632]	@ (8000a08 <command_parser_fsm+0x544>)
 800078e:	2200      	movs	r2, #0
 8000790:	701a      	strb	r2, [r3, #0]
			break;
 8000792:	e321      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 8000794:	4b9b      	ldr	r3, [pc, #620]	@ (8000a04 <command_parser_fsm+0x540>)
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 800079a:	4b9b      	ldr	r3, [pc, #620]	@ (8000a08 <command_parser_fsm+0x544>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
		break;
 80007a0:	e31a      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_RU:
		idx = process_idx % 30;
 80007a2:	4b9a      	ldr	r3, [pc, #616]	@ (8000a0c <command_parser_fsm+0x548>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b9a      	ldr	r3, [pc, #616]	@ (8000a10 <command_parser_fsm+0x54c>)
 80007a8:	fb83 1302 	smull	r1, r3, r3, r2
 80007ac:	4413      	add	r3, r2
 80007ae:	1119      	asrs	r1, r3, #4
 80007b0:	17d3      	asrs	r3, r2, #31
 80007b2:	1ac9      	subs	r1, r1, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	011b      	lsls	r3, r3, #4
 80007b8:	1a5b      	subs	r3, r3, r1
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	1ad1      	subs	r1, r2, r3
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	4b8e      	ldr	r3, [pc, #568]	@ (80009fc <command_parser_fsm+0x538>)
 80007c2:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 80007c4:	4b8d      	ldr	r3, [pc, #564]	@ (80009fc <command_parser_fsm+0x538>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b8d      	ldr	r3, [pc, #564]	@ (8000a00 <command_parser_fsm+0x53c>)
 80007cc:	5c9b      	ldrb	r3, [r3, r2]
 80007ce:	2b21      	cmp	r3, #33	@ 0x21
 80007d0:	d106      	bne.n	80007e0 <command_parser_fsm+0x31c>
			status = CMD_PARSER_MARK;
 80007d2:	4b8c      	ldr	r3, [pc, #560]	@ (8000a04 <command_parser_fsm+0x540>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80007d8:	4b8b      	ldr	r3, [pc, #556]	@ (8000a08 <command_parser_fsm+0x544>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
			break;
 80007de:	e2fb      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'n') {
 80007e0:	4b86      	ldr	r3, [pc, #536]	@ (80009fc <command_parser_fsm+0x538>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b86      	ldr	r3, [pc, #536]	@ (8000a00 <command_parser_fsm+0x53c>)
 80007e8:	5c9b      	ldrb	r3, [r3, r2]
 80007ea:	2b6e      	cmp	r3, #110	@ 0x6e
 80007ec:	d106      	bne.n	80007fc <command_parser_fsm+0x338>
			status = CMD_PARSER_RUN;
 80007ee:	4b85      	ldr	r3, [pc, #532]	@ (8000a04 <command_parser_fsm+0x540>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80007f4:	4b84      	ldr	r3, [pc, #528]	@ (8000a08 <command_parser_fsm+0x544>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
			break;
 80007fa:	e2ed      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 80007fc:	4b81      	ldr	r3, [pc, #516]	@ (8000a04 <command_parser_fsm+0x540>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000802:	4b81      	ldr	r3, [pc, #516]	@ (8000a08 <command_parser_fsm+0x544>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
		break;
 8000808:	e2e6      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_RY:
		idx = process_idx % 30;
 800080a:	4b80      	ldr	r3, [pc, #512]	@ (8000a0c <command_parser_fsm+0x548>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b80      	ldr	r3, [pc, #512]	@ (8000a10 <command_parser_fsm+0x54c>)
 8000810:	fb83 1302 	smull	r1, r3, r3, r2
 8000814:	4413      	add	r3, r2
 8000816:	1119      	asrs	r1, r3, #4
 8000818:	17d3      	asrs	r3, r2, #31
 800081a:	1ac9      	subs	r1, r1, r3
 800081c:	460b      	mov	r3, r1
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	1a5b      	subs	r3, r3, r1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	1ad1      	subs	r1, r2, r3
 8000826:	b2ca      	uxtb	r2, r1
 8000828:	4b74      	ldr	r3, [pc, #464]	@ (80009fc <command_parser_fsm+0x538>)
 800082a:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 800082c:	4b73      	ldr	r3, [pc, #460]	@ (80009fc <command_parser_fsm+0x538>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b73      	ldr	r3, [pc, #460]	@ (8000a00 <command_parser_fsm+0x53c>)
 8000834:	5c9b      	ldrb	r3, [r3, r2]
 8000836:	2b21      	cmp	r3, #33	@ 0x21
 8000838:	d106      	bne.n	8000848 <command_parser_fsm+0x384>
			status = CMD_PARSER_MARK;
 800083a:	4b72      	ldr	r3, [pc, #456]	@ (8000a04 <command_parser_fsm+0x540>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000840:	4b71      	ldr	r3, [pc, #452]	@ (8000a08 <command_parser_fsm+0x544>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
			break;
 8000846:	e2c7      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == '#') {
 8000848:	4b6c      	ldr	r3, [pc, #432]	@ (80009fc <command_parser_fsm+0x538>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	4b6c      	ldr	r3, [pc, #432]	@ (8000a00 <command_parser_fsm+0x53c>)
 8000850:	5c9b      	ldrb	r3, [r3, r2]
 8000852:	2b23      	cmp	r3, #35	@ 0x23
 8000854:	d109      	bne.n	800086a <command_parser_fsm+0x3a6>
			status = CMD_PARSER_IDLE;
 8000856:	4b6b      	ldr	r3, [pc, #428]	@ (8000a04 <command_parser_fsm+0x540>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			ry_flag = 1;
 800085c:	4b6d      	ldr	r3, [pc, #436]	@ (8000a14 <command_parser_fsm+0x550>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 8000862:	4b69      	ldr	r3, [pc, #420]	@ (8000a08 <command_parser_fsm+0x544>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
			break;
 8000868:	e2b6      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 800086a:	4b66      	ldr	r3, [pc, #408]	@ (8000a04 <command_parser_fsm+0x540>)
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000870:	4b65      	ldr	r3, [pc, #404]	@ (8000a08 <command_parser_fsm+0x544>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
		break;
 8000876:	e2af      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_RG:
		idx = process_idx % 30;
 8000878:	4b64      	ldr	r3, [pc, #400]	@ (8000a0c <command_parser_fsm+0x548>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b64      	ldr	r3, [pc, #400]	@ (8000a10 <command_parser_fsm+0x54c>)
 800087e:	fb83 1302 	smull	r1, r3, r3, r2
 8000882:	4413      	add	r3, r2
 8000884:	1119      	asrs	r1, r3, #4
 8000886:	17d3      	asrs	r3, r2, #31
 8000888:	1ac9      	subs	r1, r1, r3
 800088a:	460b      	mov	r3, r1
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	1a5b      	subs	r3, r3, r1
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	1ad1      	subs	r1, r2, r3
 8000894:	b2ca      	uxtb	r2, r1
 8000896:	4b59      	ldr	r3, [pc, #356]	@ (80009fc <command_parser_fsm+0x538>)
 8000898:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 800089a:	4b58      	ldr	r3, [pc, #352]	@ (80009fc <command_parser_fsm+0x538>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	461a      	mov	r2, r3
 80008a0:	4b57      	ldr	r3, [pc, #348]	@ (8000a00 <command_parser_fsm+0x53c>)
 80008a2:	5c9b      	ldrb	r3, [r3, r2]
 80008a4:	2b21      	cmp	r3, #33	@ 0x21
 80008a6:	d106      	bne.n	80008b6 <command_parser_fsm+0x3f2>
			status = CMD_PARSER_MARK;
 80008a8:	4b56      	ldr	r3, [pc, #344]	@ (8000a04 <command_parser_fsm+0x540>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80008ae:	4b56      	ldr	r3, [pc, #344]	@ (8000a08 <command_parser_fsm+0x544>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
			break;
 80008b4:	e290      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == '#') {
 80008b6:	4b51      	ldr	r3, [pc, #324]	@ (80009fc <command_parser_fsm+0x538>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b50      	ldr	r3, [pc, #320]	@ (8000a00 <command_parser_fsm+0x53c>)
 80008be:	5c9b      	ldrb	r3, [r3, r2]
 80008c0:	2b23      	cmp	r3, #35	@ 0x23
 80008c2:	d109      	bne.n	80008d8 <command_parser_fsm+0x414>
			status = CMD_PARSER_IDLE;
 80008c4:	4b4f      	ldr	r3, [pc, #316]	@ (8000a04 <command_parser_fsm+0x540>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			rg_flag = 1;
 80008ca:	4b53      	ldr	r3, [pc, #332]	@ (8000a18 <command_parser_fsm+0x554>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 80008d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000a08 <command_parser_fsm+0x544>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
			break;
 80008d6:	e27f      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 80008d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000a04 <command_parser_fsm+0x540>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 80008de:	4b4a      	ldr	r3, [pc, #296]	@ (8000a08 <command_parser_fsm+0x544>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
		break;
 80008e4:	e278      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_RUN:
		idx = process_idx % 30;
 80008e6:	4b49      	ldr	r3, [pc, #292]	@ (8000a0c <command_parser_fsm+0x548>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b49      	ldr	r3, [pc, #292]	@ (8000a10 <command_parser_fsm+0x54c>)
 80008ec:	fb83 1302 	smull	r1, r3, r3, r2
 80008f0:	4413      	add	r3, r2
 80008f2:	1119      	asrs	r1, r3, #4
 80008f4:	17d3      	asrs	r3, r2, #31
 80008f6:	1ac9      	subs	r1, r1, r3
 80008f8:	460b      	mov	r3, r1
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	1a5b      	subs	r3, r3, r1
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	1ad1      	subs	r1, r2, r3
 8000902:	b2ca      	uxtb	r2, r1
 8000904:	4b3d      	ldr	r3, [pc, #244]	@ (80009fc <command_parser_fsm+0x538>)
 8000906:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000908:	4b3c      	ldr	r3, [pc, #240]	@ (80009fc <command_parser_fsm+0x538>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a00 <command_parser_fsm+0x53c>)
 8000910:	5c9b      	ldrb	r3, [r3, r2]
 8000912:	2b21      	cmp	r3, #33	@ 0x21
 8000914:	d106      	bne.n	8000924 <command_parser_fsm+0x460>
			status = CMD_PARSER_MARK;
 8000916:	4b3b      	ldr	r3, [pc, #236]	@ (8000a04 <command_parser_fsm+0x540>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 800091c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a08 <command_parser_fsm+0x544>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
			break;
 8000922:	e259      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == '#') {
 8000924:	4b35      	ldr	r3, [pc, #212]	@ (80009fc <command_parser_fsm+0x538>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b35      	ldr	r3, [pc, #212]	@ (8000a00 <command_parser_fsm+0x53c>)
 800092c:	5c9b      	ldrb	r3, [r3, r2]
 800092e:	2b23      	cmp	r3, #35	@ 0x23
 8000930:	d109      	bne.n	8000946 <command_parser_fsm+0x482>
			status = CMD_PARSER_IDLE;
 8000932:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <command_parser_fsm+0x540>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			run_flag = 1;
 8000938:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <command_parser_fsm+0x558>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 800093e:	4b32      	ldr	r3, [pc, #200]	@ (8000a08 <command_parser_fsm+0x544>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
			break;
 8000944:	e248      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 8000946:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <command_parser_fsm+0x540>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 800094c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <command_parser_fsm+0x544>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
		break;
 8000952:	e241      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_Y:
		idx = process_idx % 30;
 8000954:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <command_parser_fsm+0x548>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <command_parser_fsm+0x54c>)
 800095a:	fb83 1302 	smull	r1, r3, r3, r2
 800095e:	4413      	add	r3, r2
 8000960:	1119      	asrs	r1, r3, #4
 8000962:	17d3      	asrs	r3, r2, #31
 8000964:	1ac9      	subs	r1, r1, r3
 8000966:	460b      	mov	r3, r1
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	1a5b      	subs	r3, r3, r1
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	1ad1      	subs	r1, r2, r3
 8000970:	b2ca      	uxtb	r2, r1
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <command_parser_fsm+0x538>)
 8000974:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000976:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <command_parser_fsm+0x538>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <command_parser_fsm+0x53c>)
 800097e:	5c9b      	ldrb	r3, [r3, r2]
 8000980:	2b21      	cmp	r3, #33	@ 0x21
 8000982:	d106      	bne.n	8000992 <command_parser_fsm+0x4ce>
			status = CMD_PARSER_MARK;
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <command_parser_fsm+0x540>)
 8000986:	2201      	movs	r2, #1
 8000988:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <command_parser_fsm+0x544>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
			break;
 8000990:	e222      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'r') {
 8000992:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <command_parser_fsm+0x538>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <command_parser_fsm+0x53c>)
 800099a:	5c9b      	ldrb	r3, [r3, r2]
 800099c:	2b72      	cmp	r3, #114	@ 0x72
 800099e:	d106      	bne.n	80009ae <command_parser_fsm+0x4ea>
			status = CMD_PARSER_YR;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <command_parser_fsm+0x540>)
 80009a2:	2208      	movs	r2, #8
 80009a4:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <command_parser_fsm+0x544>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
			break;
 80009ac:	e214      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;

		status = CMD_PARSER_IDLE;
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <command_parser_fsm+0x540>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <command_parser_fsm+0x544>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
		break;
 80009ba:	e20d      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_YR:
		idx = process_idx % 30;
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <command_parser_fsm+0x548>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <command_parser_fsm+0x54c>)
 80009c2:	fb83 1302 	smull	r1, r3, r3, r2
 80009c6:	4413      	add	r3, r2
 80009c8:	1119      	asrs	r1, r3, #4
 80009ca:	17d3      	asrs	r3, r2, #31
 80009cc:	1ac9      	subs	r1, r1, r3
 80009ce:	460b      	mov	r3, r1
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	1a5b      	subs	r3, r3, r1
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	1ad1      	subs	r1, r2, r3
 80009d8:	b2ca      	uxtb	r2, r1
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <command_parser_fsm+0x538>)
 80009dc:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 80009de:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <command_parser_fsm+0x538>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <command_parser_fsm+0x53c>)
 80009e6:	5c9b      	ldrb	r3, [r3, r2]
 80009e8:	2b21      	cmp	r3, #33	@ 0x21
 80009ea:	d119      	bne.n	8000a20 <command_parser_fsm+0x55c>
			status = CMD_PARSER_MARK;
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <command_parser_fsm+0x540>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 80009f2:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <command_parser_fsm+0x544>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
			break;
 80009f8:	e1ee      	b.n	8000dd8 <command_parser_fsm+0x914>
 80009fa:	bf00      	nop
 80009fc:	20000156 	.word	0x20000156
 8000a00:	20000008 	.word	0x20000008
 8000a04:	20000004 	.word	0x20000004
 8000a08:	20000157 	.word	0x20000157
 8000a0c:	20000160 	.word	0x20000160
 8000a10:	88888889 	.word	0x88888889
 8000a14:	20000159 	.word	0x20000159
 8000a18:	2000015a 	.word	0x2000015a
 8000a1c:	20000158 	.word	0x20000158
		}
		;
		if (buffer[idx] == '#') {
 8000a20:	4ba2      	ldr	r3, [pc, #648]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4ba2      	ldr	r3, [pc, #648]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000a28:	5c9b      	ldrb	r3, [r3, r2]
 8000a2a:	2b23      	cmp	r3, #35	@ 0x23
 8000a2c:	d109      	bne.n	8000a42 <command_parser_fsm+0x57e>
			status = CMD_PARSER_IDLE;
 8000a2e:	4ba1      	ldr	r3, [pc, #644]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			yr_flag = 1;
 8000a34:	4ba0      	ldr	r3, [pc, #640]	@ (8000cb8 <command_parser_fsm+0x7f4>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 8000a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			break;
 8000a40:	e1ca      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 8000a42:	4b9c      	ldr	r3, [pc, #624]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000a48:	4b9c      	ldr	r3, [pc, #624]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
		break;
 8000a4e:	e1c3      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_G:
		idx = process_idx % 30;
 8000a50:	4b9b      	ldr	r3, [pc, #620]	@ (8000cc0 <command_parser_fsm+0x7fc>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b9b      	ldr	r3, [pc, #620]	@ (8000cc4 <command_parser_fsm+0x800>)
 8000a56:	fb83 1302 	smull	r1, r3, r3, r2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	1119      	asrs	r1, r3, #4
 8000a5e:	17d3      	asrs	r3, r2, #31
 8000a60:	1ac9      	subs	r1, r1, r3
 8000a62:	460b      	mov	r3, r1
 8000a64:	011b      	lsls	r3, r3, #4
 8000a66:	1a5b      	subs	r3, r3, r1
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	1ad1      	subs	r1, r2, r3
 8000a6c:	b2ca      	uxtb	r2, r1
 8000a6e:	4b8f      	ldr	r3, [pc, #572]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000a70:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000a72:	4b8e      	ldr	r3, [pc, #568]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b8d      	ldr	r3, [pc, #564]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000a7a:	5c9b      	ldrb	r3, [r3, r2]
 8000a7c:	2b21      	cmp	r3, #33	@ 0x21
 8000a7e:	d106      	bne.n	8000a8e <command_parser_fsm+0x5ca>
			status = CMD_PARSER_MARK;
 8000a80:	4b8c      	ldr	r3, [pc, #560]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000a86:	4b8d      	ldr	r3, [pc, #564]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
			break;
 8000a8c:	e1a4      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'r') {
 8000a8e:	4b87      	ldr	r3, [pc, #540]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b86      	ldr	r3, [pc, #536]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000a96:	5c9b      	ldrb	r3, [r3, r2]
 8000a98:	2b72      	cmp	r3, #114	@ 0x72
 8000a9a:	d106      	bne.n	8000aaa <command_parser_fsm+0x5e6>
			status = CMD_PARSER_GR;
 8000a9c:	4b85      	ldr	r3, [pc, #532]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000a9e:	220a      	movs	r2, #10
 8000aa0:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000aa2:	4b86      	ldr	r3, [pc, #536]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	701a      	strb	r2, [r3, #0]
			break;
 8000aa8:	e196      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;

		status = CMD_PARSER_IDLE;
 8000aaa:	4b82      	ldr	r3, [pc, #520]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000ab0:	4b82      	ldr	r3, [pc, #520]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
		break;
 8000ab6:	e18f      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_GR:
		idx = process_idx % 30;
 8000ab8:	4b81      	ldr	r3, [pc, #516]	@ (8000cc0 <command_parser_fsm+0x7fc>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b81      	ldr	r3, [pc, #516]	@ (8000cc4 <command_parser_fsm+0x800>)
 8000abe:	fb83 1302 	smull	r1, r3, r3, r2
 8000ac2:	4413      	add	r3, r2
 8000ac4:	1119      	asrs	r1, r3, #4
 8000ac6:	17d3      	asrs	r3, r2, #31
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	460b      	mov	r3, r1
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	1a5b      	subs	r3, r3, r1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	1ad1      	subs	r1, r2, r3
 8000ad4:	b2ca      	uxtb	r2, r1
 8000ad6:	4b75      	ldr	r3, [pc, #468]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000ada:	4b74      	ldr	r3, [pc, #464]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b73      	ldr	r3, [pc, #460]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000ae2:	5c9b      	ldrb	r3, [r3, r2]
 8000ae4:	2b21      	cmp	r3, #33	@ 0x21
 8000ae6:	d106      	bne.n	8000af6 <command_parser_fsm+0x632>
			status = CMD_PARSER_MARK;
 8000ae8:	4b72      	ldr	r3, [pc, #456]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000aee:	4b73      	ldr	r3, [pc, #460]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
			break;
 8000af4:	e170      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == '#') {
 8000af6:	4b6d      	ldr	r3, [pc, #436]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b6c      	ldr	r3, [pc, #432]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000afe:	5c9b      	ldrb	r3, [r3, r2]
 8000b00:	2b23      	cmp	r3, #35	@ 0x23
 8000b02:	d109      	bne.n	8000b18 <command_parser_fsm+0x654>
			status = CMD_PARSER_IDLE;
 8000b04:	4b6b      	ldr	r3, [pc, #428]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			gr_flag = 1;
 8000b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8000cc8 <command_parser_fsm+0x804>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 8000b10:	4b6a      	ldr	r3, [pc, #424]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
			break;
 8000b16:	e15f      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 8000b18:	4b66      	ldr	r3, [pc, #408]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000b1e:	4b67      	ldr	r3, [pc, #412]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
		break;
 8000b24:	e158      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_M:
		idx = process_idx % 30;
 8000b26:	4b66      	ldr	r3, [pc, #408]	@ (8000cc0 <command_parser_fsm+0x7fc>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4b66      	ldr	r3, [pc, #408]	@ (8000cc4 <command_parser_fsm+0x800>)
 8000b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b30:	4413      	add	r3, r2
 8000b32:	1119      	asrs	r1, r3, #4
 8000b34:	17d3      	asrs	r3, r2, #31
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	460b      	mov	r3, r1
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	1ad1      	subs	r1, r2, r3
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	4b59      	ldr	r3, [pc, #356]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000b46:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000b48:	4b58      	ldr	r3, [pc, #352]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b58      	ldr	r3, [pc, #352]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000b50:	5c9b      	ldrb	r3, [r3, r2]
 8000b52:	2b21      	cmp	r3, #33	@ 0x21
 8000b54:	d106      	bne.n	8000b64 <command_parser_fsm+0x6a0>
			status = CMD_PARSER_MARK;
 8000b56:	4b57      	ldr	r3, [pc, #348]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000b5c:	4b57      	ldr	r3, [pc, #348]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
			break;
 8000b62:	e139      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'a') {
 8000b64:	4b51      	ldr	r3, [pc, #324]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b51      	ldr	r3, [pc, #324]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000b6c:	5c9b      	ldrb	r3, [r3, r2]
 8000b6e:	2b61      	cmp	r3, #97	@ 0x61
 8000b70:	d10d      	bne.n	8000b8e <command_parser_fsm+0x6ca>
			status = CMD_PARSER_MA;
 8000b72:	4b50      	ldr	r3, [pc, #320]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000b74:	220c      	movs	r2, #12
 8000b76:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (unsigned char*)'N', 1, 1000);
 8000b78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	214e      	movs	r1, #78	@ 0x4e
 8000b80:	4852      	ldr	r0, [pc, #328]	@ (8000ccc <command_parser_fsm+0x808>)
 8000b82:	f004 f803 	bl	8004b8c <HAL_UART_Transmit>
			buffer_flag = 0;
 8000b86:	4b4d      	ldr	r3, [pc, #308]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
			break;
 8000b8c:	e124      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;

		status = CMD_PARSER_IDLE;
 8000b8e:	4b49      	ldr	r3, [pc, #292]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000b94:	4b49      	ldr	r3, [pc, #292]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
		break;
 8000b9a:	e11d      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_S:
		idx = process_idx % 30;
 8000b9c:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <command_parser_fsm+0x7fc>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b48      	ldr	r3, [pc, #288]	@ (8000cc4 <command_parser_fsm+0x800>)
 8000ba2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	1119      	asrs	r1, r3, #4
 8000baa:	17d3      	asrs	r3, r2, #31
 8000bac:	1ac9      	subs	r1, r1, r3
 8000bae:	460b      	mov	r3, r1
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	1a5b      	subs	r3, r3, r1
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	1ad1      	subs	r1, r2, r3
 8000bb8:	b2ca      	uxtb	r2, r1
 8000bba:	4b3c      	ldr	r3, [pc, #240]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000bbc:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b3a      	ldr	r3, [pc, #232]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000bc6:	5c9b      	ldrb	r3, [r3, r2]
 8000bc8:	2b21      	cmp	r3, #33	@ 0x21
 8000bca:	d106      	bne.n	8000bda <command_parser_fsm+0x716>
			status = CMD_PARSER_MARK;
 8000bcc:	4b39      	ldr	r3, [pc, #228]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
			break;
 8000bd8:	e0fe      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'e') {
 8000bda:	4b34      	ldr	r3, [pc, #208]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b33      	ldr	r3, [pc, #204]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000be2:	5c9b      	ldrb	r3, [r3, r2]
 8000be4:	2b65      	cmp	r3, #101	@ 0x65
 8000be6:	d106      	bne.n	8000bf6 <command_parser_fsm+0x732>
			status = CMD_PARSER_SE;
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000bea:	220f      	movs	r2, #15
 8000bec:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000bee:	4b33      	ldr	r3, [pc, #204]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
			break;
 8000bf4:	e0f0      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;

		status = CMD_PARSER_IDLE;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
		break;
 8000c02:	e0e9      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_MA:
		idx = process_idx % 30;
 8000c04:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc0 <command_parser_fsm+0x7fc>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc4 <command_parser_fsm+0x800>)
 8000c0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c0e:	4413      	add	r3, r2
 8000c10:	1119      	asrs	r1, r3, #4
 8000c12:	17d3      	asrs	r3, r2, #31
 8000c14:	1ac9      	subs	r1, r1, r3
 8000c16:	460b      	mov	r3, r1
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	1a5b      	subs	r3, r3, r1
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	1ad1      	subs	r1, r2, r3
 8000c20:	b2ca      	uxtb	r2, r1
 8000c22:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000c24:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000c26:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000c2e:	5c9b      	ldrb	r3, [r3, r2]
 8000c30:	2b21      	cmp	r3, #33	@ 0x21
 8000c32:	d106      	bne.n	8000c42 <command_parser_fsm+0x77e>
			status = CMD_PARSER_MARK;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000c3a:	4b20      	ldr	r3, [pc, #128]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
			break;
 8000c40:	e0ca      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == 'n') {
 8000c42:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000c4a:	5c9b      	ldrb	r3, [r3, r2]
 8000c4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c4e:	d106      	bne.n	8000c5e <command_parser_fsm+0x79a>
			status = CMD_PARSER_MAN;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000c52:	220d      	movs	r2, #13
 8000c54:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
			break;
 8000c5c:	e0bc      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;

		status = CMD_PARSER_IDLE;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000c64:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
		break;
 8000c6a:	e0b5      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_SE:
		idx = process_idx % 30;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <command_parser_fsm+0x7fc>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <command_parser_fsm+0x800>)
 8000c72:	fb83 1302 	smull	r1, r3, r3, r2
 8000c76:	4413      	add	r3, r2
 8000c78:	1119      	asrs	r1, r3, #4
 8000c7a:	17d3      	asrs	r3, r2, #31
 8000c7c:	1ac9      	subs	r1, r1, r3
 8000c7e:	460b      	mov	r3, r1
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	1a5b      	subs	r3, r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	1ad1      	subs	r1, r2, r3
 8000c88:	b2ca      	uxtb	r2, r1
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000c8c:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <command_parser_fsm+0x7e8>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <command_parser_fsm+0x7ec>)
 8000c96:	5c9b      	ldrb	r3, [r3, r2]
 8000c98:	2b21      	cmp	r3, #33	@ 0x21
 8000c9a:	d119      	bne.n	8000cd0 <command_parser_fsm+0x80c>
			status = CMD_PARSER_MARK;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <command_parser_fsm+0x7f0>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000ca2:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <command_parser_fsm+0x7f8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
			break;
 8000ca8:	e096      	b.n	8000dd8 <command_parser_fsm+0x914>
 8000caa:	bf00      	nop
 8000cac:	20000156 	.word	0x20000156
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	2000015b 	.word	0x2000015b
 8000cbc:	20000157 	.word	0x20000157
 8000cc0:	20000160 	.word	0x20000160
 8000cc4:	88888889 	.word	0x88888889
 8000cc8:	2000015c 	.word	0x2000015c
 8000ccc:	2000022c 	.word	0x2000022c
		}
		;
		if (buffer[idx] == 't') {
 8000cd0:	4b48      	ldr	r3, [pc, #288]	@ (8000df4 <command_parser_fsm+0x930>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b48      	ldr	r3, [pc, #288]	@ (8000df8 <command_parser_fsm+0x934>)
 8000cd8:	5c9b      	ldrb	r3, [r3, r2]
 8000cda:	2b74      	cmp	r3, #116	@ 0x74
 8000cdc:	d106      	bne.n	8000cec <command_parser_fsm+0x828>
			status = CMD_PARSER_SET;
 8000cde:	4b47      	ldr	r3, [pc, #284]	@ (8000dfc <command_parser_fsm+0x938>)
 8000ce0:	2210      	movs	r2, #16
 8000ce2:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000ce4:	4b46      	ldr	r3, [pc, #280]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
			break;
 8000cea:	e075      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;

		status = CMD_PARSER_IDLE;
 8000cec:	4b43      	ldr	r3, [pc, #268]	@ (8000dfc <command_parser_fsm+0x938>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000cf2:	4b43      	ldr	r3, [pc, #268]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
		break;
 8000cf8:	e06e      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_MAN:
		idx = process_idx % 30;
 8000cfa:	4b42      	ldr	r3, [pc, #264]	@ (8000e04 <command_parser_fsm+0x940>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b42      	ldr	r3, [pc, #264]	@ (8000e08 <command_parser_fsm+0x944>)
 8000d00:	fb83 1302 	smull	r1, r3, r3, r2
 8000d04:	4413      	add	r3, r2
 8000d06:	1119      	asrs	r1, r3, #4
 8000d08:	17d3      	asrs	r3, r2, #31
 8000d0a:	1ac9      	subs	r1, r1, r3
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	1ad1      	subs	r1, r2, r3
 8000d16:	b2ca      	uxtb	r2, r1
 8000d18:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <command_parser_fsm+0x930>)
 8000d1a:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000d1c:	4b35      	ldr	r3, [pc, #212]	@ (8000df4 <command_parser_fsm+0x930>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b35      	ldr	r3, [pc, #212]	@ (8000df8 <command_parser_fsm+0x934>)
 8000d24:	5c9b      	ldrb	r3, [r3, r2]
 8000d26:	2b21      	cmp	r3, #33	@ 0x21
 8000d28:	d106      	bne.n	8000d38 <command_parser_fsm+0x874>
			status = CMD_PARSER_MARK;
 8000d2a:	4b34      	ldr	r3, [pc, #208]	@ (8000dfc <command_parser_fsm+0x938>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000d30:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
			break;
 8000d36:	e04f      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == '#') {
 8000d38:	4b2e      	ldr	r3, [pc, #184]	@ (8000df4 <command_parser_fsm+0x930>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000df8 <command_parser_fsm+0x934>)
 8000d40:	5c9b      	ldrb	r3, [r3, r2]
 8000d42:	2b23      	cmp	r3, #35	@ 0x23
 8000d44:	d109      	bne.n	8000d5a <command_parser_fsm+0x896>
			status = CMD_PARSER_IDLE;
 8000d46:	4b2d      	ldr	r3, [pc, #180]	@ (8000dfc <command_parser_fsm+0x938>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			man_flag = 1;
 8000d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <command_parser_fsm+0x948>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	701a      	strb	r2, [r3, #0]
			break;
 8000d58:	e03e      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	@ (8000dfc <command_parser_fsm+0x938>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000d60:	4b27      	ldr	r3, [pc, #156]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
		break;
 8000d66:	e037      	b.n	8000dd8 <command_parser_fsm+0x914>
	case CMD_PARSER_SET:
		idx = process_idx % 30;
 8000d68:	4b26      	ldr	r3, [pc, #152]	@ (8000e04 <command_parser_fsm+0x940>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b26      	ldr	r3, [pc, #152]	@ (8000e08 <command_parser_fsm+0x944>)
 8000d6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000d72:	4413      	add	r3, r2
 8000d74:	1119      	asrs	r1, r3, #4
 8000d76:	17d3      	asrs	r3, r2, #31
 8000d78:	1ac9      	subs	r1, r1, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	1a5b      	subs	r3, r3, r1
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	1ad1      	subs	r1, r2, r3
 8000d84:	b2ca      	uxtb	r2, r1
 8000d86:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <command_parser_fsm+0x930>)
 8000d88:	701a      	strb	r2, [r3, #0]
		if (buffer[idx] == '!') {
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <command_parser_fsm+0x930>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <command_parser_fsm+0x934>)
 8000d92:	5c9b      	ldrb	r3, [r3, r2]
 8000d94:	2b21      	cmp	r3, #33	@ 0x21
 8000d96:	d106      	bne.n	8000da6 <command_parser_fsm+0x8e2>
			status = CMD_PARSER_MARK;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <command_parser_fsm+0x938>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
			buffer_flag = 0;
 8000d9e:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
			break;
 8000da4:	e018      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		if (buffer[idx] == '#') {
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <command_parser_fsm+0x930>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <command_parser_fsm+0x934>)
 8000dae:	5c9b      	ldrb	r3, [r3, r2]
 8000db0:	2b23      	cmp	r3, #35	@ 0x23
 8000db2:	d109      	bne.n	8000dc8 <command_parser_fsm+0x904>
			status = CMD_PARSER_IDLE;
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <command_parser_fsm+0x938>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
			// do something like set flag, timer 3s ...
			set_flag = 1;
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <command_parser_fsm+0x94c>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	701a      	strb	r2, [r3, #0]
			buffer_flag = 0;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
			break;
 8000dc6:	e007      	b.n	8000dd8 <command_parser_fsm+0x914>
		}
		;
		status = CMD_PARSER_IDLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <command_parser_fsm+0x938>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
		buffer_flag = 0;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <command_parser_fsm+0x93c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	701a      	strb	r2, [r3, #0]
		break;
 8000dd4:	e000      	b.n	8000dd8 <command_parser_fsm+0x914>
//	case STATE_SHARP:
//		status = IDLE;
//		break;
	default:
		break;
 8000dd6:	bf00      	nop
	};
	if(process_idx >= index_buffer){
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e14 <command_parser_fsm+0x950>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <command_parser_fsm+0x940>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	dd04      	ble.n	8000df0 <command_parser_fsm+0x92c>

		}else{
			process_idx += 1;
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <command_parser_fsm+0x940>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <command_parser_fsm+0x940>)
 8000dee:	6013      	str	r3, [r2, #0]
		};
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000156 	.word	0x20000156
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004
 8000e00:	20000157 	.word	0x20000157
 8000e04:	20000160 	.word	0x20000160
 8000e08:	88888889 	.word	0x88888889
 8000e0c:	2000015e 	.word	0x2000015e
 8000e10:	2000015d 	.word	0x2000015d
 8000e14:	20000155 	.word	0x20000155

08000e18 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <HAL_UART_RxCpltCallback+0x54>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d11c      	bne.n	8000e64 <HAL_UART_RxCpltCallback+0x4c>
		buffer[index_buffer++%30] = temp;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <HAL_UART_RxCpltCallback+0x58>)
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	1c53      	adds	r3, r2, #1
 8000e30:	b2d9      	uxtb	r1, r3
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_UART_RxCpltCallback+0x58>)
 8000e34:	7019      	strb	r1, [r3, #0]
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_UART_RxCpltCallback+0x5c>)
 8000e38:	fba3 1302 	umull	r1, r3, r3, r2
 8000e3c:	0919      	lsrs	r1, r3, #4
 8000e3e:	460b      	mov	r3, r1
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	1a5b      	subs	r3, r3, r1
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_UART_RxCpltCallback+0x60>)
 8000e4e:	7819      	ldrb	r1, [r3, #0]
 8000e50:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_UART_RxCpltCallback+0x64>)
 8000e52:	5499      	strb	r1, [r3, r2]

		buffer_flag = 1;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <HAL_UART_RxCpltCallback+0x68>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &temp, 1);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	4906      	ldr	r1, [pc, #24]	@ (8000e78 <HAL_UART_RxCpltCallback+0x60>)
 8000e5e:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <HAL_UART_RxCpltCallback+0x6c>)
 8000e60:	f003 ff1f 	bl	8004ca2 <HAL_UART_Receive_IT>
	};
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40004800 	.word	0x40004800
 8000e70:	20000155 	.word	0x20000155
 8000e74:	88888889 	.word	0x88888889
 8000e78:	20000154 	.word	0x20000154
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000157 	.word	0x20000157
 8000e84:	2000022c 	.word	0x2000022c

08000e88 <fsm_autorun>:
 *      Author: ADMIN
 */
#include "global.h"
#include "fsm_autorun.h"
int status_fsm = INIT;
void fsm_autorun(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	if(button_flag[0] && status_fsm < INIT){
 8000e8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001048 <fsm_autorun+0x1c0>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00d      	beq.n	8000eb0 <fsm_autorun+0x28>
 8000e94:	4b6d      	ldr	r3, [pc, #436]	@ (800104c <fsm_autorun+0x1c4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	dc09      	bgt.n	8000eb0 <fsm_autorun+0x28>
			status_fsm += 5;
 8000e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800104c <fsm_autorun+0x1c4>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3305      	adds	r3, #5
 8000ea2:	4a6a      	ldr	r2, [pc, #424]	@ (800104c <fsm_autorun+0x1c4>)
 8000ea4:	6013      	str	r3, [r2, #0]
			button_flag[0] = 0;
 8000ea6:	4b68      	ldr	r3, [pc, #416]	@ (8001048 <fsm_autorun+0x1c0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 8000eac:	f000 fb53 	bl	8001556 <lcd_clear_display>
	}
	switch(status_fsm){
 8000eb0:	4b66      	ldr	r3, [pc, #408]	@ (800104c <fsm_autorun+0x1c4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	f200 80bb 	bhi.w	8001030 <fsm_autorun+0x1a8>
 8000eba:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec0 <fsm_autorun+0x38>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f0f 	.word	0x08000f0f
 8000ec4:	08000f4b 	.word	0x08000f4b
 8000ec8:	08000ff7 	.word	0x08000ff7
 8000ecc:	08000fa1 	.word	0x08000fa1
 8000ed0:	08000ed5 	.word	0x08000ed5
	case INIT:
		status_fsm = RED_GREEN;
 8000ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800104c <fsm_autorun+0x1c4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
		setTimer(1, 1000*red_time);
 8000eda:	4b5d      	ldr	r3, [pc, #372]	@ (8001050 <fsm_autorun+0x1c8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 fccf 	bl	800288c <setTimer>
		setTimer(2, 1000*green_time);
 8000eee:	4b59      	ldr	r3, [pc, #356]	@ (8001054 <fsm_autorun+0x1cc>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	2002      	movs	r0, #2
 8000efe:	f001 fcc5 	bl	800288c <setTimer>
		setTimer(3, 1000);
 8000f02:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f06:	2003      	movs	r0, #3
 8000f08:	f001 fcc0 	bl	800288c <setTimer>
		break;
 8000f0c:	e099      	b.n	8001042 <fsm_autorun+0x1ba>
	case RED_GREEN:
		led_red_and_green();
 8000f0e:	f000 fed9 	bl	8001cc4 <led_red_and_green>
		if(flag_timer[2] == 1){
 8000f12:	4b51      	ldr	r3, [pc, #324]	@ (8001058 <fsm_autorun+0x1d0>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	f040 808c 	bne.w	8001034 <fsm_autorun+0x1ac>
			status_fsm = RED_YELLOW;
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <fsm_autorun+0x1c4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	601a      	str	r2, [r3, #0]
			setTimer(2, 1000*yellow_time);
 8000f22:	4b4e      	ldr	r3, [pc, #312]	@ (800105c <fsm_autorun+0x1d4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f2a:	fb02 f303 	mul.w	r3, r2, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	2002      	movs	r0, #2
 8000f32:	f001 fcab 	bl	800288c <setTimer>

			lcd_yellow_time = yellow_time;
 8000f36:	4b49      	ldr	r3, [pc, #292]	@ (800105c <fsm_autorun+0x1d4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a49      	ldr	r2, [pc, #292]	@ (8001060 <fsm_autorun+0x1d8>)
 8000f3c:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000f3e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f42:	2003      	movs	r0, #3
 8000f44:	f001 fca2 	bl	800288c <setTimer>
		}
		break;
 8000f48:	e074      	b.n	8001034 <fsm_autorun+0x1ac>
	case RED_YELLOW:
		led_red_and_yellow();
 8000f4a:	f000 fe85 	bl	8001c58 <led_red_and_yellow>
		if(flag_timer[2] == 1){
 8000f4e:	4b42      	ldr	r3, [pc, #264]	@ (8001058 <fsm_autorun+0x1d0>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d170      	bne.n	8001038 <fsm_autorun+0x1b0>
			status_fsm = GREEN_RED;
 8000f56:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <fsm_autorun+0x1c4>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*green_time);
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <fsm_autorun+0x1cc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f64:	fb02 f303 	mul.w	r3, r2, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f001 fc8e 	bl	800288c <setTimer>
			setTimer(2, 1000*red_time);
 8000f70:	4b37      	ldr	r3, [pc, #220]	@ (8001050 <fsm_autorun+0x1c8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f78:	fb02 f303 	mul.w	r3, r2, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f001 fc84 	bl	800288c <setTimer>

			lcd_green_time = green_time;
 8000f84:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <fsm_autorun+0x1cc>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a36      	ldr	r2, [pc, #216]	@ (8001064 <fsm_autorun+0x1dc>)
 8000f8a:	6013      	str	r3, [r2, #0]
			lcd_red_time = red_time;
 8000f8c:	4b30      	ldr	r3, [pc, #192]	@ (8001050 <fsm_autorun+0x1c8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a35      	ldr	r2, [pc, #212]	@ (8001068 <fsm_autorun+0x1e0>)
 8000f92:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000f94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f001 fc77 	bl	800288c <setTimer>
		}
		break;
 8000f9e:	e04b      	b.n	8001038 <fsm_autorun+0x1b0>
	case YELLOW_RED:
		led_yellow_and_red();
 8000fa0:	f000 fec6 	bl	8001d30 <led_yellow_and_red>
		if(flag_timer[1] ==1){
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <fsm_autorun+0x1d0>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d147      	bne.n	800103c <fsm_autorun+0x1b4>
			status_fsm = RED_GREEN;
 8000fac:	4b27      	ldr	r3, [pc, #156]	@ (800104c <fsm_autorun+0x1c4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*red_time);
 8000fb2:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <fsm_autorun+0x1c8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f001 fc63 	bl	800288c <setTimer>
			setTimer(2,1000*green_time);
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <fsm_autorun+0x1cc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f001 fc59 	bl	800288c <setTimer>

			lcd_red_time = red_time;
 8000fda:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <fsm_autorun+0x1c8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a22      	ldr	r2, [pc, #136]	@ (8001068 <fsm_autorun+0x1e0>)
 8000fe0:	6013      	str	r3, [r2, #0]
			lcd_green_time = green_time;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <fsm_autorun+0x1cc>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8001064 <fsm_autorun+0x1dc>)
 8000fe8:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000fea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fee:	2003      	movs	r0, #3
 8000ff0:	f001 fc4c 	bl	800288c <setTimer>
		}
		break;
 8000ff4:	e022      	b.n	800103c <fsm_autorun+0x1b4>
	case GREEN_RED:
		led_green_and_red();
 8000ff6:	f000 fed1 	bl	8001d9c <led_green_and_red>
		if(flag_timer[1] == 1){
 8000ffa:	4b17      	ldr	r3, [pc, #92]	@ (8001058 <fsm_autorun+0x1d0>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d11e      	bne.n	8001040 <fsm_autorun+0x1b8>
			status_fsm = YELLOW_RED;
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <fsm_autorun+0x1c4>)
 8001004:	2203      	movs	r2, #3
 8001006:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*yellow_time);
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <fsm_autorun+0x1d4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001010:	fb02 f303 	mul.w	r3, r2, r3
 8001014:	4619      	mov	r1, r3
 8001016:	2001      	movs	r0, #1
 8001018:	f001 fc38 	bl	800288c <setTimer>

			lcd_yellow_time = yellow_time;
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <fsm_autorun+0x1d4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <fsm_autorun+0x1d8>)
 8001022:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8001024:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001028:	2003      	movs	r0, #3
 800102a:	f001 fc2f 	bl	800288c <setTimer>
		}
		break;
 800102e:	e007      	b.n	8001040 <fsm_autorun+0x1b8>
	default:
		break;
 8001030:	bf00      	nop
 8001032:	e006      	b.n	8001042 <fsm_autorun+0x1ba>
		break;
 8001034:	bf00      	nop
 8001036:	e004      	b.n	8001042 <fsm_autorun+0x1ba>
		break;
 8001038:	bf00      	nop
 800103a:	e002      	b.n	8001042 <fsm_autorun+0x1ba>
		break;
 800103c:	bf00      	nop
 800103e:	e000      	b.n	8001042 <fsm_autorun+0x1ba>
		break;
 8001040:	bf00      	nop
	}
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000104 	.word	0x20000104
 800104c:	20000028 	.word	0x20000028
 8001050:	20000030 	.word	0x20000030
 8001054:	20000038 	.word	0x20000038
 8001058:	200002a0 	.word	0x200002a0
 800105c:	20000034 	.word	0x20000034
 8001060:	2000017c 	.word	0x2000017c
 8001064:	20000178 	.word	0x20000178
 8001068:	20000174 	.word	0x20000174

0800106c <fsm_manual>:
 *  Created on: Nov 1, 2024
 *      Author: ADMIN
 */
#include "global.h"
#include "fsm_manual.h"
void fsm_manual(){
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	if((button_flag[0]==1) && (status_fsm >= RED_GREEN_MANUAL) && (status_fsm <= YELLOW_RED_MANUAL)){
 8001070:	4b2f      	ldr	r3, [pc, #188]	@ (8001130 <fsm_manual+0xc4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d10f      	bne.n	8001098 <fsm_manual+0x2c>
 8001078:	4b2e      	ldr	r3, [pc, #184]	@ (8001134 <fsm_manual+0xc8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	dd0b      	ble.n	8001098 <fsm_manual+0x2c>
 8001080:	4b2c      	ldr	r3, [pc, #176]	@ (8001134 <fsm_manual+0xc8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b08      	cmp	r3, #8
 8001086:	dc07      	bgt.n	8001098 <fsm_manual+0x2c>
		status_fsm = INIT_SETTING;
 8001088:	4b2a      	ldr	r3, [pc, #168]	@ (8001134 <fsm_manual+0xc8>)
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
		button_flag[0] = 0;
 800108e:	4b28      	ldr	r3, [pc, #160]	@ (8001130 <fsm_manual+0xc4>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
		lcd_clear_display();
 8001094:	f000 fa5f 	bl	8001556 <lcd_clear_display>
	}
	switch(status_fsm){
 8001098:	4b26      	ldr	r3, [pc, #152]	@ (8001134 <fsm_manual+0xc8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b05      	subs	r3, #5
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d83a      	bhi.n	8001118 <fsm_manual+0xac>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <fsm_manual+0x3c>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	080010b9 	.word	0x080010b9
 80010ac:	080010d1 	.word	0x080010d1
 80010b0:	080010e9 	.word	0x080010e9
 80010b4:	08001101 	.word	0x08001101
	case RED_GREEN_MANUAL:
		led_red_and_green();
 80010b8:	f000 fe04 	bl	8001cc4 <led_red_and_green>
		if(isButtonPressed(1)){
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff f845 	bl	800014c <isButtonPressed>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d029      	beq.n	800111c <fsm_manual+0xb0>
			status_fsm = RED_YELLOW_MANUAL;
 80010c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <fsm_manual+0xc8>)
 80010ca:	2206      	movs	r2, #6
 80010cc:	601a      	str	r2, [r3, #0]
		}
		break;
 80010ce:	e025      	b.n	800111c <fsm_manual+0xb0>
	case RED_YELLOW_MANUAL:
		led_red_and_yellow();
 80010d0:	f000 fdc2 	bl	8001c58 <led_red_and_yellow>
		if(isButtonPressed(1)){
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff f839 	bl	800014c <isButtonPressed>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d01f      	beq.n	8001120 <fsm_manual+0xb4>
			status_fsm = GREEN_RED_MANUAL;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <fsm_manual+0xc8>)
 80010e2:	2207      	movs	r2, #7
 80010e4:	601a      	str	r2, [r3, #0]
		}
		break;
 80010e6:	e01b      	b.n	8001120 <fsm_manual+0xb4>
	case GREEN_RED_MANUAL:
		led_green_and_red();
 80010e8:	f000 fe58 	bl	8001d9c <led_green_and_red>
		if(isButtonPressed(1)){
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff f82d 	bl	800014c <isButtonPressed>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d015      	beq.n	8001124 <fsm_manual+0xb8>
			status_fsm = YELLOW_RED_MANUAL;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <fsm_manual+0xc8>)
 80010fa:	2208      	movs	r2, #8
 80010fc:	601a      	str	r2, [r3, #0]
		}
		break;
 80010fe:	e011      	b.n	8001124 <fsm_manual+0xb8>
	case YELLOW_RED_MANUAL:
		led_yellow_and_red();
 8001100:	f000 fe16 	bl	8001d30 <led_yellow_and_red>
		if(isButtonPressed(1)){
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff f821 	bl	800014c <isButtonPressed>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d00b      	beq.n	8001128 <fsm_manual+0xbc>
			status_fsm = RED_GREEN_MANUAL;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <fsm_manual+0xc8>)
 8001112:	2205      	movs	r2, #5
 8001114:	601a      	str	r2, [r3, #0]
		}
		break;
 8001116:	e007      	b.n	8001128 <fsm_manual+0xbc>
	default:
		break;
 8001118:	bf00      	nop
 800111a:	e006      	b.n	800112a <fsm_manual+0xbe>
		break;
 800111c:	bf00      	nop
 800111e:	e004      	b.n	800112a <fsm_manual+0xbe>
		break;
 8001120:	bf00      	nop
 8001122:	e002      	b.n	800112a <fsm_manual+0xbe>
		break;
 8001124:	bf00      	nop
 8001126:	e000      	b.n	800112a <fsm_manual+0xbe>
		break;
 8001128:	bf00      	nop
	}
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000104 	.word	0x20000104
 8001134:	20000028 	.word	0x20000028

08001138 <fsm_setting>:
#include "global.h"
int status_ld = 1;
int red_time_increase = 0;
int green_time_increase = 0;
int yellow_time_increase = 0;
void fsm_setting(){
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	switch(status_fsm){
 800113c:	4ba7      	ldr	r3, [pc, #668]	@ (80013dc <fsm_setting+0x2a4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2bc9      	cmp	r3, #201	@ 0xc9
 8001142:	f000 8140 	beq.w	80013c6 <fsm_setting+0x28e>
 8001146:	2bc9      	cmp	r3, #201	@ 0xc9
 8001148:	f300 813f 	bgt.w	80013ca <fsm_setting+0x292>
 800114c:	2b0c      	cmp	r3, #12
 800114e:	dc11      	bgt.n	8001174 <fsm_setting+0x3c>
 8001150:	2b09      	cmp	r3, #9
 8001152:	f2c0 813a 	blt.w	80013ca <fsm_setting+0x292>
 8001156:	3b09      	subs	r3, #9
 8001158:	2b03      	cmp	r3, #3
 800115a:	f200 8136 	bhi.w	80013ca <fsm_setting+0x292>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <fsm_setting+0x2c>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	080011b7 	.word	0x080011b7
 8001168:	080012f5 	.word	0x080012f5
 800116c:	08001259 	.word	0x08001259
 8001170:	0800117d 	.word	0x0800117d
 8001174:	2bc8      	cmp	r3, #200	@ 0xc8
 8001176:	f000 8108 	beq.w	800138a <fsm_setting+0x252>
		break;
	case REMOTE_SETTING:

		break;
	default:
		break;
 800117a:	e126      	b.n	80013ca <fsm_setting+0x292>
		red_time_increase = 0;
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <fsm_setting+0x2a8>)
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
		green_time_increase = 0;
 8001182:	4b98      	ldr	r3, [pc, #608]	@ (80013e4 <fsm_setting+0x2ac>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
		yellow_time_increase = 0;
 8001188:	4b97      	ldr	r3, [pc, #604]	@ (80013e8 <fsm_setting+0x2b0>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
		status_fsm = RED_SETTING;
 800118e:	4b93      	ldr	r3, [pc, #588]	@ (80013dc <fsm_setting+0x2a4>)
 8001190:	2209      	movs	r2, #9
 8001192:	601a      	str	r2, [r3, #0]
		setTimer(4,500);
 8001194:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001198:	2004      	movs	r0, #4
 800119a:	f001 fb77 	bl	800288c <setTimer>
		all_led_red_off();
 800119e:	f000 fe69 	bl	8001e74 <all_led_red_off>
		all_led_red_on();
 80011a2:	f000 fe31 	bl	8001e08 <all_led_red_on>
		lcd_goto_XY(1, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2001      	movs	r0, #1
 80011aa:	f000 f9db 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("    SETTING    ");
 80011ae:	488f      	ldr	r0, [pc, #572]	@ (80013ec <fsm_setting+0x2b4>)
 80011b0:	f000 f9bc 	bl	800152c <lcd_send_string>
		break;
 80011b4:	e110      	b.n	80013d8 <fsm_setting+0x2a0>
		if(isButtonPressed(0)){
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7fe ffc8 	bl	800014c <isButtonPressed>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <fsm_setting+0x9e>
			status_fsm = GREEN_SETTING;
 80011c2:	4b86      	ldr	r3, [pc, #536]	@ (80013dc <fsm_setting+0x2a4>)
 80011c4:	220b      	movs	r2, #11
 80011c6:	601a      	str	r2, [r3, #0]
			all_led_red_off();
 80011c8:	f000 fe54 	bl	8001e74 <all_led_red_off>
			all_led_green_on();
 80011cc:	f000 fe88 	bl	8001ee0 <all_led_green_on>
			status_ld = 1;
 80011d0:	4b87      	ldr	r3, [pc, #540]	@ (80013f0 <fsm_setting+0x2b8>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)){
 80011d6:	2001      	movs	r0, #1
 80011d8:	f7fe ffb8 	bl	800014c <isButtonPressed>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d010      	beq.n	8001204 <fsm_setting+0xcc>
			red_time_increase++;
 80011e2:	4b7f      	ldr	r3, [pc, #508]	@ (80013e0 <fsm_setting+0x2a8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	3301      	adds	r3, #1
 80011e8:	4a7d      	ldr	r2, [pc, #500]	@ (80013e0 <fsm_setting+0x2a8>)
 80011ea:	6013      	str	r3, [r2, #0]
			if(red_time_increase + red_time > 99) {
 80011ec:	4b7c      	ldr	r3, [pc, #496]	@ (80013e0 <fsm_setting+0x2a8>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b80      	ldr	r3, [pc, #512]	@ (80013f4 <fsm_setting+0x2bc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	2b63      	cmp	r3, #99	@ 0x63
 80011f8:	dd04      	ble.n	8001204 <fsm_setting+0xcc>
				red_time_increase = 0 - red_time;
 80011fa:	4b7e      	ldr	r3, [pc, #504]	@ (80013f4 <fsm_setting+0x2bc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	425b      	negs	r3, r3
 8001200:	4a77      	ldr	r2, [pc, #476]	@ (80013e0 <fsm_setting+0x2a8>)
 8001202:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(2)){
 8001204:	2002      	movs	r0, #2
 8001206:	f7fe ffa1 	bl	800014c <isButtonPressed>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d009      	beq.n	8001224 <fsm_setting+0xec>
			red_time += red_time_increase;
 8001210:	4b78      	ldr	r3, [pc, #480]	@ (80013f4 <fsm_setting+0x2bc>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b72      	ldr	r3, [pc, #456]	@ (80013e0 <fsm_setting+0x2a8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4413      	add	r3, r2
 800121a:	4a76      	ldr	r2, [pc, #472]	@ (80013f4 <fsm_setting+0x2bc>)
 800121c:	6013      	str	r3, [r2, #0]
			red_time_increase = 0;
 800121e:	4b70      	ldr	r3, [pc, #448]	@ (80013e0 <fsm_setting+0x2a8>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
		if(flag_timer[4] == 1){
 8001224:	4b74      	ldr	r3, [pc, #464]	@ (80013f8 <fsm_setting+0x2c0>)
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 80d0 	bne.w	80013ce <fsm_setting+0x296>
			if(status_ld == 1){
 800122e:	4b70      	ldr	r3, [pc, #448]	@ (80013f0 <fsm_setting+0x2b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d105      	bne.n	8001242 <fsm_setting+0x10a>
				all_led_red_off();
 8001236:	f000 fe1d 	bl	8001e74 <all_led_red_off>
				status_ld = 0;
 800123a:	4b6d      	ldr	r3, [pc, #436]	@ (80013f0 <fsm_setting+0x2b8>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e004      	b.n	800124c <fsm_setting+0x114>
				all_led_red_on();
 8001242:	f000 fde1 	bl	8001e08 <all_led_red_on>
				status_ld = 1;
 8001246:	4b6a      	ldr	r3, [pc, #424]	@ (80013f0 <fsm_setting+0x2b8>)
 8001248:	2201      	movs	r2, #1
 800124a:	601a      	str	r2, [r3, #0]
			setTimer(4,500);
 800124c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001250:	2004      	movs	r0, #4
 8001252:	f001 fb1b 	bl	800288c <setTimer>
		break;
 8001256:	e0ba      	b.n	80013ce <fsm_setting+0x296>
		if(isButtonPressed(0)){
 8001258:	2000      	movs	r0, #0
 800125a:	f7fe ff77 	bl	800014c <isButtonPressed>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <fsm_setting+0x13a>
			status_fsm = YELLOW_SETTING;
 8001264:	4b5d      	ldr	r3, [pc, #372]	@ (80013dc <fsm_setting+0x2a4>)
 8001266:	220a      	movs	r2, #10
 8001268:	601a      	str	r2, [r3, #0]
			all_led_red_off();
 800126a:	f000 fe03 	bl	8001e74 <all_led_red_off>
			all_led_yellow_on();
 800126e:	f000 fe6d 	bl	8001f4c <all_led_yellow_on>
		if(isButtonPressed(1)){
 8001272:	2001      	movs	r0, #1
 8001274:	f7fe ff6a 	bl	800014c <isButtonPressed>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d010      	beq.n	80012a0 <fsm_setting+0x168>
			green_time_increase++;
 800127e:	4b59      	ldr	r3, [pc, #356]	@ (80013e4 <fsm_setting+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a57      	ldr	r2, [pc, #348]	@ (80013e4 <fsm_setting+0x2ac>)
 8001286:	6013      	str	r3, [r2, #0]
			if(green_time_increase + green_time > 99) {
 8001288:	4b56      	ldr	r3, [pc, #344]	@ (80013e4 <fsm_setting+0x2ac>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b5b      	ldr	r3, [pc, #364]	@ (80013fc <fsm_setting+0x2c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4413      	add	r3, r2
 8001292:	2b63      	cmp	r3, #99	@ 0x63
 8001294:	dd04      	ble.n	80012a0 <fsm_setting+0x168>
				green_time_increase = 0 - green_time;
 8001296:	4b59      	ldr	r3, [pc, #356]	@ (80013fc <fsm_setting+0x2c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	425b      	negs	r3, r3
 800129c:	4a51      	ldr	r2, [pc, #324]	@ (80013e4 <fsm_setting+0x2ac>)
 800129e:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(2)){
 80012a0:	2002      	movs	r0, #2
 80012a2:	f7fe ff53 	bl	800014c <isButtonPressed>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d009      	beq.n	80012c0 <fsm_setting+0x188>
			green_time += green_time_increase;
 80012ac:	4b53      	ldr	r3, [pc, #332]	@ (80013fc <fsm_setting+0x2c4>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b4c      	ldr	r3, [pc, #304]	@ (80013e4 <fsm_setting+0x2ac>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a51      	ldr	r2, [pc, #324]	@ (80013fc <fsm_setting+0x2c4>)
 80012b8:	6013      	str	r3, [r2, #0]
			green_time_increase = 0;
 80012ba:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <fsm_setting+0x2ac>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
		if(flag_timer[4] == 1){
 80012c0:	4b4d      	ldr	r3, [pc, #308]	@ (80013f8 <fsm_setting+0x2c0>)
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 8084 	bne.w	80013d2 <fsm_setting+0x29a>
			if(status_ld == 1){
 80012ca:	4b49      	ldr	r3, [pc, #292]	@ (80013f0 <fsm_setting+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d105      	bne.n	80012de <fsm_setting+0x1a6>
				all_led_red_off();
 80012d2:	f000 fdcf 	bl	8001e74 <all_led_red_off>
				status_ld = 0;
 80012d6:	4b46      	ldr	r3, [pc, #280]	@ (80013f0 <fsm_setting+0x2b8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e004      	b.n	80012e8 <fsm_setting+0x1b0>
				all_led_green_on();
 80012de:	f000 fdff 	bl	8001ee0 <all_led_green_on>
				status_ld = 1;
 80012e2:	4b43      	ldr	r3, [pc, #268]	@ (80013f0 <fsm_setting+0x2b8>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
			setTimer(4,500);
 80012e8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80012ec:	2004      	movs	r0, #4
 80012ee:	f001 facd 	bl	800288c <setTimer>
		break;
 80012f2:	e06e      	b.n	80013d2 <fsm_setting+0x29a>
		if(isButtonPressed(0)){
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7fe ff29 	bl	800014c <isButtonPressed>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d004      	beq.n	800130a <fsm_setting+0x1d2>
			all_led_red_off();
 8001300:	f000 fdb8 	bl	8001e74 <all_led_red_off>
			status_fsm = INIT;
 8001304:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <fsm_setting+0x2a4>)
 8001306:	2204      	movs	r2, #4
 8001308:	601a      	str	r2, [r3, #0]
		if(isButtonPressed(1)){
 800130a:	2001      	movs	r0, #1
 800130c:	f7fe ff1e 	bl	800014c <isButtonPressed>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d010      	beq.n	8001338 <fsm_setting+0x200>
			yellow_time_increase++;
 8001316:	4b34      	ldr	r3, [pc, #208]	@ (80013e8 <fsm_setting+0x2b0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a32      	ldr	r2, [pc, #200]	@ (80013e8 <fsm_setting+0x2b0>)
 800131e:	6013      	str	r3, [r2, #0]
			if(yellow_time_increase + yellow_time > 99) {
 8001320:	4b31      	ldr	r3, [pc, #196]	@ (80013e8 <fsm_setting+0x2b0>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <fsm_setting+0x2c8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4413      	add	r3, r2
 800132a:	2b63      	cmp	r3, #99	@ 0x63
 800132c:	dd04      	ble.n	8001338 <fsm_setting+0x200>
				yellow_time_increase = 0 - yellow_time;
 800132e:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <fsm_setting+0x2c8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	425b      	negs	r3, r3
 8001334:	4a2c      	ldr	r2, [pc, #176]	@ (80013e8 <fsm_setting+0x2b0>)
 8001336:	6013      	str	r3, [r2, #0]
		if(isButtonPressed(2)){
 8001338:	2002      	movs	r0, #2
 800133a:	f7fe ff07 	bl	800014c <isButtonPressed>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d009      	beq.n	8001358 <fsm_setting+0x220>
			yellow_time += yellow_time_increase;
 8001344:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <fsm_setting+0x2c8>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <fsm_setting+0x2b0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4413      	add	r3, r2
 800134e:	4a2c      	ldr	r2, [pc, #176]	@ (8001400 <fsm_setting+0x2c8>)
 8001350:	6013      	str	r3, [r2, #0]
			yellow_time_increase = 0;
 8001352:	4b25      	ldr	r3, [pc, #148]	@ (80013e8 <fsm_setting+0x2b0>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
		if(flag_timer[4] == 1){
 8001358:	4b27      	ldr	r3, [pc, #156]	@ (80013f8 <fsm_setting+0x2c0>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d13a      	bne.n	80013d6 <fsm_setting+0x29e>
			if(status_ld == 1){
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <fsm_setting+0x2b8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d105      	bne.n	8001374 <fsm_setting+0x23c>
				all_led_red_off();
 8001368:	f000 fd84 	bl	8001e74 <all_led_red_off>
				status_ld = 0;
 800136c:	4b20      	ldr	r3, [pc, #128]	@ (80013f0 <fsm_setting+0x2b8>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	e004      	b.n	800137e <fsm_setting+0x246>
				all_led_yellow_on();
 8001374:	f000 fdea 	bl	8001f4c <all_led_yellow_on>
				status_ld = 1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <fsm_setting+0x2b8>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
			setTimer(4,500);
 800137e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001382:	2004      	movs	r0, #4
 8001384:	f001 fa82 	bl	800288c <setTimer>
		break;
 8001388:	e025      	b.n	80013d6 <fsm_setting+0x29e>
		lcd_clear_display();
 800138a:	f000 f8e4 	bl	8001556 <lcd_clear_display>
		HAL_Delay(5);
 800138e:	2005      	movs	r0, #5
 8001390:	f001 fb54 	bl	8002a3c <HAL_Delay>
		lcd_goto_XY(1,0);
 8001394:	2100      	movs	r1, #0
 8001396:	2001      	movs	r0, #1
 8001398:	f000 f8e4 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("RED=");
 800139c:	4819      	ldr	r0, [pc, #100]	@ (8001404 <fsm_setting+0x2cc>)
 800139e:	f000 f8c5 	bl	800152c <lcd_send_string>
		lcd_goto_XY(1,8);
 80013a2:	2108      	movs	r1, #8
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 f8dd 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("GREEN=");
 80013aa:	4817      	ldr	r0, [pc, #92]	@ (8001408 <fsm_setting+0x2d0>)
 80013ac:	f000 f8be 	bl	800152c <lcd_send_string>
		lcd_goto_XY(2,3);
 80013b0:	2103      	movs	r1, #3
 80013b2:	2002      	movs	r0, #2
 80013b4:	f000 f8d6 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("YELLOW=");
 80013b8:	4814      	ldr	r0, [pc, #80]	@ (800140c <fsm_setting+0x2d4>)
 80013ba:	f000 f8b7 	bl	800152c <lcd_send_string>
		status_fsm = REMOTE_SETTING;
 80013be:	4b07      	ldr	r3, [pc, #28]	@ (80013dc <fsm_setting+0x2a4>)
 80013c0:	22c9      	movs	r2, #201	@ 0xc9
 80013c2:	601a      	str	r2, [r3, #0]
		break;
 80013c4:	e008      	b.n	80013d8 <fsm_setting+0x2a0>
		break;
 80013c6:	bf00      	nop
 80013c8:	e006      	b.n	80013d8 <fsm_setting+0x2a0>
		break;
 80013ca:	bf00      	nop
 80013cc:	e004      	b.n	80013d8 <fsm_setting+0x2a0>
		break;
 80013ce:	bf00      	nop
 80013d0:	e002      	b.n	80013d8 <fsm_setting+0x2a0>
		break;
 80013d2:	bf00      	nop
 80013d4:	e000      	b.n	80013d8 <fsm_setting+0x2a0>
		break;
 80013d6:	bf00      	nop
	}
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000028 	.word	0x20000028
 80013e0:	20000168 	.word	0x20000168
 80013e4:	2000016c 	.word	0x2000016c
 80013e8:	20000170 	.word	0x20000170
 80013ec:	08006138 	.word	0x08006138
 80013f0:	2000002c 	.word	0x2000002c
 80013f4:	20000030 	.word	0x20000030
 80013f8:	200002a0 	.word	0x200002a0
 80013fc:	20000038 	.word	0x20000038
 8001400:	20000034 	.word	0x20000034
 8001404:	08006148 	.word	0x08006148
 8001408:	08006150 	.word	0x08006150
 800140c:	08006158 	.word	0x08006158

08001410 <lcd_send_cmd>:
//int lcd_red_time = 0;
//int lcd_green_time = 0;
//int lcd_yellow_time = 0;
char lcd_buf[16];
void lcd_send_cmd (char cmd)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af02      	add	r7, sp, #8
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd&0xf0);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f023 030f 	bic.w	r3, r3, #15
 8001420:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd<<4)&0xf0);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	011b      	lsls	r3, r3, #4
 8001426:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	f043 030c 	orr.w	r3, r3, #12
 800142e:	b2db      	uxtb	r3, r3
 8001430:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x08;  //en=0, rs=0
 8001432:	7bfb      	ldrb	r3, [r7, #15]
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	b2db      	uxtb	r3, r3
 800143a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0C;  //en=1, rs=0
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	f043 030c 	orr.w	r3, r3, #12
 8001442:	b2db      	uxtb	r3, r3
 8001444:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x08;  //en=0, rs=0
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001450:	f107 0208 	add.w	r2, r7, #8
 8001454:	2364      	movs	r3, #100	@ 0x64
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2304      	movs	r3, #4
 800145a:	2142      	movs	r1, #66	@ 0x42
 800145c:	4803      	ldr	r0, [pc, #12]	@ (800146c <lcd_send_cmd+0x5c>)
 800145e:	f001 ffeb 	bl	8003438 <HAL_I2C_Master_Transmit>
}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000190 	.word	0x20000190

08001470 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af02      	add	r7, sp, #8
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data&0xf0);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f023 030f 	bic.w	r3, r3, #15
 8001480:	73fb      	strb	r3, [r7, #15]
    data_l = ((data<<4)&0xf0);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	f043 030d 	orr.w	r3, r3, #13
 800148e:	b2db      	uxtb	r3, r3
 8001490:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x09;  //en=0, rs=0
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f043 0309 	orr.w	r3, r3, #9
 8001498:	b2db      	uxtb	r3, r3
 800149a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0D;  //en=1, rs=0
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	f043 030d 	orr.w	r3, r3, #13
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x09;  //en=0, rs=0
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	f043 0309 	orr.w	r3, r3, #9
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80014b0:	f107 0208 	add.w	r2, r7, #8
 80014b4:	2364      	movs	r3, #100	@ 0x64
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2304      	movs	r3, #4
 80014ba:	2142      	movs	r1, #66	@ 0x42
 80014bc:	4803      	ldr	r0, [pc, #12]	@ (80014cc <lcd_send_data+0x5c>)
 80014be:	f001 ffbb 	bl	8003438 <HAL_I2C_Master_Transmit>
}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000190 	.word	0x20000190

080014d0 <lcd_init>:

void lcd_init (void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    lcd_send_cmd (0x33); /* set 4-bits interface */
 80014d4:	2033      	movs	r0, #51	@ 0x33
 80014d6:	f7ff ff9b 	bl	8001410 <lcd_send_cmd>
    lcd_send_cmd (0x32);
 80014da:	2032      	movs	r0, #50	@ 0x32
 80014dc:	f7ff ff98 	bl	8001410 <lcd_send_cmd>
    HAL_Delay(50);
 80014e0:	2032      	movs	r0, #50	@ 0x32
 80014e2:	f001 faab 	bl	8002a3c <HAL_Delay>
    lcd_send_cmd (0x28); /* start to set LCD function */
 80014e6:	2028      	movs	r0, #40	@ 0x28
 80014e8:	f7ff ff92 	bl	8001410 <lcd_send_cmd>
    HAL_Delay(50);
 80014ec:	2032      	movs	r0, #50	@ 0x32
 80014ee:	f001 faa5 	bl	8002a3c <HAL_Delay>
    lcd_send_cmd (0x01); /* clear display */
 80014f2:	2001      	movs	r0, #1
 80014f4:	f7ff ff8c 	bl	8001410 <lcd_send_cmd>
    HAL_Delay(50);
 80014f8:	2032      	movs	r0, #50	@ 0x32
 80014fa:	f001 fa9f 	bl	8002a3c <HAL_Delay>
    lcd_send_cmd (0x06); /* set entry mode */
 80014fe:	2006      	movs	r0, #6
 8001500:	f7ff ff86 	bl	8001410 <lcd_send_cmd>
    HAL_Delay(50);
 8001504:	2032      	movs	r0, #50	@ 0x32
 8001506:	f001 fa99 	bl	8002a3c <HAL_Delay>
    lcd_send_cmd (0x0c); /* set display to on */
 800150a:	200c      	movs	r0, #12
 800150c:	f7ff ff80 	bl	8001410 <lcd_send_cmd>
    HAL_Delay(50);
 8001510:	2032      	movs	r0, #50	@ 0x32
 8001512:	f001 fa93 	bl	8002a3c <HAL_Delay>
    lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001516:	2002      	movs	r0, #2
 8001518:	f7ff ff7a 	bl	8001410 <lcd_send_cmd>
    HAL_Delay(50);
 800151c:	2032      	movs	r0, #50	@ 0x32
 800151e:	f001 fa8d 	bl	8002a3c <HAL_Delay>
    lcd_send_cmd (0x80);
 8001522:	2080      	movs	r0, #128	@ 0x80
 8001524:	f7ff ff74 	bl	8001410 <lcd_send_cmd>
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data (*str++);
 8001534:	e006      	b.n	8001544 <lcd_send_string+0x18>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff96 	bl	8001470 <lcd_send_data>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f4      	bne.n	8001536 <lcd_send_string+0xa>
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	af00      	add	r7, sp, #0
    lcd_send_cmd (0x01); //clear display
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff ff58 	bl	8001410 <lcd_send_cmd>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 1)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d108      	bne.n	8001586 <lcd_goto_XY+0x22>
    {
        pos_Addr = 0x80 + row - 1 + col;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b2db      	uxtb	r3, r3
 8001580:	337f      	adds	r3, #127	@ 0x7f
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e008      	b.n	8001598 <lcd_goto_XY+0x34>
    }
    else
    {
        pos_Addr = 0x80 | (0x40 + col);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3340      	adds	r3, #64	@ 0x40
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b25b      	sxtb	r3, r3
 8001590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001594:	b25b      	sxtb	r3, r3
 8001596:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(pos_Addr);
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff38 	bl	8001410 <lcd_send_cmd>
}
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <lcd_run>:
void lcd_run(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
	if(button_flag[0] && status_fsm < INIT){
 80015ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001818 <lcd_run+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d006      	beq.n	80015c2 <lcd_run+0x1a>
 80015b4:	4b99      	ldr	r3, [pc, #612]	@ (800181c <lcd_run+0x274>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	dc02      	bgt.n	80015c2 <lcd_run+0x1a>
				lcd_clear_display();
 80015bc:	f7ff ffcb 	bl	8001556 <lcd_clear_display>
				return;
 80015c0:	e341      	b.n	8001c46 <lcd_run+0x69e>
	}
	switch(status_fsm){
 80015c2:	4b96      	ldr	r3, [pc, #600]	@ (800181c <lcd_run+0x274>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2bc9      	cmp	r3, #201	@ 0xc9
 80015c8:	f000 82b6 	beq.w	8001b38 <lcd_run+0x590>
 80015cc:	2bc9      	cmp	r3, #201	@ 0xc9
 80015ce:	f300 832f 	bgt.w	8001c30 <lcd_run+0x688>
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	dc22      	bgt.n	800161c <lcd_run+0x74>
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f2c0 832a 	blt.w	8001c30 <lcd_run+0x688>
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	f200 8327 	bhi.w	8001c30 <lcd_run+0x688>
 80015e2:	a201      	add	r2, pc, #4	@ (adr r2, 80015e8 <lcd_run+0x40>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	0800165b 	.word	0x0800165b
 80015ec:	08001739 	.word	0x08001739
 80015f0:	08001849 	.word	0x08001849
 80015f4:	08001927 	.word	0x08001927
 80015f8:	08001625 	.word	0x08001625
 80015fc:	08001a05 	.word	0x08001a05
 8001600:	08001a23 	.word	0x08001a23
 8001604:	08001a41 	.word	0x08001a41
 8001608:	08001a5f 	.word	0x08001a5f
 800160c:	08001a7d 	.word	0x08001a7d
 8001610:	08001aa1 	.word	0x08001aa1
 8001614:	08001ac5 	.word	0x08001ac5
 8001618:	08001c31 	.word	0x08001c31
 800161c:	2bc8      	cmp	r3, #200	@ 0xc8
 800161e:	f000 8309 	beq.w	8001c34 <lcd_run+0x68c>
		lcd_send_data(yellow_time/10+48);
		lcd_goto_XY(2,11);
		lcd_send_data(yellow_time%10+48);
		break;
	default:
		break;
 8001622:	e305      	b.n	8001c30 <lcd_run+0x688>
		lcd_red_time = red_time;
 8001624:	4b7e      	ldr	r3, [pc, #504]	@ (8001820 <lcd_run+0x278>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a7e      	ldr	r2, [pc, #504]	@ (8001824 <lcd_run+0x27c>)
 800162a:	6013      	str	r3, [r2, #0]
		lcd_yellow_time = yellow_time;
 800162c:	4b7e      	ldr	r3, [pc, #504]	@ (8001828 <lcd_run+0x280>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a7e      	ldr	r2, [pc, #504]	@ (800182c <lcd_run+0x284>)
 8001632:	6013      	str	r3, [r2, #0]
		lcd_green_time = green_time;
 8001634:	4b7e      	ldr	r3, [pc, #504]	@ (8001830 <lcd_run+0x288>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a7e      	ldr	r2, [pc, #504]	@ (8001834 <lcd_run+0x28c>)
 800163a:	6013      	str	r3, [r2, #0]
		lcd_goto_XY(1,0);
 800163c:	2100      	movs	r1, #0
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff ff90 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("TIME 01:");
 8001644:	487c      	ldr	r0, [pc, #496]	@ (8001838 <lcd_run+0x290>)
 8001646:	f7ff ff71 	bl	800152c <lcd_send_string>
		lcd_goto_XY(2,0);
 800164a:	2100      	movs	r1, #0
 800164c:	2002      	movs	r0, #2
 800164e:	f7ff ff89 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("TIME 02:");
 8001652:	487a      	ldr	r0, [pc, #488]	@ (800183c <lcd_run+0x294>)
 8001654:	f7ff ff6a 	bl	800152c <lcd_send_string>
		break;
 8001658:	e2f5      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(1,8);
 800165a:	2108      	movs	r1, #8
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff ff81 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 8001662:	4b70      	ldr	r3, [pc, #448]	@ (8001824 <lcd_run+0x27c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a76      	ldr	r2, [pc, #472]	@ (8001840 <lcd_run+0x298>)
 8001668:	fb82 1203 	smull	r1, r2, r2, r3
 800166c:	1092      	asrs	r2, r2, #2
 800166e:	17db      	asrs	r3, r3, #31
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3330      	adds	r3, #48	@ 0x30
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fef9 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,9);
 800167e:	2109      	movs	r1, #9
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff6f 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 8001686:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <lcd_run+0x27c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b6d      	ldr	r3, [pc, #436]	@ (8001840 <lcd_run+0x298>)
 800168c:	fb83 1302 	smull	r1, r3, r3, r2
 8001690:	1099      	asrs	r1, r3, #2
 8001692:	17d3      	asrs	r3, r2, #31
 8001694:	1ac9      	subs	r1, r1, r3
 8001696:	460b      	mov	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	1ad1      	subs	r1, r2, r3
 80016a0:	b2cb      	uxtb	r3, r1
 80016a2:	3330      	adds	r3, #48	@ 0x30
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fee2 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,8);
 80016ac:	2108      	movs	r1, #8
 80016ae:	2002      	movs	r0, #2
 80016b0:	f7ff ff58 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_green_time/10 + 48);
 80016b4:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <lcd_run+0x28c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a61      	ldr	r2, [pc, #388]	@ (8001840 <lcd_run+0x298>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1092      	asrs	r2, r2, #2
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3330      	adds	r3, #48	@ 0x30
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fed0 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,9);
 80016d0:	2109      	movs	r1, #9
 80016d2:	2002      	movs	r0, #2
 80016d4:	f7ff ff46 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_green_time%10 + 48);
 80016d8:	4b56      	ldr	r3, [pc, #344]	@ (8001834 <lcd_run+0x28c>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b58      	ldr	r3, [pc, #352]	@ (8001840 <lcd_run+0x298>)
 80016de:	fb83 1302 	smull	r1, r3, r3, r2
 80016e2:	1099      	asrs	r1, r3, #2
 80016e4:	17d3      	asrs	r3, r2, #31
 80016e6:	1ac9      	subs	r1, r1, r3
 80016e8:	460b      	mov	r3, r1
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	1ad1      	subs	r1, r2, r3
 80016f2:	b2cb      	uxtb	r3, r1
 80016f4:	3330      	adds	r3, #48	@ 0x30
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff feb9 	bl	8001470 <lcd_send_data>
		if(flag_timer[3] == 1){
 80016fe:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <lcd_run+0x29c>)
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	2b01      	cmp	r3, #1
 8001704:	f040 8298 	bne.w	8001c38 <lcd_run+0x690>
			if(lcd_red_time > 0) lcd_red_time--;
 8001708:	4b46      	ldr	r3, [pc, #280]	@ (8001824 <lcd_run+0x27c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dd04      	ble.n	800171a <lcd_run+0x172>
 8001710:	4b44      	ldr	r3, [pc, #272]	@ (8001824 <lcd_run+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3b01      	subs	r3, #1
 8001716:	4a43      	ldr	r2, [pc, #268]	@ (8001824 <lcd_run+0x27c>)
 8001718:	6013      	str	r3, [r2, #0]
			if(lcd_green_time >0) lcd_green_time--;
 800171a:	4b46      	ldr	r3, [pc, #280]	@ (8001834 <lcd_run+0x28c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	dd04      	ble.n	800172c <lcd_run+0x184>
 8001722:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <lcd_run+0x28c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3b01      	subs	r3, #1
 8001728:	4a42      	ldr	r2, [pc, #264]	@ (8001834 <lcd_run+0x28c>)
 800172a:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 800172c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001730:	2003      	movs	r0, #3
 8001732:	f001 f8ab 	bl	800288c <setTimer>
		break;
 8001736:	e27f      	b.n	8001c38 <lcd_run+0x690>
		lcd_goto_XY(1,8);
 8001738:	2108      	movs	r1, #8
 800173a:	2001      	movs	r0, #1
 800173c:	f7ff ff12 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 8001740:	4b38      	ldr	r3, [pc, #224]	@ (8001824 <lcd_run+0x27c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a3e      	ldr	r2, [pc, #248]	@ (8001840 <lcd_run+0x298>)
 8001746:	fb82 1203 	smull	r1, r2, r2, r3
 800174a:	1092      	asrs	r2, r2, #2
 800174c:	17db      	asrs	r3, r3, #31
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3330      	adds	r3, #48	@ 0x30
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fe8a 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,9);
 800175c:	2109      	movs	r1, #9
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff ff00 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 8001764:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <lcd_run+0x27c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <lcd_run+0x298>)
 800176a:	fb83 1302 	smull	r1, r3, r3, r2
 800176e:	1099      	asrs	r1, r3, #2
 8001770:	17d3      	asrs	r3, r2, #31
 8001772:	1ac9      	subs	r1, r1, r3
 8001774:	460b      	mov	r3, r1
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	1ad1      	subs	r1, r2, r3
 800177e:	b2cb      	uxtb	r3, r1
 8001780:	3330      	adds	r3, #48	@ 0x30
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fe73 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,8);
 800178a:	2108      	movs	r1, #8
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff fee9 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time/10 + 48);
 8001792:	4b26      	ldr	r3, [pc, #152]	@ (800182c <lcd_run+0x284>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2a      	ldr	r2, [pc, #168]	@ (8001840 <lcd_run+0x298>)
 8001798:	fb82 1203 	smull	r1, r2, r2, r3
 800179c:	1092      	asrs	r2, r2, #2
 800179e:	17db      	asrs	r3, r3, #31
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	3330      	adds	r3, #48	@ 0x30
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe61 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,9);
 80017ae:	2109      	movs	r1, #9
 80017b0:	2002      	movs	r0, #2
 80017b2:	f7ff fed7 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time%10 + 48);
 80017b6:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <lcd_run+0x284>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <lcd_run+0x298>)
 80017bc:	fb83 1302 	smull	r1, r3, r3, r2
 80017c0:	1099      	asrs	r1, r3, #2
 80017c2:	17d3      	asrs	r3, r2, #31
 80017c4:	1ac9      	subs	r1, r1, r3
 80017c6:	460b      	mov	r3, r1
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	1ad1      	subs	r1, r2, r3
 80017d0:	b2cb      	uxtb	r3, r1
 80017d2:	3330      	adds	r3, #48	@ 0x30
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe4a 	bl	8001470 <lcd_send_data>
		if(flag_timer[3] == 1){
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <lcd_run+0x29c>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	f040 822b 	bne.w	8001c3c <lcd_run+0x694>
			if(lcd_red_time > 0) lcd_red_time--;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <lcd_run+0x27c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dd04      	ble.n	80017f8 <lcd_run+0x250>
 80017ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <lcd_run+0x27c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <lcd_run+0x27c>)
 80017f6:	6013      	str	r3, [r2, #0]
			if(lcd_yellow_time >0) lcd_yellow_time--;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <lcd_run+0x284>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	dd04      	ble.n	800180a <lcd_run+0x262>
 8001800:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <lcd_run+0x284>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3b01      	subs	r3, #1
 8001806:	4a09      	ldr	r2, [pc, #36]	@ (800182c <lcd_run+0x284>)
 8001808:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 800180a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800180e:	2003      	movs	r0, #3
 8001810:	f001 f83c 	bl	800288c <setTimer>
		break;
 8001814:	e212      	b.n	8001c3c <lcd_run+0x694>
 8001816:	bf00      	nop
 8001818:	20000104 	.word	0x20000104
 800181c:	20000028 	.word	0x20000028
 8001820:	20000030 	.word	0x20000030
 8001824:	20000174 	.word	0x20000174
 8001828:	20000034 	.word	0x20000034
 800182c:	2000017c 	.word	0x2000017c
 8001830:	20000038 	.word	0x20000038
 8001834:	20000178 	.word	0x20000178
 8001838:	08006160 	.word	0x08006160
 800183c:	0800616c 	.word	0x0800616c
 8001840:	66666667 	.word	0x66666667
 8001844:	200002a0 	.word	0x200002a0
		lcd_goto_XY(1,8);
 8001848:	2108      	movs	r1, #8
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff fe8a 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_green_time/10 + 48);
 8001850:	4ba5      	ldr	r3, [pc, #660]	@ (8001ae8 <lcd_run+0x540>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4aa5      	ldr	r2, [pc, #660]	@ (8001aec <lcd_run+0x544>)
 8001856:	fb82 1203 	smull	r1, r2, r2, r3
 800185a:	1092      	asrs	r2, r2, #2
 800185c:	17db      	asrs	r3, r3, #31
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3330      	adds	r3, #48	@ 0x30
 8001864:	b2db      	uxtb	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe02 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,9);
 800186c:	2109      	movs	r1, #9
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff fe78 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_green_time%10 + 48);
 8001874:	4b9c      	ldr	r3, [pc, #624]	@ (8001ae8 <lcd_run+0x540>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b9c      	ldr	r3, [pc, #624]	@ (8001aec <lcd_run+0x544>)
 800187a:	fb83 1302 	smull	r1, r3, r3, r2
 800187e:	1099      	asrs	r1, r3, #2
 8001880:	17d3      	asrs	r3, r2, #31
 8001882:	1ac9      	subs	r1, r1, r3
 8001884:	460b      	mov	r3, r1
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	1ad1      	subs	r1, r2, r3
 800188e:	b2cb      	uxtb	r3, r1
 8001890:	3330      	adds	r3, #48	@ 0x30
 8001892:	b2db      	uxtb	r3, r3
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fdeb 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,8);
 800189a:	2108      	movs	r1, #8
 800189c:	2002      	movs	r0, #2
 800189e:	f7ff fe61 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 80018a2:	4b93      	ldr	r3, [pc, #588]	@ (8001af0 <lcd_run+0x548>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a91      	ldr	r2, [pc, #580]	@ (8001aec <lcd_run+0x544>)
 80018a8:	fb82 1203 	smull	r1, r2, r2, r3
 80018ac:	1092      	asrs	r2, r2, #2
 80018ae:	17db      	asrs	r3, r3, #31
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	3330      	adds	r3, #48	@ 0x30
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fdd9 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,9);
 80018be:	2109      	movs	r1, #9
 80018c0:	2002      	movs	r0, #2
 80018c2:	f7ff fe4f 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 80018c6:	4b8a      	ldr	r3, [pc, #552]	@ (8001af0 <lcd_run+0x548>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	4b88      	ldr	r3, [pc, #544]	@ (8001aec <lcd_run+0x544>)
 80018cc:	fb83 1302 	smull	r1, r3, r3, r2
 80018d0:	1099      	asrs	r1, r3, #2
 80018d2:	17d3      	asrs	r3, r2, #31
 80018d4:	1ac9      	subs	r1, r1, r3
 80018d6:	460b      	mov	r3, r1
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	1ad1      	subs	r1, r2, r3
 80018e0:	b2cb      	uxtb	r3, r1
 80018e2:	3330      	adds	r3, #48	@ 0x30
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fdc2 	bl	8001470 <lcd_send_data>
		if(flag_timer[3] == 1){
 80018ec:	4b81      	ldr	r3, [pc, #516]	@ (8001af4 <lcd_run+0x54c>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f040 81a5 	bne.w	8001c40 <lcd_run+0x698>
			if(lcd_red_time > 0) lcd_red_time--;
 80018f6:	4b7e      	ldr	r3, [pc, #504]	@ (8001af0 <lcd_run+0x548>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	dd04      	ble.n	8001908 <lcd_run+0x360>
 80018fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001af0 <lcd_run+0x548>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3b01      	subs	r3, #1
 8001904:	4a7a      	ldr	r2, [pc, #488]	@ (8001af0 <lcd_run+0x548>)
 8001906:	6013      	str	r3, [r2, #0]
			if(lcd_green_time >0) lcd_green_time--;
 8001908:	4b77      	ldr	r3, [pc, #476]	@ (8001ae8 <lcd_run+0x540>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	dd04      	ble.n	800191a <lcd_run+0x372>
 8001910:	4b75      	ldr	r3, [pc, #468]	@ (8001ae8 <lcd_run+0x540>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3b01      	subs	r3, #1
 8001916:	4a74      	ldr	r2, [pc, #464]	@ (8001ae8 <lcd_run+0x540>)
 8001918:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 800191a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800191e:	2003      	movs	r0, #3
 8001920:	f000 ffb4 	bl	800288c <setTimer>
		break;
 8001924:	e18c      	b.n	8001c40 <lcd_run+0x698>
		lcd_goto_XY(1,8);
 8001926:	2108      	movs	r1, #8
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff fe1b 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time/10 + 48);
 800192e:	4b72      	ldr	r3, [pc, #456]	@ (8001af8 <lcd_run+0x550>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a6e      	ldr	r2, [pc, #440]	@ (8001aec <lcd_run+0x544>)
 8001934:	fb82 1203 	smull	r1, r2, r2, r3
 8001938:	1092      	asrs	r2, r2, #2
 800193a:	17db      	asrs	r3, r3, #31
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	3330      	adds	r3, #48	@ 0x30
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fd93 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,9);
 800194a:	2109      	movs	r1, #9
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff fe09 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time%10 + 48);
 8001952:	4b69      	ldr	r3, [pc, #420]	@ (8001af8 <lcd_run+0x550>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b65      	ldr	r3, [pc, #404]	@ (8001aec <lcd_run+0x544>)
 8001958:	fb83 1302 	smull	r1, r3, r3, r2
 800195c:	1099      	asrs	r1, r3, #2
 800195e:	17d3      	asrs	r3, r2, #31
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	460b      	mov	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	1ad1      	subs	r1, r2, r3
 800196c:	b2cb      	uxtb	r3, r1
 800196e:	3330      	adds	r3, #48	@ 0x30
 8001970:	b2db      	uxtb	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fd7c 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,8);
 8001978:	2108      	movs	r1, #8
 800197a:	2002      	movs	r0, #2
 800197c:	f7ff fdf2 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 8001980:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <lcd_run+0x548>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a59      	ldr	r2, [pc, #356]	@ (8001aec <lcd_run+0x544>)
 8001986:	fb82 1203 	smull	r1, r2, r2, r3
 800198a:	1092      	asrs	r2, r2, #2
 800198c:	17db      	asrs	r3, r3, #31
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3330      	adds	r3, #48	@ 0x30
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fd6a 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,9);
 800199c:	2109      	movs	r1, #9
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff fde0 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 80019a4:	4b52      	ldr	r3, [pc, #328]	@ (8001af0 <lcd_run+0x548>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b50      	ldr	r3, [pc, #320]	@ (8001aec <lcd_run+0x544>)
 80019aa:	fb83 1302 	smull	r1, r3, r3, r2
 80019ae:	1099      	asrs	r1, r3, #2
 80019b0:	17d3      	asrs	r3, r2, #31
 80019b2:	1ac9      	subs	r1, r1, r3
 80019b4:	460b      	mov	r3, r1
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	1ad1      	subs	r1, r2, r3
 80019be:	b2cb      	uxtb	r3, r1
 80019c0:	3330      	adds	r3, #48	@ 0x30
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fd53 	bl	8001470 <lcd_send_data>
		if(flag_timer[3] == 1){
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <lcd_run+0x54c>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	f040 8138 	bne.w	8001c44 <lcd_run+0x69c>
			if(lcd_red_time > 0) lcd_red_time--;
 80019d4:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <lcd_run+0x548>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	dd04      	ble.n	80019e6 <lcd_run+0x43e>
 80019dc:	4b44      	ldr	r3, [pc, #272]	@ (8001af0 <lcd_run+0x548>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	4a43      	ldr	r2, [pc, #268]	@ (8001af0 <lcd_run+0x548>)
 80019e4:	6013      	str	r3, [r2, #0]
			if(lcd_yellow_time >0) lcd_yellow_time--;
 80019e6:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <lcd_run+0x550>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	dd04      	ble.n	80019f8 <lcd_run+0x450>
 80019ee:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <lcd_run+0x550>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	4a40      	ldr	r2, [pc, #256]	@ (8001af8 <lcd_run+0x550>)
 80019f6:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 80019f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 ff45 	bl	800288c <setTimer>
		break;
 8001a02:	e11f      	b.n	8001c44 <lcd_run+0x69c>
		lcd_goto_XY(1,0);
 8001a04:	2100      	movs	r1, #0
 8001a06:	2001      	movs	r0, #1
 8001a08:	f7ff fdac 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("    RED GREEN   ");
 8001a0c:	483b      	ldr	r0, [pc, #236]	@ (8001afc <lcd_run+0x554>)
 8001a0e:	f7ff fd8d 	bl	800152c <lcd_send_string>
		lcd_goto_XY(2,0);
 8001a12:	2100      	movs	r1, #0
 8001a14:	2002      	movs	r0, #2
 8001a16:	f7ff fda5 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("                ");
 8001a1a:	4839      	ldr	r0, [pc, #228]	@ (8001b00 <lcd_run+0x558>)
 8001a1c:	f7ff fd86 	bl	800152c <lcd_send_string>
		break;
 8001a20:	e111      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(1,0);
 8001a22:	2100      	movs	r1, #0
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff fd9d 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("    RED YELLOW  ");
 8001a2a:	4836      	ldr	r0, [pc, #216]	@ (8001b04 <lcd_run+0x55c>)
 8001a2c:	f7ff fd7e 	bl	800152c <lcd_send_string>
		lcd_goto_XY(2,0);
 8001a30:	2100      	movs	r1, #0
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff fd96 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("                ");
 8001a38:	4831      	ldr	r0, [pc, #196]	@ (8001b00 <lcd_run+0x558>)
 8001a3a:	f7ff fd77 	bl	800152c <lcd_send_string>
		break;
 8001a3e:	e102      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(1,0);
 8001a40:	2100      	movs	r1, #0
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff fd8e 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("    GREEN RED   ");
 8001a48:	482f      	ldr	r0, [pc, #188]	@ (8001b08 <lcd_run+0x560>)
 8001a4a:	f7ff fd6f 	bl	800152c <lcd_send_string>
		lcd_goto_XY(2,0);
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2002      	movs	r0, #2
 8001a52:	f7ff fd87 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("                ");
 8001a56:	482a      	ldr	r0, [pc, #168]	@ (8001b00 <lcd_run+0x558>)
 8001a58:	f7ff fd68 	bl	800152c <lcd_send_string>
		break;
 8001a5c:	e0f3      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(1,0);
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff fd7f 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("    YELLOW RED  ");
 8001a66:	4829      	ldr	r0, [pc, #164]	@ (8001b0c <lcd_run+0x564>)
 8001a68:	f7ff fd60 	bl	800152c <lcd_send_string>
		lcd_goto_XY(2,0);
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7ff fd78 	bl	8001564 <lcd_goto_XY>
		lcd_send_string("                ");
 8001a74:	4822      	ldr	r0, [pc, #136]	@ (8001b00 <lcd_run+0x558>)
 8001a76:	f7ff fd59 	bl	800152c <lcd_send_string>
		break;
 8001a7a:	e0e4      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(2,0);
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7ff fd70 	bl	8001564 <lcd_goto_XY>
		sprintf(lcd_buf,"   TIME RED: %d ",red_time+red_time_increase);
 8001a84:	4b22      	ldr	r3, [pc, #136]	@ (8001b10 <lcd_run+0x568>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <lcd_run+0x56c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4921      	ldr	r1, [pc, #132]	@ (8001b18 <lcd_run+0x570>)
 8001a92:	4822      	ldr	r0, [pc, #136]	@ (8001b1c <lcd_run+0x574>)
 8001a94:	f003 fe94 	bl	80057c0 <siprintf>
		lcd_send_string(lcd_buf);
 8001a98:	4820      	ldr	r0, [pc, #128]	@ (8001b1c <lcd_run+0x574>)
 8001a9a:	f7ff fd47 	bl	800152c <lcd_send_string>
		break;
 8001a9e:	e0d2      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(2,0);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7ff fd5e 	bl	8001564 <lcd_goto_XY>
		sprintf(lcd_buf,"TIME YELLOW: %d ",yellow_time+yellow_time_increase);
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <lcd_run+0x578>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <lcd_run+0x57c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	491c      	ldr	r1, [pc, #112]	@ (8001b28 <lcd_run+0x580>)
 8001ab6:	4819      	ldr	r0, [pc, #100]	@ (8001b1c <lcd_run+0x574>)
 8001ab8:	f003 fe82 	bl	80057c0 <siprintf>
		lcd_send_string(lcd_buf);
 8001abc:	4817      	ldr	r0, [pc, #92]	@ (8001b1c <lcd_run+0x574>)
 8001abe:	f7ff fd35 	bl	800152c <lcd_send_string>
		break;
 8001ac2:	e0c0      	b.n	8001c46 <lcd_run+0x69e>
		lcd_goto_XY(2,0);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2002      	movs	r0, #2
 8001ac8:	f7ff fd4c 	bl	8001564 <lcd_goto_XY>
		sprintf(lcd_buf," TIME GREEN: %d ",green_time+green_time_increase);
 8001acc:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <lcd_run+0x584>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <lcd_run+0x588>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4916      	ldr	r1, [pc, #88]	@ (8001b34 <lcd_run+0x58c>)
 8001ada:	4810      	ldr	r0, [pc, #64]	@ (8001b1c <lcd_run+0x574>)
 8001adc:	f003 fe70 	bl	80057c0 <siprintf>
		lcd_send_string(lcd_buf);
 8001ae0:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <lcd_run+0x574>)
 8001ae2:	f7ff fd23 	bl	800152c <lcd_send_string>
		break;
 8001ae6:	e0ae      	b.n	8001c46 <lcd_run+0x69e>
 8001ae8:	20000178 	.word	0x20000178
 8001aec:	66666667 	.word	0x66666667
 8001af0:	20000174 	.word	0x20000174
 8001af4:	200002a0 	.word	0x200002a0
 8001af8:	2000017c 	.word	0x2000017c
 8001afc:	08006178 	.word	0x08006178
 8001b00:	0800618c 	.word	0x0800618c
 8001b04:	080061a0 	.word	0x080061a0
 8001b08:	080061b4 	.word	0x080061b4
 8001b0c:	080061c8 	.word	0x080061c8
 8001b10:	20000030 	.word	0x20000030
 8001b14:	20000168 	.word	0x20000168
 8001b18:	080061dc 	.word	0x080061dc
 8001b1c:	20000180 	.word	0x20000180
 8001b20:	20000034 	.word	0x20000034
 8001b24:	20000170 	.word	0x20000170
 8001b28:	080061f0 	.word	0x080061f0
 8001b2c:	20000038 	.word	0x20000038
 8001b30:	2000016c 	.word	0x2000016c
 8001b34:	08006204 	.word	0x08006204
		lcd_goto_XY(1,4);
 8001b38:	2104      	movs	r1, #4
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fd12 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(red_time/10+48);
 8001b40:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <lcd_run+0x6a0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a41      	ldr	r2, [pc, #260]	@ (8001c4c <lcd_run+0x6a4>)
 8001b46:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4a:	1092      	asrs	r2, r2, #2
 8001b4c:	17db      	asrs	r3, r3, #31
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	3330      	adds	r3, #48	@ 0x30
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fc8a 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,5);
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fd00 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(red_time%10+48);
 8001b64:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <lcd_run+0x6a0>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <lcd_run+0x6a4>)
 8001b6a:	fb83 1302 	smull	r1, r3, r3, r2
 8001b6e:	1099      	asrs	r1, r3, #2
 8001b70:	17d3      	asrs	r3, r2, #31
 8001b72:	1ac9      	subs	r1, r1, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	1ad1      	subs	r1, r2, r3
 8001b7e:	b2cb      	uxtb	r3, r1
 8001b80:	3330      	adds	r3, #48	@ 0x30
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fc73 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,14);
 8001b8a:	210e      	movs	r1, #14
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fce9 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(green_time/10+48);
 8001b92:	4b2f      	ldr	r3, [pc, #188]	@ (8001c50 <lcd_run+0x6a8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2d      	ldr	r2, [pc, #180]	@ (8001c4c <lcd_run+0x6a4>)
 8001b98:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9c:	1092      	asrs	r2, r2, #2
 8001b9e:	17db      	asrs	r3, r3, #31
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	3330      	adds	r3, #48	@ 0x30
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fc61 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(1,15);
 8001bae:	210f      	movs	r1, #15
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	f7ff fcd7 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(green_time%10+48);
 8001bb6:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <lcd_run+0x6a8>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b24      	ldr	r3, [pc, #144]	@ (8001c4c <lcd_run+0x6a4>)
 8001bbc:	fb83 1302 	smull	r1, r3, r3, r2
 8001bc0:	1099      	asrs	r1, r3, #2
 8001bc2:	17d3      	asrs	r3, r2, #31
 8001bc4:	1ac9      	subs	r1, r1, r3
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	1ad1      	subs	r1, r2, r3
 8001bd0:	b2cb      	uxtb	r3, r1
 8001bd2:	3330      	adds	r3, #48	@ 0x30
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc4a 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,10);
 8001bdc:	210a      	movs	r1, #10
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff fcc0 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(yellow_time/10+48);
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <lcd_run+0x6ac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a18      	ldr	r2, [pc, #96]	@ (8001c4c <lcd_run+0x6a4>)
 8001bea:	fb82 1203 	smull	r1, r2, r2, r3
 8001bee:	1092      	asrs	r2, r2, #2
 8001bf0:	17db      	asrs	r3, r3, #31
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	3330      	adds	r3, #48	@ 0x30
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fc38 	bl	8001470 <lcd_send_data>
		lcd_goto_XY(2,11);
 8001c00:	210b      	movs	r1, #11
 8001c02:	2002      	movs	r0, #2
 8001c04:	f7ff fcae 	bl	8001564 <lcd_goto_XY>
		lcd_send_data(yellow_time%10+48);
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <lcd_run+0x6ac>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <lcd_run+0x6a4>)
 8001c0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001c12:	1099      	asrs	r1, r3, #2
 8001c14:	17d3      	asrs	r3, r2, #31
 8001c16:	1ac9      	subs	r1, r1, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	1ad1      	subs	r1, r2, r3
 8001c22:	b2cb      	uxtb	r3, r1
 8001c24:	3330      	adds	r3, #48	@ 0x30
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fc21 	bl	8001470 <lcd_send_data>
		break;
 8001c2e:	e00a      	b.n	8001c46 <lcd_run+0x69e>
		break;
 8001c30:	bf00      	nop
 8001c32:	e008      	b.n	8001c46 <lcd_run+0x69e>
		break;
 8001c34:	bf00      	nop
 8001c36:	e006      	b.n	8001c46 <lcd_run+0x69e>
		break;
 8001c38:	bf00      	nop
 8001c3a:	e004      	b.n	8001c46 <lcd_run+0x69e>
		break;
 8001c3c:	bf00      	nop
 8001c3e:	e002      	b.n	8001c46 <lcd_run+0x69e>
		break;
 8001c40:	bf00      	nop
 8001c42:	e000      	b.n	8001c46 <lcd_run+0x69e>
		break;
 8001c44:	bf00      	nop
	}
}
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000030 	.word	0x20000030
 8001c4c:	66666667 	.word	0x66666667
 8001c50:	20000038 	.word	0x20000038
 8001c54:	20000034 	.word	0x20000034

08001c58 <led_red_and_yellow>:
 *      Author: ADMIN
 */
#include "main.h"
#include "light_traffic.h"

void led_red_and_yellow(){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4815      	ldr	r0, [pc, #84]	@ (8001cb8 <led_red_and_yellow+0x60>)
 8001c62:	f001 fa6a 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	2120      	movs	r1, #32
 8001c6a:	4813      	ldr	r0, [pc, #76]	@ (8001cb8 <led_red_and_yellow+0x60>)
 8001c6c:	f001 fa65 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2110      	movs	r1, #16
 8001c74:	4810      	ldr	r0, [pc, #64]	@ (8001cb8 <led_red_and_yellow+0x60>)
 8001c76:	f001 fa60 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c80:	480d      	ldr	r0, [pc, #52]	@ (8001cb8 <led_red_and_yellow+0x60>)
 8001c82:	f001 fa5a 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c8c:	480b      	ldr	r0, [pc, #44]	@ (8001cbc <led_red_and_yellow+0x64>)
 8001c8e:	f001 fa54 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001c92:	2201      	movs	r2, #1
 8001c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c98:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <led_red_and_yellow+0x64>)
 8001c9a:	f001 fa4e 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2180      	movs	r1, #128	@ 0x80
 8001ca2:	4807      	ldr	r0, [pc, #28]	@ (8001cc0 <led_red_and_yellow+0x68>)
 8001ca4:	f001 fa49 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2140      	movs	r1, #64	@ 0x40
 8001cac:	4802      	ldr	r0, [pc, #8]	@ (8001cb8 <led_red_and_yellow+0x60>)
 8001cae:	f001 fa44 	bl	800313a <HAL_GPIO_WritePin>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40010c00 	.word	0x40010c00
 8001cbc:	40010800 	.word	0x40010800
 8001cc0:	40011000 	.word	0x40011000

08001cc4 <led_red_and_green>:
void led_red_and_green(){
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2108      	movs	r1, #8
 8001ccc:	4815      	ldr	r0, [pc, #84]	@ (8001d24 <led_red_and_green+0x60>)
 8001cce:	f001 fa34 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	4813      	ldr	r0, [pc, #76]	@ (8001d24 <led_red_and_green+0x60>)
 8001cd8:	f001 fa2f 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2110      	movs	r1, #16
 8001ce0:	4810      	ldr	r0, [pc, #64]	@ (8001d24 <led_red_and_green+0x60>)
 8001ce2:	f001 fa2a 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cec:	480d      	ldr	r0, [pc, #52]	@ (8001d24 <led_red_and_green+0x60>)
 8001cee:	f001 fa24 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf8:	480b      	ldr	r0, [pc, #44]	@ (8001d28 <led_red_and_green+0x64>)
 8001cfa:	f001 fa1e 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d04:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <led_red_and_green+0x64>)
 8001d06:	f001 fa18 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	2180      	movs	r1, #128	@ 0x80
 8001d0e:	4807      	ldr	r0, [pc, #28]	@ (8001d2c <led_red_and_green+0x68>)
 8001d10:	f001 fa13 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2140      	movs	r1, #64	@ 0x40
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <led_red_and_green+0x60>)
 8001d1a:	f001 fa0e 	bl	800313a <HAL_GPIO_WritePin>
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40010c00 	.word	0x40010c00
 8001d28:	40010800 	.word	0x40010800
 8001d2c:	40011000 	.word	0x40011000

08001d30 <led_yellow_and_red>:
void led_yellow_and_red(){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2108      	movs	r1, #8
 8001d38:	4815      	ldr	r0, [pc, #84]	@ (8001d90 <led_yellow_and_red+0x60>)
 8001d3a:	f001 f9fe 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2120      	movs	r1, #32
 8001d42:	4813      	ldr	r0, [pc, #76]	@ (8001d90 <led_yellow_and_red+0x60>)
 8001d44:	f001 f9f9 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	4810      	ldr	r0, [pc, #64]	@ (8001d90 <led_yellow_and_red+0x60>)
 8001d4e:	f001 f9f4 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <led_yellow_and_red+0x60>)
 8001d5a:	f001 f9ee 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d64:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <led_yellow_and_red+0x64>)
 8001d66:	f001 f9e8 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d70:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <led_yellow_and_red+0x64>)
 8001d72:	f001 f9e2 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2180      	movs	r1, #128	@ 0x80
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <led_yellow_and_red+0x68>)
 8001d7c:	f001 f9dd 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2140      	movs	r1, #64	@ 0x40
 8001d84:	4802      	ldr	r0, [pc, #8]	@ (8001d90 <led_yellow_and_red+0x60>)
 8001d86:	f001 f9d8 	bl	800313a <HAL_GPIO_WritePin>
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	40010800 	.word	0x40010800
 8001d98:	40011000 	.word	0x40011000

08001d9c <led_green_and_red>:
void led_green_and_red(){
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001da0:	2201      	movs	r2, #1
 8001da2:	2108      	movs	r1, #8
 8001da4:	4815      	ldr	r0, [pc, #84]	@ (8001dfc <led_green_and_red+0x60>)
 8001da6:	f001 f9c8 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2120      	movs	r1, #32
 8001dae:	4813      	ldr	r0, [pc, #76]	@ (8001dfc <led_green_and_red+0x60>)
 8001db0:	f001 f9c3 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	2110      	movs	r1, #16
 8001db8:	4810      	ldr	r0, [pc, #64]	@ (8001dfc <led_green_and_red+0x60>)
 8001dba:	f001 f9be 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dc4:	480d      	ldr	r0, [pc, #52]	@ (8001dfc <led_green_and_red+0x60>)
 8001dc6:	f001 f9b8 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd0:	480b      	ldr	r0, [pc, #44]	@ (8001e00 <led_green_and_red+0x64>)
 8001dd2:	f001 f9b2 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ddc:	4808      	ldr	r0, [pc, #32]	@ (8001e00 <led_green_and_red+0x64>)
 8001dde:	f001 f9ac 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	4807      	ldr	r0, [pc, #28]	@ (8001e04 <led_green_and_red+0x68>)
 8001de8:	f001 f9a7 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2140      	movs	r1, #64	@ 0x40
 8001df0:	4802      	ldr	r0, [pc, #8]	@ (8001dfc <led_green_and_red+0x60>)
 8001df2:	f001 f9a2 	bl	800313a <HAL_GPIO_WritePin>
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40011000 	.word	0x40011000

08001e08 <all_led_red_on>:
void all_led_red_on(){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2108      	movs	r1, #8
 8001e10:	4815      	ldr	r0, [pc, #84]	@ (8001e68 <all_led_red_on+0x60>)
 8001e12:	f001 f992 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	2120      	movs	r1, #32
 8001e1a:	4813      	ldr	r0, [pc, #76]	@ (8001e68 <all_led_red_on+0x60>)
 8001e1c:	f001 f98d 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	2110      	movs	r1, #16
 8001e24:	4810      	ldr	r0, [pc, #64]	@ (8001e68 <all_led_red_on+0x60>)
 8001e26:	f001 f988 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e30:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <all_led_red_on+0x60>)
 8001e32:	f001 f982 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e3c:	480b      	ldr	r0, [pc, #44]	@ (8001e6c <all_led_red_on+0x64>)
 8001e3e:	f001 f97c 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e48:	4808      	ldr	r0, [pc, #32]	@ (8001e6c <all_led_red_on+0x64>)
 8001e4a:	f001 f976 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <all_led_red_on+0x68>)
 8001e54:	f001 f971 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001e58:	2201      	movs	r2, #1
 8001e5a:	2140      	movs	r1, #64	@ 0x40
 8001e5c:	4802      	ldr	r0, [pc, #8]	@ (8001e68 <all_led_red_on+0x60>)
 8001e5e:	f001 f96c 	bl	800313a <HAL_GPIO_WritePin>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40010c00 	.word	0x40010c00
 8001e6c:	40010800 	.word	0x40010800
 8001e70:	40011000 	.word	0x40011000

08001e74 <all_led_red_off>:
void all_led_red_off(){
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	4815      	ldr	r0, [pc, #84]	@ (8001ed4 <all_led_red_off+0x60>)
 8001e7e:	f001 f95c 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2120      	movs	r1, #32
 8001e86:	4813      	ldr	r0, [pc, #76]	@ (8001ed4 <all_led_red_off+0x60>)
 8001e88:	f001 f957 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2110      	movs	r1, #16
 8001e90:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <all_led_red_off+0x60>)
 8001e92:	f001 f952 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e9c:	480d      	ldr	r0, [pc, #52]	@ (8001ed4 <all_led_red_off+0x60>)
 8001e9e:	f001 f94c 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ea8:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <all_led_red_off+0x64>)
 8001eaa:	f001 f946 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eb4:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <all_led_red_off+0x64>)
 8001eb6:	f001 f940 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	4807      	ldr	r0, [pc, #28]	@ (8001edc <all_led_red_off+0x68>)
 8001ec0:	f001 f93b 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2140      	movs	r1, #64	@ 0x40
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <all_led_red_off+0x60>)
 8001eca:	f001 f936 	bl	800313a <HAL_GPIO_WritePin>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010c00 	.word	0x40010c00
 8001ed8:	40010800 	.word	0x40010800
 8001edc:	40011000 	.word	0x40011000

08001ee0 <all_led_green_on>:
void all_led_green_on(){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	4815      	ldr	r0, [pc, #84]	@ (8001f40 <all_led_green_on+0x60>)
 8001eea:	f001 f926 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2120      	movs	r1, #32
 8001ef2:	4813      	ldr	r0, [pc, #76]	@ (8001f40 <all_led_green_on+0x60>)
 8001ef4:	f001 f921 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2110      	movs	r1, #16
 8001efc:	4810      	ldr	r0, [pc, #64]	@ (8001f40 <all_led_green_on+0x60>)
 8001efe:	f001 f91c 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f08:	480d      	ldr	r0, [pc, #52]	@ (8001f40 <all_led_green_on+0x60>)
 8001f0a:	f001 f916 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f14:	480b      	ldr	r0, [pc, #44]	@ (8001f44 <all_led_green_on+0x64>)
 8001f16:	f001 f910 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f20:	4808      	ldr	r0, [pc, #32]	@ (8001f44 <all_led_green_on+0x64>)
 8001f22:	f001 f90a 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <all_led_green_on+0x68>)
 8001f2c:	f001 f905 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,RESET);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2140      	movs	r1, #64	@ 0x40
 8001f34:	4802      	ldr	r0, [pc, #8]	@ (8001f40 <all_led_green_on+0x60>)
 8001f36:	f001 f900 	bl	800313a <HAL_GPIO_WritePin>
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	40010800 	.word	0x40010800
 8001f48:	40011000 	.word	0x40011000

08001f4c <all_led_yellow_on>:
void all_led_yellow_on(){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2108      	movs	r1, #8
 8001f54:	4815      	ldr	r0, [pc, #84]	@ (8001fac <all_led_yellow_on+0x60>)
 8001f56:	f001 f8f0 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2120      	movs	r1, #32
 8001f5e:	4813      	ldr	r0, [pc, #76]	@ (8001fac <all_led_yellow_on+0x60>)
 8001f60:	f001 f8eb 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2110      	movs	r1, #16
 8001f68:	4810      	ldr	r0, [pc, #64]	@ (8001fac <all_led_yellow_on+0x60>)
 8001f6a:	f001 f8e6 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f74:	480d      	ldr	r0, [pc, #52]	@ (8001fac <all_led_yellow_on+0x60>)
 8001f76:	f001 f8e0 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f80:	480b      	ldr	r0, [pc, #44]	@ (8001fb0 <all_led_yellow_on+0x64>)
 8001f82:	f001 f8da 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f8c:	4808      	ldr	r0, [pc, #32]	@ (8001fb0 <all_led_yellow_on+0x64>)
 8001f8e:	f001 f8d4 	bl	800313a <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2180      	movs	r1, #128	@ 0x80
 8001f96:	4807      	ldr	r0, [pc, #28]	@ (8001fb4 <all_led_yellow_on+0x68>)
 8001f98:	f001 f8cf 	bl	800313a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	2140      	movs	r1, #64	@ 0x40
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <all_led_yellow_on+0x60>)
 8001fa2:	f001 f8ca 	bl	800313a <HAL_GPIO_WritePin>
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40011000 	.word	0x40011000

08001fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fbc:	f000 fcdc 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc0:	f000 f820 	bl	8002004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc4:	f000 f904 	bl	80021d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001fc8:	f000 f88c 	bl	80020e4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001fcc:	f000 f85c 	bl	8002088 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001fd0:	f000 f8d4 	bl	800217c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8001fd4:	f7ff fa7c 	bl	80014d0 <lcd_init>
  command_parser_init();
 8001fd8:	f7fe f996 	bl	8000308 <command_parser_init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001fdc:	4808      	ldr	r0, [pc, #32]	@ (8002000 <main+0x48>)
 8001fde:	f002 f9e3 	bl	80043a8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  command_parser_fsm();
 8001fe2:	f7fe fa6f 	bl	80004c4 <command_parser_fsm>
	  server_flag_processing_run();
 8001fe6:	f000 f9bd 	bl	8002364 <server_flag_processing_run>
	  lcd_run();
 8001fea:	f7ff fadd 	bl	80015a8 <lcd_run>
	  fsm_autorun();
 8001fee:	f7fe ff4b 	bl	8000e88 <fsm_autorun>
	  fsm_manual();
 8001ff2:	f7ff f83b 	bl	800106c <fsm_manual>
	  fsm_setting();
 8001ff6:	f7ff f89f 	bl	8001138 <fsm_setting>
	  command_parser_fsm();
 8001ffa:	bf00      	nop
 8001ffc:	e7f1      	b.n	8001fe2 <main+0x2a>
 8001ffe:	bf00      	nop
 8002000:	200001e4 	.word	0x200001e4

08002004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b090      	sub	sp, #64	@ 0x40
 8002008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800200a:	f107 0318 	add.w	r3, r7, #24
 800200e:	2228      	movs	r2, #40	@ 0x28
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f003 fbf4 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002018:	1d3b      	adds	r3, r7, #4
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800202a:	2301      	movs	r3, #1
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800202e:	2310      	movs	r3, #16
 8002030:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002032:	2302      	movs	r3, #2
 8002034:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002036:	2300      	movs	r3, #0
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800203a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fd4f 	bl	8003ae8 <HAL_RCC_OscConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002050:	f000 f982 	bl	8002358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002054:	230f      	movs	r3, #15
 8002056:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	2302      	movs	r3, #2
 800205a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002060:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2102      	movs	r1, #2
 800206e:	4618      	mov	r0, r3
 8002070:	f001 ffbc 	bl	8003fec <HAL_RCC_ClockConfig>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800207a:	f000 f96d 	bl	8002358 <Error_Handler>
  }
}
 800207e:	bf00      	nop
 8002080:	3740      	adds	r7, #64	@ 0x40
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800208c:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <MX_I2C1_Init+0x50>)
 800208e:	4a13      	ldr	r2, [pc, #76]	@ (80020dc <MX_I2C1_Init+0x54>)
 8002090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_I2C1_Init+0x50>)
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <MX_I2C1_Init+0x58>)
 8002096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020ac:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020b2:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b8:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020be:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c4:	4804      	ldr	r0, [pc, #16]	@ (80020d8 <MX_I2C1_Init+0x50>)
 80020c6:	f001 f873 	bl	80031b0 <HAL_I2C_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020d0:	f000 f942 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000190 	.word	0x20000190
 80020dc:	40005400 	.word	0x40005400
 80020e0:	000186a0 	.word	0x000186a0

080020e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <MX_TIM2_Init+0x94>)
 8002102:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002106:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 8002108:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <MX_TIM2_Init+0x94>)
 800210a:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800210e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <MX_TIM2_Init+0x94>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <MX_TIM2_Init+0x94>)
 8002118:	2209      	movs	r2, #9
 800211a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <MX_TIM2_Init+0x94>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <MX_TIM2_Init+0x94>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002128:	4813      	ldr	r0, [pc, #76]	@ (8002178 <MX_TIM2_Init+0x94>)
 800212a:	f002 f8ed 	bl	8004308 <HAL_TIM_Base_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002134:	f000 f910 	bl	8002358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002138:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	@ (8002178 <MX_TIM2_Init+0x94>)
 8002146:	f002 fa71 	bl	800462c <HAL_TIM_ConfigClockSource>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002150:	f000 f902 	bl	8002358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002154:	2300      	movs	r3, #0
 8002156:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800215c:	463b      	mov	r3, r7
 800215e:	4619      	mov	r1, r3
 8002160:	4805      	ldr	r0, [pc, #20]	@ (8002178 <MX_TIM2_Init+0x94>)
 8002162:	f002 fc53 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800216c:	f000 f8f4 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200001e4 	.word	0x200001e4

0800217c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002182:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <MX_USART3_UART_Init+0x50>)
 8002184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800218c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021b2:	4805      	ldr	r0, [pc, #20]	@ (80021c8 <MX_USART3_UART_Init+0x4c>)
 80021b4:	f002 fc9a 	bl	8004aec <HAL_UART_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021be:	f000 f8cb 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000022c 	.word	0x2000022c
 80021cc:	40004800 	.word	0x40004800

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 0310 	add.w	r3, r7, #16
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	4b51      	ldr	r3, [pc, #324]	@ (800232c <MX_GPIO_Init+0x15c>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a50      	ldr	r2, [pc, #320]	@ (800232c <MX_GPIO_Init+0x15c>)
 80021ea:	f043 0310 	orr.w	r3, r3, #16
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b4e      	ldr	r3, [pc, #312]	@ (800232c <MX_GPIO_Init+0x15c>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0310 	and.w	r3, r3, #16
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fc:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <MX_GPIO_Init+0x15c>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	4a4a      	ldr	r2, [pc, #296]	@ (800232c <MX_GPIO_Init+0x15c>)
 8002202:	f043 0320 	orr.w	r3, r3, #32
 8002206:	6193      	str	r3, [r2, #24]
 8002208:	4b48      	ldr	r3, [pc, #288]	@ (800232c <MX_GPIO_Init+0x15c>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002214:	4b45      	ldr	r3, [pc, #276]	@ (800232c <MX_GPIO_Init+0x15c>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	4a44      	ldr	r2, [pc, #272]	@ (800232c <MX_GPIO_Init+0x15c>)
 800221a:	f043 0304 	orr.w	r3, r3, #4
 800221e:	6193      	str	r3, [r2, #24]
 8002220:	4b42      	ldr	r3, [pc, #264]	@ (800232c <MX_GPIO_Init+0x15c>)
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222c:	4b3f      	ldr	r3, [pc, #252]	@ (800232c <MX_GPIO_Init+0x15c>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	4a3e      	ldr	r2, [pc, #248]	@ (800232c <MX_GPIO_Init+0x15c>)
 8002232:	f043 0308 	orr.w	r3, r3, #8
 8002236:	6193      	str	r3, [r2, #24]
 8002238:	4b3c      	ldr	r3, [pc, #240]	@ (800232c <MX_GPIO_Init+0x15c>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A1_Pin|A2_Pin|LD2_Pin|D7_Pin
 8002244:	2200      	movs	r2, #0
 8002246:	f240 3132 	movw	r1, #818	@ 0x332
 800224a:	4839      	ldr	r0, [pc, #228]	@ (8002330 <MX_GPIO_Init+0x160>)
 800224c:	f000 ff75 	bl	800313a <HAL_GPIO_WritePin>
                          |D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A3_Pin|D6_Pin|D3_Pin|D5_Pin
 8002250:	2200      	movs	r2, #0
 8002252:	f240 4179 	movw	r1, #1145	@ 0x479
 8002256:	4837      	ldr	r0, [pc, #220]	@ (8002334 <MX_GPIO_Init+0x164>)
 8002258:	f000 ff6f 	bl	800313a <HAL_GPIO_WritePin>
                          |D4_Pin|D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800225c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002262:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <MX_GPIO_Init+0x168>)
 8002264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0310 	add.w	r3, r7, #16
 800226e:	4619      	mov	r1, r3
 8002270:	4832      	ldr	r0, [pc, #200]	@ (800233c <MX_GPIO_Init+0x16c>)
 8002272:	f000 fdc7 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : A0_Pin */
  GPIO_InitStruct.Pin = A0_Pin;
 8002276:	2301      	movs	r3, #1
 8002278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	4829      	ldr	r0, [pc, #164]	@ (8002330 <MX_GPIO_Init+0x160>)
 800228a:	f000 fdbb 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin A2_Pin LD2_Pin D7_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = A1_Pin|A2_Pin|LD2_Pin|D7_Pin
 800228e:	f240 3332 	movw	r3, #818	@ 0x332
 8002292:	613b      	str	r3, [r7, #16]
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2302      	movs	r3, #2
 800229e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4822      	ldr	r0, [pc, #136]	@ (8002330 <MX_GPIO_Init+0x160>)
 80022a8:	f000 fdac 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ac:	2304      	movs	r3, #4
 80022ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	481c      	ldr	r0, [pc, #112]	@ (8002330 <MX_GPIO_Init+0x160>)
 80022c0:	f000 fda0 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80022c4:	2308      	movs	r3, #8
 80022c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 0310 	add.w	r3, r7, #16
 80022d4:	4619      	mov	r1, r3
 80022d6:	4816      	ldr	r0, [pc, #88]	@ (8002330 <MX_GPIO_Init+0x160>)
 80022d8:	f000 fd94 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin D6_Pin D3_Pin D5_Pin
                           D4_Pin D10_Pin */
  GPIO_InitStruct.Pin = A3_Pin|D6_Pin|D3_Pin|D5_Pin
 80022dc:	f240 4379 	movw	r3, #1145	@ 0x479
 80022e0:	613b      	str	r3, [r7, #16]
                          |D4_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2302      	movs	r3, #2
 80022ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	4619      	mov	r1, r3
 80022f4:	480f      	ldr	r0, [pc, #60]	@ (8002334 <MX_GPIO_Init+0x164>)
 80022f6:	f000 fd85 	bl	8002e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0310 	add.w	r3, r7, #16
 800230a:	4619      	mov	r1, r3
 800230c:	480b      	ldr	r0, [pc, #44]	@ (800233c <MX_GPIO_Init+0x16c>)
 800230e:	f000 fd79 	bl	8002e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	2028      	movs	r0, #40	@ 0x28
 8002318:	f000 fc8b 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800231c:	2028      	movs	r0, #40	@ 0x28
 800231e:	f000 fca4 	bl	8002c6a <HAL_NVIC_EnableIRQ>

}
 8002322:	bf00      	nop
 8002324:	3720      	adds	r7, #32
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	40010800 	.word	0x40010800
 8002334:	40010c00 	.word	0x40010c00
 8002338:	10110000 	.word	0x10110000
 800233c:	40011000 	.word	0x40011000

08002340 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	timerRun();
 8002348:	f000 fac0 	bl	80028cc <timerRun>
	getKeyInput();
 800234c:	f7fd ff18 	bl	8000180 <getKeyInput>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800235c:	b672      	cpsid	i
}
 800235e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <Error_Handler+0x8>

08002364 <server_flag_processing_run>:
#include <server_flag_processing.h>

void server_flag_processing_run() {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	if (getRunFlag() == 1) {
 8002368:	f7fd ffdc 	bl	8000324 <getRunFlag>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <server_flag_processing_run+0x1c>
		setRunFlag(0);
 8002372:	2000      	movs	r0, #0
 8002374:	f7fd ffe0 	bl	8000338 <setRunFlag>
		status_fsm = INIT;
 8002378:	4b73      	ldr	r3, [pc, #460]	@ (8002548 <server_flag_processing_run+0x1e4>)
 800237a:	2204      	movs	r2, #4
 800237c:	601a      	str	r2, [r3, #0]
		return;
 800237e:	e0e2      	b.n	8002546 <server_flag_processing_run+0x1e2>
	}
	;
	if (getRYFlag() == 1) {
 8002380:	f7fd ffea 	bl	8000358 <getRYFlag>
 8002384:	4603      	mov	r3, r0
 8002386:	2b01      	cmp	r3, #1
 8002388:	d106      	bne.n	8002398 <server_flag_processing_run+0x34>
		setRYFlag(0);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fd ffee 	bl	800036c <setRYFlag>
		status_fsm = RED_YELLOW_MANUAL;
 8002390:	4b6d      	ldr	r3, [pc, #436]	@ (8002548 <server_flag_processing_run+0x1e4>)
 8002392:	2206      	movs	r2, #6
 8002394:	601a      	str	r2, [r3, #0]
		return;
 8002396:	e0d6      	b.n	8002546 <server_flag_processing_run+0x1e2>
	}
	;
	if (getYRFlag() == 1) {
 8002398:	f7fe f812 	bl	80003c0 <getYRFlag>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <server_flag_processing_run+0x4c>
		setYRFlag(0);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7fe f816 	bl	80003d4 <setYRFlag>
		status_fsm = YELLOW_RED_MANUAL;
 80023a8:	4b67      	ldr	r3, [pc, #412]	@ (8002548 <server_flag_processing_run+0x1e4>)
 80023aa:	2208      	movs	r2, #8
 80023ac:	601a      	str	r2, [r3, #0]
		return;
 80023ae:	e0ca      	b.n	8002546 <server_flag_processing_run+0x1e2>
	}
	;
	if (getGRFlag() == 1) {
 80023b0:	f7fe f820 	bl	80003f4 <getGRFlag>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d106      	bne.n	80023c8 <server_flag_processing_run+0x64>
		setGRFlag(0);
 80023ba:	2000      	movs	r0, #0
 80023bc:	f7fe f824 	bl	8000408 <setGRFlag>
		status_fsm = GREEN_RED_MANUAL;
 80023c0:	4b61      	ldr	r3, [pc, #388]	@ (8002548 <server_flag_processing_run+0x1e4>)
 80023c2:	2207      	movs	r2, #7
 80023c4:	601a      	str	r2, [r3, #0]
		return;
 80023c6:	e0be      	b.n	8002546 <server_flag_processing_run+0x1e2>
	}
	;
	if (getRGFlag() == 1) {
 80023c8:	f7fd ffe0 	bl	800038c <getRGFlag>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <server_flag_processing_run+0x7c>
			setRGFlag(0);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fd ffe4 	bl	80003a0 <setRGFlag>
			status_fsm = RED_GREEN_MANUAL;
 80023d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002548 <server_flag_processing_run+0x1e4>)
 80023da:	2205      	movs	r2, #5
 80023dc:	601a      	str	r2, [r3, #0]
			return;
 80023de:	e0b2      	b.n	8002546 <server_flag_processing_run+0x1e2>
		}
		;
	if (getSetFlag() == 1) {
 80023e0:	f7fe f822 	bl	8000428 <getSetFlag>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d106      	bne.n	80023f8 <server_flag_processing_run+0x94>
		setSetFlag(0);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe f826 	bl	800043c <setSetFlag>
		status_fsm = INIT_REMOTE_SETTING;
 80023f0:	4b55      	ldr	r3, [pc, #340]	@ (8002548 <server_flag_processing_run+0x1e4>)
 80023f2:	22c8      	movs	r2, #200	@ 0xc8
 80023f4:	601a      	str	r2, [r3, #0]
		return;
 80023f6:	e0a6      	b.n	8002546 <server_flag_processing_run+0x1e2>
	}
	;
	if (getManFlag() == 1) {
 80023f8:	f7fe f830 	bl	800045c <getManFlag>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <server_flag_processing_run+0xb0>
		setManFlag(0);
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe f834 	bl	8000470 <setManFlag>
		status_fsm += 5;
 8002408:	4b4f      	ldr	r3, [pc, #316]	@ (8002548 <server_flag_processing_run+0x1e4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3305      	adds	r3, #5
 800240e:	4a4e      	ldr	r2, [pc, #312]	@ (8002548 <server_flag_processing_run+0x1e4>)
 8002410:	6013      	str	r3, [r2, #0]
		return;
 8002412:	e098      	b.n	8002546 <server_flag_processing_run+0x1e2>
	};
	if(getDataFlag() == 1){
 8002414:	f7fe f83c 	bl	8000490 <getDataFlag>
 8002418:	4603      	mov	r3, r0
 800241a:	2b01      	cmp	r3, #1
 800241c:	f040 8093 	bne.w	8002546 <server_flag_processing_run+0x1e2>
		setDataFlag(0);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe f83f 	bl	80004a4 <setDataFlag>
		green_time = (buffer[(old_process_idx - 1)%30] - 48) + (buffer[(old_process_idx - 2)%30] - 48)*10;
 8002426:	4b49      	ldr	r3, [pc, #292]	@ (800254c <server_flag_processing_run+0x1e8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1e5a      	subs	r2, r3, #1
 800242c:	4b48      	ldr	r3, [pc, #288]	@ (8002550 <server_flag_processing_run+0x1ec>)
 800242e:	fb83 1302 	smull	r1, r3, r3, r2
 8002432:	4413      	add	r3, r2
 8002434:	1119      	asrs	r1, r3, #4
 8002436:	17d3      	asrs	r3, r2, #31
 8002438:	1ac9      	subs	r1, r1, r3
 800243a:	460b      	mov	r3, r1
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a5b      	subs	r3, r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	1ad1      	subs	r1, r2, r3
 8002444:	4b43      	ldr	r3, [pc, #268]	@ (8002554 <server_flag_processing_run+0x1f0>)
 8002446:	5c5b      	ldrb	r3, [r3, r1]
 8002448:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800244c:	4b3f      	ldr	r3, [pc, #252]	@ (800254c <server_flag_processing_run+0x1e8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	1e9a      	subs	r2, r3, #2
 8002452:	4b3f      	ldr	r3, [pc, #252]	@ (8002550 <server_flag_processing_run+0x1ec>)
 8002454:	fb83 1302 	smull	r1, r3, r3, r2
 8002458:	4413      	add	r3, r2
 800245a:	1119      	asrs	r1, r3, #4
 800245c:	17d3      	asrs	r3, r2, #31
 800245e:	1ac9      	subs	r1, r1, r3
 8002460:	460b      	mov	r3, r1
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a5b      	subs	r3, r3, r1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	1ad1      	subs	r1, r2, r3
 800246a:	4b3a      	ldr	r3, [pc, #232]	@ (8002554 <server_flag_processing_run+0x1f0>)
 800246c:	5c5b      	ldrb	r3, [r3, r1]
 800246e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4403      	add	r3, r0
 800247c:	4a36      	ldr	r2, [pc, #216]	@ (8002558 <server_flag_processing_run+0x1f4>)
 800247e:	6013      	str	r3, [r2, #0]
		yellow_time = (buffer[(old_process_idx - 5)%30] - 48) + (buffer[(old_process_idx - 6)%30] - 48)*10;
 8002480:	4b32      	ldr	r3, [pc, #200]	@ (800254c <server_flag_processing_run+0x1e8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1f5a      	subs	r2, r3, #5
 8002486:	4b32      	ldr	r3, [pc, #200]	@ (8002550 <server_flag_processing_run+0x1ec>)
 8002488:	fb83 1302 	smull	r1, r3, r3, r2
 800248c:	4413      	add	r3, r2
 800248e:	1119      	asrs	r1, r3, #4
 8002490:	17d3      	asrs	r3, r2, #31
 8002492:	1ac9      	subs	r1, r1, r3
 8002494:	460b      	mov	r3, r1
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a5b      	subs	r3, r3, r1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	1ad1      	subs	r1, r2, r3
 800249e:	4b2d      	ldr	r3, [pc, #180]	@ (8002554 <server_flag_processing_run+0x1f0>)
 80024a0:	5c5b      	ldrb	r3, [r3, r1]
 80024a2:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80024a6:	4b29      	ldr	r3, [pc, #164]	@ (800254c <server_flag_processing_run+0x1e8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1f9a      	subs	r2, r3, #6
 80024ac:	4b28      	ldr	r3, [pc, #160]	@ (8002550 <server_flag_processing_run+0x1ec>)
 80024ae:	fb83 1302 	smull	r1, r3, r3, r2
 80024b2:	4413      	add	r3, r2
 80024b4:	1119      	asrs	r1, r3, #4
 80024b6:	17d3      	asrs	r3, r2, #31
 80024b8:	1ac9      	subs	r1, r1, r3
 80024ba:	460b      	mov	r3, r1
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	1a5b      	subs	r3, r3, r1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1ad1      	subs	r1, r2, r3
 80024c4:	4b23      	ldr	r3, [pc, #140]	@ (8002554 <server_flag_processing_run+0x1f0>)
 80024c6:	5c5b      	ldrb	r3, [r3, r1]
 80024c8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4403      	add	r3, r0
 80024d6:	4a21      	ldr	r2, [pc, #132]	@ (800255c <server_flag_processing_run+0x1f8>)
 80024d8:	6013      	str	r3, [r2, #0]
		red_time = (buffer[(old_process_idx - 9)%30] - 48) + (buffer[(old_process_idx - 10)%30] - 48)*10;
 80024da:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <server_flag_processing_run+0x1e8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f1a3 0209 	sub.w	r2, r3, #9
 80024e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002550 <server_flag_processing_run+0x1ec>)
 80024e4:	fb83 1302 	smull	r1, r3, r3, r2
 80024e8:	4413      	add	r3, r2
 80024ea:	1119      	asrs	r1, r3, #4
 80024ec:	17d3      	asrs	r3, r2, #31
 80024ee:	1ac9      	subs	r1, r1, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a5b      	subs	r3, r3, r1
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	1ad1      	subs	r1, r2, r3
 80024fa:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <server_flag_processing_run+0x1f0>)
 80024fc:	5c5b      	ldrb	r3, [r3, r1]
 80024fe:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8002502:	4b12      	ldr	r3, [pc, #72]	@ (800254c <server_flag_processing_run+0x1e8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1a3 020a 	sub.w	r2, r3, #10
 800250a:	4b11      	ldr	r3, [pc, #68]	@ (8002550 <server_flag_processing_run+0x1ec>)
 800250c:	fb83 1302 	smull	r1, r3, r3, r2
 8002510:	4413      	add	r3, r2
 8002512:	1119      	asrs	r1, r3, #4
 8002514:	17d3      	asrs	r3, r2, #31
 8002516:	1ac9      	subs	r1, r1, r3
 8002518:	460b      	mov	r3, r1
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	1a5b      	subs	r3, r3, r1
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	1ad1      	subs	r1, r2, r3
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <server_flag_processing_run+0x1f0>)
 8002524:	5c5b      	ldrb	r3, [r3, r1]
 8002526:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4403      	add	r3, r0
 8002534:	4a0a      	ldr	r2, [pc, #40]	@ (8002560 <server_flag_processing_run+0x1fc>)
 8002536:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, &green_time, 1, 1000);
 8002538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800253c:	2201      	movs	r2, #1
 800253e:	4906      	ldr	r1, [pc, #24]	@ (8002558 <server_flag_processing_run+0x1f4>)
 8002540:	4808      	ldr	r0, [pc, #32]	@ (8002564 <server_flag_processing_run+0x200>)
 8002542:	f002 fb23 	bl	8004b8c <HAL_UART_Transmit>
		//status_fsm = INIT;
	};
}
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000028 	.word	0x20000028
 800254c:	20000164 	.word	0x20000164
 8002550:	88888889 	.word	0x88888889
 8002554:	20000008 	.word	0x20000008
 8002558:	20000038 	.word	0x20000038
 800255c:	20000034 	.word	0x20000034
 8002560:	20000030 	.word	0x20000030
 8002564:	2000022c 	.word	0x2000022c

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_MspInit+0x5c>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <HAL_MspInit+0x5c>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b12      	ldr	r3, [pc, #72]	@ (80025c4 <HAL_MspInit+0x5c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <HAL_MspInit+0x5c>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a0e      	ldr	r2, [pc, #56]	@ (80025c4 <HAL_MspInit+0x5c>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b0c      	ldr	r3, [pc, #48]	@ (80025c4 <HAL_MspInit+0x5c>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_MspInit+0x60>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <HAL_MspInit+0x60>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010000 	.word	0x40010000

080025cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <HAL_I2C_MspInit+0x90>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d132      	bne.n	8002652 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <HAL_I2C_MspInit+0x94>)
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002660 <HAL_I2C_MspInit+0x94>)
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	6193      	str	r3, [r2, #24]
 80025f8:	4b19      	ldr	r3, [pc, #100]	@ (8002660 <HAL_I2C_MspInit+0x94>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002604:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260a:	2312      	movs	r3, #18
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4812      	ldr	r0, [pc, #72]	@ (8002664 <HAL_I2C_MspInit+0x98>)
 800261a:	f000 fbf3 	bl	8002e04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <HAL_I2C_MspInit+0x9c>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	f043 0302 	orr.w	r3, r3, #2
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <HAL_I2C_MspInit+0x9c>)
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_I2C_MspInit+0x94>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <HAL_I2C_MspInit+0x94>)
 8002640:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002644:	61d3      	str	r3, [r2, #28]
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_I2C_MspInit+0x94>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	@ 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40005400 	.word	0x40005400
 8002660:	40021000 	.word	0x40021000
 8002664:	40010c00 	.word	0x40010c00
 8002668:	40010000 	.word	0x40010000

0800266c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267c:	d113      	bne.n	80026a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800267e:	4b0c      	ldr	r3, [pc, #48]	@ (80026b0 <HAL_TIM_Base_MspInit+0x44>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	4a0b      	ldr	r2, [pc, #44]	@ (80026b0 <HAL_TIM_Base_MspInit+0x44>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	61d3      	str	r3, [r2, #28]
 800268a:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_TIM_Base_MspInit+0x44>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	201c      	movs	r0, #28
 800269c:	f000 fac9 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026a0:	201c      	movs	r0, #28
 80026a2:	f000 fae2 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026a6:	bf00      	nop
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	@ 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a29      	ldr	r2, [pc, #164]	@ (8002774 <HAL_UART_MspInit+0xc0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d14b      	bne.n	800276c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80026d4:	4b28      	ldr	r3, [pc, #160]	@ (8002778 <HAL_UART_MspInit+0xc4>)
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	4a27      	ldr	r2, [pc, #156]	@ (8002778 <HAL_UART_MspInit+0xc4>)
 80026da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026de:	61d3      	str	r3, [r2, #28]
 80026e0:	4b25      	ldr	r3, [pc, #148]	@ (8002778 <HAL_UART_MspInit+0xc4>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ec:	4b22      	ldr	r3, [pc, #136]	@ (8002778 <HAL_UART_MspInit+0xc4>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	4a21      	ldr	r2, [pc, #132]	@ (8002778 <HAL_UART_MspInit+0xc4>)
 80026f2:	f043 0310 	orr.w	r3, r3, #16
 80026f6:	6193      	str	r3, [r2, #24]
 80026f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002778 <HAL_UART_MspInit+0xc4>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270a:	2302      	movs	r3, #2
 800270c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800270e:	2303      	movs	r3, #3
 8002710:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	4818      	ldr	r0, [pc, #96]	@ (800277c <HAL_UART_MspInit+0xc8>)
 800271a:	f000 fb73 	bl	8002e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800271e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4619      	mov	r1, r3
 8002732:	4812      	ldr	r0, [pc, #72]	@ (800277c <HAL_UART_MspInit+0xc8>)
 8002734:	f000 fb66 	bl	8002e04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <HAL_UART_MspInit+0xcc>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <HAL_UART_MspInit+0xcc>)
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	2100      	movs	r1, #0
 8002760:	2027      	movs	r0, #39	@ 0x27
 8002762:	f000 fa66 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002766:	2027      	movs	r0, #39	@ 0x27
 8002768:	f000 fa7f 	bl	8002c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800276c:	bf00      	nop
 800276e:	3728      	adds	r7, #40	@ 0x28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40004800 	.word	0x40004800
 8002778:	40021000 	.word	0x40021000
 800277c:	40011000 	.word	0x40011000
 8002780:	40010000 	.word	0x40010000

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <NMI_Handler+0x4>

0800278c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <MemManage_Handler+0x4>

0800279c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <UsageFault_Handler+0x4>

080027ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d4:	f000 f916 	bl	8002a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <TIM2_IRQHandler+0x10>)
 80027e2:	f001 fe33 	bl	800444c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200001e4 	.word	0x200001e4

080027f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <USART3_IRQHandler+0x10>)
 80027f6:	f002 fa79 	bl	8004cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000022c 	.word	0x2000022c

08002804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002808:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800280c:	f000 fcae 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281c:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002844:	f002 ffe4 	bl	8005810 <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20005000 	.word	0x20005000
 8002874:	00000400 	.word	0x00000400
 8002878:	20000274 	.word	0x20000274
 800287c:	20000418 	.word	0x20000418

08002880 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <setTimer>:


#include "timer.h"
int software_timer[10] = {0};
int flag_timer[10] = {0};
void setTimer(int index,int duration){
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	software_timer[index] = duration/TICK;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	4a09      	ldr	r2, [pc, #36]	@ (80028c0 <setTimer+0x34>)
 800289a:	fb82 1203 	smull	r1, r2, r2, r3
 800289e:	1092      	asrs	r2, r2, #2
 80028a0:	17db      	asrs	r3, r3, #31
 80028a2:	1ad2      	subs	r2, r2, r3
 80028a4:	4907      	ldr	r1, [pc, #28]	@ (80028c4 <setTimer+0x38>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[index] = 0;
 80028ac:	4a06      	ldr	r2, [pc, #24]	@ (80028c8 <setTimer+0x3c>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2100      	movs	r1, #0
 80028b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	66666667 	.word	0x66666667
 80028c4:	20000278 	.word	0x20000278
 80028c8:	200002a0 	.word	0x200002a0

080028cc <timerRun>:
void timerRun(){
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	e01b      	b.n	8002910 <timerRun+0x44>
		software_timer[i]--;
 80028d8:	4a12      	ldr	r2, [pc, #72]	@ (8002924 <timerRun+0x58>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	1e5a      	subs	r2, r3, #1
 80028e2:	4910      	ldr	r1, [pc, #64]	@ (8002924 <timerRun+0x58>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(software_timer[i] <= 0){
 80028ea:	4a0e      	ldr	r2, [pc, #56]	@ (8002924 <timerRun+0x58>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	dc09      	bgt.n	800290a <timerRun+0x3e>
			software_timer[i] = 0;
 80028f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002924 <timerRun+0x58>)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2100      	movs	r1, #0
 80028fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flag_timer[i] = 1;
 8002900:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <timerRun+0x5c>)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2101      	movs	r1, #1
 8002906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<10;i++){
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3301      	adds	r3, #1
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b09      	cmp	r3, #9
 8002914:	dde0      	ble.n	80028d8 <timerRun+0xc>
		}
	}
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000278 	.word	0x20000278
 8002928:	200002a0 	.word	0x200002a0

0800292c <Reset_Handler>:
 800292c:	f7ff ffa8 	bl	8002880 <SystemInit>
 8002930:	480b      	ldr	r0, [pc, #44]	@ (8002960 <LoopFillZerobss+0xe>)
 8002932:	490c      	ldr	r1, [pc, #48]	@ (8002964 <LoopFillZerobss+0x12>)
 8002934:	4a0c      	ldr	r2, [pc, #48]	@ (8002968 <LoopFillZerobss+0x16>)
 8002936:	2300      	movs	r3, #0
 8002938:	e002      	b.n	8002940 <LoopCopyDataInit>

0800293a <CopyDataInit>:
 800293a:	58d4      	ldr	r4, [r2, r3]
 800293c:	50c4      	str	r4, [r0, r3]
 800293e:	3304      	adds	r3, #4

08002940 <LoopCopyDataInit>:
 8002940:	18c4      	adds	r4, r0, r3
 8002942:	428c      	cmp	r4, r1
 8002944:	d3f9      	bcc.n	800293a <CopyDataInit>
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <LoopFillZerobss+0x1a>)
 8002948:	4c09      	ldr	r4, [pc, #36]	@ (8002970 <LoopFillZerobss+0x1e>)
 800294a:	2300      	movs	r3, #0
 800294c:	e001      	b.n	8002952 <LoopFillZerobss>

0800294e <FillZerobss>:
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	3204      	adds	r2, #4

08002952 <LoopFillZerobss>:
 8002952:	42a2      	cmp	r2, r4
 8002954:	d3fb      	bcc.n	800294e <FillZerobss>
 8002956:	f002 ff61 	bl	800581c <__libc_init_array>
 800295a:	f7ff fb2d 	bl	8001fb8 <main>
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000
 8002964:	20000098 	.word	0x20000098
 8002968:	08006280 	.word	0x08006280
 800296c:	20000098 	.word	0x20000098
 8002970:	20000414 	.word	0x20000414

08002974 <ADC1_2_IRQHandler>:
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_Init+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <HAL_Init+0x28>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 f947 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f808 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7ff fde8 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ac:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_InitTick+0x54>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_InitTick+0x58>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f95f 	bl	8002c86 <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00e      	b.n	80029f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d80a      	bhi.n	80029ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f000 f927 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e4:	4a06      	ldr	r2, [pc, #24]	@ (8002a00 <HAL_InitTick+0x5c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000003c 	.word	0x2000003c
 80029fc:	20000044 	.word	0x20000044
 8002a00:	20000040 	.word	0x20000040

08002a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_IncTick+0x1c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <HAL_IncTick+0x20>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a03      	ldr	r2, [pc, #12]	@ (8002a24 <HAL_IncTick+0x20>)
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr
 8002a20:	20000044 	.word	0x20000044
 8002a24:	200002c8 	.word	0x200002c8

08002a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b02      	ldr	r3, [pc, #8]	@ (8002a38 <HAL_GetTick+0x10>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	200002c8 	.word	0x200002c8

08002a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_GetTick>
 8002a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d005      	beq.n	8002a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_Delay+0x44>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a62:	bf00      	nop
 8002a64:	f7ff ffe0 	bl	8002a28 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d8f7      	bhi.n	8002a64 <HAL_Delay+0x28>
  {
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000044 	.word	0x20000044

08002a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab6:	4a04      	ldr	r2, [pc, #16]	@ (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	60d3      	str	r3, [r2, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4906      	ldr	r1, [pc, #24]	@ (8002b1c <__NVIC_EnableIRQ+0x34>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	e000e100 	.word	0xe000e100

08002b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	db0a      	blt.n	8002b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	490c      	ldr	r1, [pc, #48]	@ (8002b6c <__NVIC_SetPriority+0x4c>)
 8002b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	440b      	add	r3, r1
 8002b44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b48:	e00a      	b.n	8002b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4908      	ldr	r1, [pc, #32]	@ (8002b70 <__NVIC_SetPriority+0x50>)
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	3b04      	subs	r3, #4
 8002b58:	0112      	lsls	r2, r2, #4
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	761a      	strb	r2, [r3, #24]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	e000e100 	.word	0xe000e100
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	@ 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f1c3 0307 	rsb	r3, r3, #7
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	bf28      	it	cs
 8002b92:	2304      	movcs	r3, #4
 8002b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d902      	bls.n	8002ba4 <NVIC_EncodePriority+0x30>
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3b03      	subs	r3, #3
 8002ba2:	e000      	b.n	8002ba6 <NVIC_EncodePriority+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	4313      	orrs	r3, r2
         );
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff90 	bl	8002b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff2d 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c44:	f7ff ff42 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f7ff ff90 	bl	8002b74 <NVIC_EncodePriority>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff ff5f 	bl	8002b20 <__NVIC_SetPriority>
}
 8002c62:	bf00      	nop
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff35 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c7e:	bf00      	nop
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff ffa2 	bl	8002bd8 <SysTick_Config>
 8002c94:	4603      	mov	r3, r0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d008      	beq.n	8002cc8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e020      	b.n	8002d0a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 020e 	bic.w	r2, r2, #14
 8002cd6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d005      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	73fb      	strb	r3, [r7, #15]
 8002d36:	e051      	b.n	8002ddc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 020e 	bic.w	r2, r2, #14
 8002d46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	@ (8002de8 <HAL_DMA_Abort_IT+0xd4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d029      	beq.n	8002db6 <HAL_DMA_Abort_IT+0xa2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a21      	ldr	r2, [pc, #132]	@ (8002dec <HAL_DMA_Abort_IT+0xd8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d022      	beq.n	8002db2 <HAL_DMA_Abort_IT+0x9e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <HAL_DMA_Abort_IT+0xdc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01a      	beq.n	8002dac <HAL_DMA_Abort_IT+0x98>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_DMA_Abort_IT+0xe0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d012      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x92>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <HAL_DMA_Abort_IT+0xe4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00a      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x8c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dfc <HAL_DMA_Abort_IT+0xe8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d102      	bne.n	8002d9a <HAL_DMA_Abort_IT+0x86>
 8002d94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d98:	e00e      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002d9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d9e:	e00b      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002da0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002da4:	e008      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002da6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002daa:	e005      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002dac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002db0:	e002      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002db2:	2310      	movs	r3, #16
 8002db4:	e000      	b.n	8002db8 <HAL_DMA_Abort_IT+0xa4>
 8002db6:	2301      	movs	r3, #1
 8002db8:	4a11      	ldr	r2, [pc, #68]	@ (8002e00 <HAL_DMA_Abort_IT+0xec>)
 8002dba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    } 
  }
  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40020008 	.word	0x40020008
 8002dec:	4002001c 	.word	0x4002001c
 8002df0:	40020030 	.word	0x40020030
 8002df4:	40020044 	.word	0x40020044
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	4002006c 	.word	0x4002006c
 8002e00:	40020000 	.word	0x40020000

08002e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b08b      	sub	sp, #44	@ 0x2c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e12:	2300      	movs	r3, #0
 8002e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e16:	e169      	b.n	80030ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e18:	2201      	movs	r2, #1
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	f040 8158 	bne.w	80030e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a9a      	ldr	r2, [pc, #616]	@ (80030a4 <HAL_GPIO_Init+0x2a0>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d05e      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e40:	4a98      	ldr	r2, [pc, #608]	@ (80030a4 <HAL_GPIO_Init+0x2a0>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d875      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e46:	4a98      	ldr	r2, [pc, #608]	@ (80030a8 <HAL_GPIO_Init+0x2a4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d058      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e4c:	4a96      	ldr	r2, [pc, #600]	@ (80030a8 <HAL_GPIO_Init+0x2a4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d86f      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e52:	4a96      	ldr	r2, [pc, #600]	@ (80030ac <HAL_GPIO_Init+0x2a8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d052      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e58:	4a94      	ldr	r2, [pc, #592]	@ (80030ac <HAL_GPIO_Init+0x2a8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d869      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e5e:	4a94      	ldr	r2, [pc, #592]	@ (80030b0 <HAL_GPIO_Init+0x2ac>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d04c      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e64:	4a92      	ldr	r2, [pc, #584]	@ (80030b0 <HAL_GPIO_Init+0x2ac>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d863      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e6a:	4a92      	ldr	r2, [pc, #584]	@ (80030b4 <HAL_GPIO_Init+0x2b0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d046      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
 8002e70:	4a90      	ldr	r2, [pc, #576]	@ (80030b4 <HAL_GPIO_Init+0x2b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d85d      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e76:	2b12      	cmp	r3, #18
 8002e78:	d82a      	bhi.n	8002ed0 <HAL_GPIO_Init+0xcc>
 8002e7a:	2b12      	cmp	r3, #18
 8002e7c:	d859      	bhi.n	8002f32 <HAL_GPIO_Init+0x12e>
 8002e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <HAL_GPIO_Init+0x80>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002eff 	.word	0x08002eff
 8002e88:	08002ed9 	.word	0x08002ed9
 8002e8c:	08002eeb 	.word	0x08002eeb
 8002e90:	08002f2d 	.word	0x08002f2d
 8002e94:	08002f33 	.word	0x08002f33
 8002e98:	08002f33 	.word	0x08002f33
 8002e9c:	08002f33 	.word	0x08002f33
 8002ea0:	08002f33 	.word	0x08002f33
 8002ea4:	08002f33 	.word	0x08002f33
 8002ea8:	08002f33 	.word	0x08002f33
 8002eac:	08002f33 	.word	0x08002f33
 8002eb0:	08002f33 	.word	0x08002f33
 8002eb4:	08002f33 	.word	0x08002f33
 8002eb8:	08002f33 	.word	0x08002f33
 8002ebc:	08002f33 	.word	0x08002f33
 8002ec0:	08002f33 	.word	0x08002f33
 8002ec4:	08002f33 	.word	0x08002f33
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ef5 	.word	0x08002ef5
 8002ed0:	4a79      	ldr	r2, [pc, #484]	@ (80030b8 <HAL_GPIO_Init+0x2b4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ed6:	e02c      	b.n	8002f32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	623b      	str	r3, [r7, #32]
          break;
 8002ede:	e029      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	623b      	str	r3, [r7, #32]
          break;
 8002ee8:	e024      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	623b      	str	r3, [r7, #32]
          break;
 8002ef2:	e01f      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	623b      	str	r3, [r7, #32]
          break;
 8002efc:	e01a      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f06:	2304      	movs	r3, #4
 8002f08:	623b      	str	r3, [r7, #32]
          break;
 8002f0a:	e013      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f14:	2308      	movs	r3, #8
 8002f16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	611a      	str	r2, [r3, #16]
          break;
 8002f1e:	e009      	b.n	8002f34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f20:	2308      	movs	r3, #8
 8002f22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	615a      	str	r2, [r3, #20]
          break;
 8002f2a:	e003      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
          break;
 8002f30:	e000      	b.n	8002f34 <HAL_GPIO_Init+0x130>
          break;
 8002f32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2bff      	cmp	r3, #255	@ 0xff
 8002f38:	d801      	bhi.n	8002f3e <HAL_GPIO_Init+0x13a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	e001      	b.n	8002f42 <HAL_GPIO_Init+0x13e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2bff      	cmp	r3, #255	@ 0xff
 8002f48:	d802      	bhi.n	8002f50 <HAL_GPIO_Init+0x14c>
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	e002      	b.n	8002f56 <HAL_GPIO_Init+0x152>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	3b08      	subs	r3, #8
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	210f      	movs	r1, #15
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f70:	431a      	orrs	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80b1 	beq.w	80030e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f84:	4b4d      	ldr	r3, [pc, #308]	@ (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	4a4c      	ldr	r2, [pc, #304]	@ (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6193      	str	r3, [r2, #24]
 8002f90:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_GPIO_Init+0x2b8>)
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	60bb      	str	r3, [r7, #8]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f9c:	4a48      	ldr	r2, [pc, #288]	@ (80030c0 <HAL_GPIO_Init+0x2bc>)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	3302      	adds	r3, #2
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a40      	ldr	r2, [pc, #256]	@ (80030c4 <HAL_GPIO_Init+0x2c0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d013      	beq.n	8002ff0 <HAL_GPIO_Init+0x1ec>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3f      	ldr	r2, [pc, #252]	@ (80030c8 <HAL_GPIO_Init+0x2c4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00d      	beq.n	8002fec <HAL_GPIO_Init+0x1e8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a3e      	ldr	r2, [pc, #248]	@ (80030cc <HAL_GPIO_Init+0x2c8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d007      	beq.n	8002fe8 <HAL_GPIO_Init+0x1e4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a3d      	ldr	r2, [pc, #244]	@ (80030d0 <HAL_GPIO_Init+0x2cc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_GPIO_Init+0x1e0>
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e006      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fe4:	2304      	movs	r3, #4
 8002fe6:	e004      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e002      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_GPIO_Init+0x1ee>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff4:	f002 0203 	and.w	r2, r2, #3
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	4093      	lsls	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003002:	492f      	ldr	r1, [pc, #188]	@ (80030c0 <HAL_GPIO_Init+0x2bc>)
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3302      	adds	r3, #2
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d006      	beq.n	800302a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800301c:	4b2d      	ldr	r3, [pc, #180]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	492c      	ldr	r1, [pc, #176]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	4313      	orrs	r3, r2
 8003026:	608b      	str	r3, [r1, #8]
 8003028:	e006      	b.n	8003038 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800302a:	4b2a      	ldr	r3, [pc, #168]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	43db      	mvns	r3, r3
 8003032:	4928      	ldr	r1, [pc, #160]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003034:	4013      	ands	r3, r2
 8003036:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003044:	4b23      	ldr	r3, [pc, #140]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	4922      	ldr	r1, [pc, #136]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	60cb      	str	r3, [r1, #12]
 8003050:	e006      	b.n	8003060 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	43db      	mvns	r3, r3
 800305a:	491e      	ldr	r1, [pc, #120]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800305c:	4013      	ands	r3, r2
 800305e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d006      	beq.n	800307a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4918      	ldr	r1, [pc, #96]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e006      	b.n	8003088 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800307a:	4b16      	ldr	r3, [pc, #88]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	43db      	mvns	r3, r3
 8003082:	4914      	ldr	r1, [pc, #80]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003084:	4013      	ands	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d021      	beq.n	80030d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003094:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	490e      	ldr	r1, [pc, #56]	@ (80030d4 <HAL_GPIO_Init+0x2d0>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	e021      	b.n	80030e6 <HAL_GPIO_Init+0x2e2>
 80030a2:	bf00      	nop
 80030a4:	10320000 	.word	0x10320000
 80030a8:	10310000 	.word	0x10310000
 80030ac:	10220000 	.word	0x10220000
 80030b0:	10210000 	.word	0x10210000
 80030b4:	10120000 	.word	0x10120000
 80030b8:	10110000 	.word	0x10110000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40010800 	.word	0x40010800
 80030c8:	40010c00 	.word	0x40010c00
 80030cc:	40011000 	.word	0x40011000
 80030d0:	40011400 	.word	0x40011400
 80030d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_GPIO_Init+0x304>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4909      	ldr	r1, [pc, #36]	@ (8003108 <HAL_GPIO_Init+0x304>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	3301      	adds	r3, #1
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	fa22 f303 	lsr.w	r3, r2, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f47f ae8e 	bne.w	8002e18 <HAL_GPIO_Init+0x14>
  }
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	372c      	adds	r7, #44	@ 0x2c
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e001      	b.n	800312e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]
 8003146:	4613      	mov	r3, r2
 8003148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314a:	787b      	ldrb	r3, [r7, #1]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003156:	e003      	b.n	8003160 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	041a      	lsls	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003182:	4a05      	ldr	r2, [pc, #20]	@ (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f806 	bl	800319c <HAL_GPIO_EXTI_Callback>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e12b      	b.n	800341a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff f9f8 	bl	80025cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2224      	movs	r2, #36	@ 0x24
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0201 	bic.w	r2, r2, #1
 80031f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003214:	f001 f832 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8003218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4a81      	ldr	r2, [pc, #516]	@ (8003424 <HAL_I2C_Init+0x274>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d807      	bhi.n	8003234 <HAL_I2C_Init+0x84>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a80      	ldr	r2, [pc, #512]	@ (8003428 <HAL_I2C_Init+0x278>)
 8003228:	4293      	cmp	r3, r2
 800322a:	bf94      	ite	ls
 800322c:	2301      	movls	r3, #1
 800322e:	2300      	movhi	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e006      	b.n	8003242 <HAL_I2C_Init+0x92>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4a7d      	ldr	r2, [pc, #500]	@ (800342c <HAL_I2C_Init+0x27c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	bf94      	ite	ls
 800323c:	2301      	movls	r3, #1
 800323e:	2300      	movhi	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0e7      	b.n	800341a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a78      	ldr	r2, [pc, #480]	@ (8003430 <HAL_I2C_Init+0x280>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0c9b      	lsrs	r3, r3, #18
 8003254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4a6a      	ldr	r2, [pc, #424]	@ (8003424 <HAL_I2C_Init+0x274>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d802      	bhi.n	8003284 <HAL_I2C_Init+0xd4>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	3301      	adds	r3, #1
 8003282:	e009      	b.n	8003298 <HAL_I2C_Init+0xe8>
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	4a69      	ldr	r2, [pc, #420]	@ (8003434 <HAL_I2C_Init+0x284>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	3301      	adds	r3, #1
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80032aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	495c      	ldr	r1, [pc, #368]	@ (8003424 <HAL_I2C_Init+0x274>)
 80032b4:	428b      	cmp	r3, r1
 80032b6:	d819      	bhi.n	80032ec <HAL_I2C_Init+0x13c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e59      	subs	r1, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c6:	1c59      	adds	r1, r3, #1
 80032c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032cc:	400b      	ands	r3, r1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_I2C_Init+0x138>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1e59      	subs	r1, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e0:	3301      	adds	r3, #1
 80032e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e6:	e051      	b.n	800338c <HAL_I2C_Init+0x1dc>
 80032e8:	2304      	movs	r3, #4
 80032ea:	e04f      	b.n	800338c <HAL_I2C_Init+0x1dc>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d111      	bne.n	8003318 <HAL_I2C_Init+0x168>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	440b      	add	r3, r1
 8003302:	fbb0 f3f3 	udiv	r3, r0, r3
 8003306:	3301      	adds	r3, #1
 8003308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	e012      	b.n	800333e <HAL_I2C_Init+0x18e>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1e58      	subs	r0, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6859      	ldr	r1, [r3, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	0099      	lsls	r1, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	fbb0 f3f3 	udiv	r3, r0, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Init+0x196>
 8003342:	2301      	movs	r3, #1
 8003344:	e022      	b.n	800338c <HAL_I2C_Init+0x1dc>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10e      	bne.n	800336c <HAL_I2C_Init+0x1bc>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1e58      	subs	r0, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	440b      	add	r3, r1
 800335c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800336a:	e00f      	b.n	800338c <HAL_I2C_Init+0x1dc>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e58      	subs	r0, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	0099      	lsls	r1, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003382:	3301      	adds	r3, #1
 8003384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003388:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	6809      	ldr	r1, [r1, #0]
 8003390:	4313      	orrs	r3, r2
 8003392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6911      	ldr	r1, [r2, #16]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	4311      	orrs	r1, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	000186a0 	.word	0x000186a0
 8003428:	001e847f 	.word	0x001e847f
 800342c:	003d08ff 	.word	0x003d08ff
 8003430:	431bde83 	.word	0x431bde83
 8003434:	10624dd3 	.word	0x10624dd3

08003438 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	461a      	mov	r2, r3
 8003444:	460b      	mov	r3, r1
 8003446:	817b      	strh	r3, [r7, #10]
 8003448:	4613      	mov	r3, r2
 800344a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800344c:	f7ff faec 	bl	8002a28 <HAL_GetTick>
 8003450:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	f040 80e0 	bne.w	8003620 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2319      	movs	r3, #25
 8003466:	2201      	movs	r2, #1
 8003468:	4970      	ldr	r1, [pc, #448]	@ (800362c <HAL_I2C_Master_Transmit+0x1f4>)
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f964 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003476:	2302      	movs	r3, #2
 8003478:	e0d3      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_I2C_Master_Transmit+0x50>
 8003484:	2302      	movs	r3, #2
 8003486:	e0cc      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d007      	beq.n	80034ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f042 0201 	orr.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	@ 0x21
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2210      	movs	r2, #16
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	893a      	ldrh	r2, [r7, #8]
 80034de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a50      	ldr	r2, [pc, #320]	@ (8003630 <HAL_I2C_Master_Transmit+0x1f8>)
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034f0:	8979      	ldrh	r1, [r7, #10]
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6a3a      	ldr	r2, [r7, #32]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f89c 	bl	8003634 <I2C_MasterRequestWrite>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e08d      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800351c:	e066      	b.n	80035ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	6a39      	ldr	r1, [r7, #32]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 fa22 	bl	800396c <I2C_WaitOnTXEFlagUntilTimeout>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00d      	beq.n	800354a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b04      	cmp	r3, #4
 8003534:	d107      	bne.n	8003546 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	781a      	ldrb	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b04      	cmp	r3, #4
 8003586:	d11b      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x188>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	2b00      	cmp	r3, #0
 800358e:	d017      	beq.n	80035c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	781a      	ldrb	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	6a39      	ldr	r1, [r7, #32]
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 fa19 	bl	80039fc <I2C_WaitOnBTFFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d107      	bne.n	80035e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e01a      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d194      	bne.n	800351e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	e000      	b.n	8003622 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
  }
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	00100002 	.word	0x00100002
 8003630:	ffff0000 	.word	0xffff0000

08003634 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b088      	sub	sp, #32
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	607a      	str	r2, [r7, #4]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	460b      	mov	r3, r1
 8003642:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003648:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d006      	beq.n	800365e <I2C_MasterRequestWrite+0x2a>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d003      	beq.n	800365e <I2C_MasterRequestWrite+0x2a>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800365c:	d108      	bne.n	8003670 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e00b      	b.n	8003688 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003674:	2b12      	cmp	r3, #18
 8003676:	d107      	bne.n	8003688 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f84f 	bl	8003738 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00d      	beq.n	80036bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ae:	d103      	bne.n	80036b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e035      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036c4:	d108      	bne.n	80036d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036c6:	897b      	ldrh	r3, [r7, #10]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	461a      	mov	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036d4:	611a      	str	r2, [r3, #16]
 80036d6:	e01b      	b.n	8003710 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	11db      	asrs	r3, r3, #7
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0306 	and.w	r3, r3, #6
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f063 030f 	orn	r3, r3, #15
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	490e      	ldr	r1, [pc, #56]	@ (8003730 <I2C_MasterRequestWrite+0xfc>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f898 	bl	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e010      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003706:	897b      	ldrh	r3, [r7, #10]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4907      	ldr	r1, [pc, #28]	@ (8003734 <I2C_MasterRequestWrite+0x100>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 f888 	bl	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	00010008 	.word	0x00010008
 8003734:	00010002 	.word	0x00010002

08003738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003748:	e048      	b.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d044      	beq.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7ff f969 	bl	8002a28 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d302      	bcc.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d139      	bne.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	0c1b      	lsrs	r3, r3, #16
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d10d      	bne.n	800378e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	695b      	ldr	r3, [r3, #20]
 8003778:	43da      	mvns	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4013      	ands	r3, r2
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	461a      	mov	r2, r3
 800378c:	e00c      	b.n	80037a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	43da      	mvns	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d116      	bne.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e023      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d10d      	bne.n	8003802 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	43da      	mvns	r2, r3
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	4013      	ands	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	e00c      	b.n	800381c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	43da      	mvns	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	d093      	beq.n	800374a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800383a:	e071      	b.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384a:	d123      	bne.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	f043 0204 	orr.w	r2, r3, #4
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e067      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d041      	beq.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389c:	f7ff f8c4 	bl	8002a28 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d302      	bcc.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d136      	bne.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10c      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e00b      	b.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	f043 0220 	orr.w	r2, r3, #32
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e021      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	0c1b      	lsrs	r3, r3, #16
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10c      	bne.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e00b      	b.n	800395c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	43da      	mvns	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4013      	ands	r3, r2
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	bf14      	ite	ne
 8003956:	2301      	movne	r3, #1
 8003958:	2300      	moveq	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	f47f af6d 	bne.w	800383c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003978:	e034      	b.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f886 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e034      	b.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d028      	beq.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003992:	f7ff f849 	bl	8002a28 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d302      	bcc.n	80039a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d11d      	bne.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b2:	2b80      	cmp	r3, #128	@ 0x80
 80039b4:	d016      	beq.n	80039e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e007      	b.n	80039f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ee:	2b80      	cmp	r3, #128	@ 0x80
 80039f0:	d1c3      	bne.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a08:	e034      	b.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f83e 	bl	8003a8c <I2C_IsAcknowledgeFailed>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e034      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d028      	beq.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7ff f801 	bl	8002a28 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d11d      	bne.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d016      	beq.n	8003a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a60:	f043 0220 	orr.w	r2, r3, #32
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e007      	b.n	8003a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d1c3      	bne.n	8003a0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d11b      	bne.n	8003adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0204 	orr.w	r2, r3, #4
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e272      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 8087 	beq.w	8003c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b08:	4b92      	ldr	r3, [pc, #584]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f003 030c 	and.w	r3, r3, #12
 8003b10:	2b04      	cmp	r3, #4
 8003b12:	d00c      	beq.n	8003b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b14:	4b8f      	ldr	r3, [pc, #572]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 030c 	and.w	r3, r3, #12
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d112      	bne.n	8003b46 <HAL_RCC_OscConfig+0x5e>
 8003b20:	4b8c      	ldr	r3, [pc, #560]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b2c:	d10b      	bne.n	8003b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b2e:	4b89      	ldr	r3, [pc, #548]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d06c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x12c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d168      	bne.n	8003c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e24c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4e:	d106      	bne.n	8003b5e <HAL_RCC_OscConfig+0x76>
 8003b50:	4b80      	ldr	r3, [pc, #512]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a7f      	ldr	r2, [pc, #508]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e02e      	b.n	8003bbc <HAL_RCC_OscConfig+0xd4>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x98>
 8003b66:	4b7b      	ldr	r3, [pc, #492]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a7a      	ldr	r2, [pc, #488]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b78      	ldr	r3, [pc, #480]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a77      	ldr	r2, [pc, #476]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xd4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0xbc>
 8003b8a:	4b72      	ldr	r3, [pc, #456]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a71      	ldr	r2, [pc, #452]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b6f      	ldr	r3, [pc, #444]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xd4>
 8003ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b68      	ldr	r3, [pc, #416]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a67      	ldr	r2, [pc, #412]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe ff30 	bl	8002a28 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe ff2c 	bl	8002a28 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	@ 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e200      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b5d      	ldr	r3, [pc, #372]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xe4>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe ff1c 	bl	8002a28 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe ff18 	bl	8002a28 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	@ 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1ec      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	4b53      	ldr	r3, [pc, #332]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x10c>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c22:	4b4c      	ldr	r3, [pc, #304]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c2e:	4b49      	ldr	r3, [pc, #292]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d11c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x18c>
 8003c3a:	4b46      	ldr	r3, [pc, #280]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	4b43      	ldr	r3, [pc, #268]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x176>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e1c0      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4939      	ldr	r1, [pc, #228]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	e03a      	b.n	8003cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	4b36      	ldr	r3, [pc, #216]	@ (8003d58 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c82:	f7fe fed1 	bl	8002a28 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fecd 	bl	8002a28 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e1a1      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4927      	ldr	r1, [pc, #156]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]
 8003cbc:	e015      	b.n	8003cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe feb0 	bl	8002a28 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ccc:	f7fe feac 	bl	8002a28 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e180      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d03a      	beq.n	8003d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d019      	beq.n	8003d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	4b17      	ldr	r3, [pc, #92]	@ (8003d5c <HAL_RCC_OscConfig+0x274>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fe fe90 	bl	8002a28 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe fe8c 	bl	8002a28 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e160      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f000 face 	bl	80042cc <RCC_Delay>
 8003d30:	e01c      	b.n	8003d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <HAL_RCC_OscConfig+0x274>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fe fe76 	bl	8002a28 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3e:	e00f      	b.n	8003d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d40:	f7fe fe72 	bl	8002a28 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d908      	bls.n	8003d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e146      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	42420000 	.word	0x42420000
 8003d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d60:	4b92      	ldr	r3, [pc, #584]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1e9      	bne.n	8003d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 80a6 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7e:	4b8b      	ldr	r3, [pc, #556]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8a:	4b88      	ldr	r3, [pc, #544]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4a87      	ldr	r2, [pc, #540]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d94:	61d3      	str	r3, [r2, #28]
 8003d96:	4b85      	ldr	r3, [pc, #532]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b82      	ldr	r3, [pc, #520]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d118      	bne.n	8003de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7e      	ldr	r2, [pc, #504]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7fe fe33 	bl	8002a28 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fe fe2f 	bl	8002a28 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	@ 0x64
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e103      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd8:	4b75      	ldr	r3, [pc, #468]	@ (8003fb0 <HAL_RCC_OscConfig+0x4c8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x312>
 8003dec:	4b6f      	ldr	r3, [pc, #444]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a6e      	ldr	r2, [pc, #440]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	e02d      	b.n	8003e56 <HAL_RCC_OscConfig+0x36e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x334>
 8003e02:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a69      	ldr	r2, [pc, #420]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	f023 0301 	bic.w	r3, r3, #1
 8003e0c:	6213      	str	r3, [r2, #32]
 8003e0e:	4b67      	ldr	r3, [pc, #412]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4a66      	ldr	r2, [pc, #408]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	f023 0304 	bic.w	r3, r3, #4
 8003e18:	6213      	str	r3, [r2, #32]
 8003e1a:	e01c      	b.n	8003e56 <HAL_RCC_OscConfig+0x36e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d10c      	bne.n	8003e3e <HAL_RCC_OscConfig+0x356>
 8003e24:	4b61      	ldr	r3, [pc, #388]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	4a60      	ldr	r2, [pc, #384]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e2a:	f043 0304 	orr.w	r3, r3, #4
 8003e2e:	6213      	str	r3, [r2, #32]
 8003e30:	4b5e      	ldr	r3, [pc, #376]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a5d      	ldr	r2, [pc, #372]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	6213      	str	r3, [r2, #32]
 8003e3c:	e00b      	b.n	8003e56 <HAL_RCC_OscConfig+0x36e>
 8003e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	4a5a      	ldr	r2, [pc, #360]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6213      	str	r3, [r2, #32]
 8003e4a:	4b58      	ldr	r3, [pc, #352]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	4a57      	ldr	r2, [pc, #348]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d015      	beq.n	8003e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e5e:	f7fe fde3 	bl	8002a28 <HAL_GetTick>
 8003e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e66:	f7fe fddf 	bl	8002a28 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0b1      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ee      	beq.n	8003e66 <HAL_RCC_OscConfig+0x37e>
 8003e88:	e014      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e8a:	f7fe fdcd 	bl	8002a28 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7fe fdc9 	bl	8002a28 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e09b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea8:	4b40      	ldr	r3, [pc, #256]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1ee      	bne.n	8003e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d105      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eba:	4b3c      	ldr	r3, [pc, #240]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 8087 	beq.w	8003fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ed0:	4b36      	ldr	r3, [pc, #216]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 030c 	and.w	r3, r3, #12
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d061      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d146      	bne.n	8003f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b33      	ldr	r3, [pc, #204]	@ (8003fb4 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eea:	f7fe fd9d 	bl	8002a28 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef2:	f7fe fd99 	bl	8002a28 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e06d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f04:	4b29      	ldr	r3, [pc, #164]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1f0      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f18:	d108      	bne.n	8003f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	4921      	ldr	r1, [pc, #132]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a19      	ldr	r1, [r3, #32]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	491b      	ldr	r1, [pc, #108]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f44:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb4 <HAL_RCC_OscConfig+0x4cc>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fd6d 	bl	8002a28 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fe fd69 	bl	8002a28 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e03d      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f64:	4b11      	ldr	r3, [pc, #68]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCC_OscConfig+0x46a>
 8003f70:	e035      	b.n	8003fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f72:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fe fd56 	bl	8002a28 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f80:	f7fe fd52 	bl	8002a28 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e026      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x498>
 8003f9e:	e01e      	b.n	8003fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e019      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	40007000 	.word	0x40007000
 8003fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_RCC_OscConfig+0x500>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d106      	bne.n	8003fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000

08003fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0d0      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d910      	bls.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b67      	ldr	r3, [pc, #412]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	4965      	ldr	r1, [pc, #404]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800401e:	4b63      	ldr	r3, [pc, #396]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	429a      	cmp	r2, r3
 800402a:	d001      	beq.n	8004030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0b8      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d020      	beq.n	800407e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004048:	4b59      	ldr	r3, [pc, #356]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a58      	ldr	r2, [pc, #352]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800404e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004060:	4b53      	ldr	r3, [pc, #332]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a52      	ldr	r2, [pc, #328]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800406a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800406c:	4b50      	ldr	r3, [pc, #320]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	494d      	ldr	r1, [pc, #308]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	4313      	orrs	r3, r2
 800407c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d040      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b47      	ldr	r3, [pc, #284]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d115      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e07f      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b41      	ldr	r3, [pc, #260]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e073      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3d      	ldr	r3, [pc, #244]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06b      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b39      	ldr	r3, [pc, #228]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4936      	ldr	r1, [pc, #216]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fe fca4 	bl	8002a28 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe fca0 	bl	8002a28 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e053      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2d      	ldr	r3, [pc, #180]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b27      	ldr	r3, [pc, #156]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d210      	bcs.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 0207 	bic.w	r2, r3, #7
 8004122:	4922      	ldr	r1, [pc, #136]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	4313      	orrs	r3, r2
 8004128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412a:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d001      	beq.n	800413c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e032      	b.n	80041a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004148:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4916      	ldr	r1, [pc, #88]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004166:	4b12      	ldr	r3, [pc, #72]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	490e      	ldr	r1, [pc, #56]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800417a:	f000 f821 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800417e:	4602      	mov	r2, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	490a      	ldr	r1, [pc, #40]	@ (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	5ccb      	ldrb	r3, [r1, r3]
 800418e:	fa22 f303 	lsr.w	r3, r2, r3
 8004192:	4a09      	ldr	r2, [pc, #36]	@ (80041b8 <HAL_RCC_ClockConfig+0x1cc>)
 8004194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004196:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <HAL_RCC_ClockConfig+0x1d0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f7fe fc02 	bl	80029a4 <HAL_InitTick>

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08006218 	.word	0x08006218
 80041b8:	2000003c 	.word	0x2000003c
 80041bc:	20000040 	.word	0x20000040

080041c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	2300      	movs	r3, #0
 80041d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041da:	4b1e      	ldr	r3, [pc, #120]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x94>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x30>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x36>
 80041ee:	e027      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041f0:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x98>)
 80041f2:	613b      	str	r3, [r7, #16]
      break;
 80041f4:	e027      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	0c9b      	lsrs	r3, r3, #18
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	4a17      	ldr	r2, [pc, #92]	@ (800425c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004200:	5cd3      	ldrb	r3, [r2, r3]
 8004202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800420e:	4b11      	ldr	r3, [pc, #68]	@ (8004254 <HAL_RCC_GetSysClockFreq+0x94>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	0c5b      	lsrs	r3, r3, #17
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	4a11      	ldr	r2, [pc, #68]	@ (8004260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800421a:	5cd3      	ldrb	r3, [r2, r3]
 800421c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x98>)
 8004222:	fb03 f202 	mul.w	r2, r3, r2
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e004      	b.n	800423a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a0c      	ldr	r2, [pc, #48]	@ (8004264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004234:	fb02 f303 	mul.w	r3, r2, r3
 8004238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	613b      	str	r3, [r7, #16]
      break;
 800423e:	e002      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCC_GetSysClockFreq+0x98>)
 8004242:	613b      	str	r3, [r7, #16]
      break;
 8004244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004246:	693b      	ldr	r3, [r7, #16]
}
 8004248:	4618      	mov	r0, r3
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	007a1200 	.word	0x007a1200
 800425c:	08006230 	.word	0x08006230
 8004260:	08006240 	.word	0x08006240
 8004264:	003d0900 	.word	0x003d0900

08004268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800426c:	4b02      	ldr	r3, [pc, #8]	@ (8004278 <HAL_RCC_GetHCLKFreq+0x10>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr
 8004278:	2000003c 	.word	0x2000003c

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004280:	f7ff fff2 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	08006228 	.word	0x08006228

080042a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042a8:	f7ff ffde 	bl	8004268 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	@ (80042c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0adb      	lsrs	r3, r3, #11
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	@ (80042c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	08006228 	.word	0x08006228

080042cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004300 <RCC_Delay+0x34>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0a      	ldr	r2, [pc, #40]	@ (8004304 <RCC_Delay+0x38>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0a5b      	lsrs	r3, r3, #9
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042e8:	bf00      	nop
  }
  while (Delay --);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	60fa      	str	r2, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f9      	bne.n	80042e8 <RCC_Delay+0x1c>
}
 80042f4:	bf00      	nop
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	2000003c 	.word	0x2000003c
 8004304:	10624dd3 	.word	0x10624dd3

08004308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e041      	b.n	800439e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fe f99c 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4619      	mov	r1, r3
 8004346:	4610      	mov	r0, r2
 8004348:	f000 fa5c 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e03a      	b.n	8004436 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a18      	ldr	r2, [pc, #96]	@ (8004440 <HAL_TIM_Base_Start_IT+0x98>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x58>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ea:	d009      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x58>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a14      	ldr	r2, [pc, #80]	@ (8004444 <HAL_TIM_Base_Start_IT+0x9c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x58>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a13      	ldr	r2, [pc, #76]	@ (8004448 <HAL_TIM_Base_Start_IT+0xa0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2b06      	cmp	r3, #6
 8004410:	d010      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004422:	e007      	b.n	8004434 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40000800 	.word	0x40000800

0800444c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d020      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0202 	mvn.w	r2, #2
 8004480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f998 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f98b 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f99a 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d020      	beq.n	80044fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0204 	mvn.w	r2, #4
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2202      	movs	r2, #2
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f972 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f965 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f974 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d020      	beq.n	8004548 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01b      	beq.n	8004548 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0208 	mvn.w	r2, #8
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2204      	movs	r2, #4
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f94c 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f93f 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f94e 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d020      	beq.n	8004594 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0210 	mvn.w	r2, #16
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2208      	movs	r2, #8
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f926 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f919 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f928 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0201 	mvn.w	r2, #1
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fec4 	bl	8002340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa7f 	bl	8004ada <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8f8 	bl	80047f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0220 	mvn.w	r2, #32
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fa52 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	2300      	movs	r3, #0
 8004638:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_TIM_ConfigClockSource+0x1c>
 8004644:	2302      	movs	r3, #2
 8004646:	e0b4      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x186>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800466e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004680:	d03e      	beq.n	8004700 <HAL_TIM_ConfigClockSource+0xd4>
 8004682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004686:	f200 8087 	bhi.w	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468e:	f000 8086 	beq.w	800479e <HAL_TIM_ConfigClockSource+0x172>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004696:	d87f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b70      	cmp	r3, #112	@ 0x70
 800469a:	d01a      	beq.n	80046d2 <HAL_TIM_ConfigClockSource+0xa6>
 800469c:	2b70      	cmp	r3, #112	@ 0x70
 800469e:	d87b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b60      	cmp	r3, #96	@ 0x60
 80046a2:	d050      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x11a>
 80046a4:	2b60      	cmp	r3, #96	@ 0x60
 80046a6:	d877      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b50      	cmp	r3, #80	@ 0x50
 80046aa:	d03c      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0xfa>
 80046ac:	2b50      	cmp	r3, #80	@ 0x50
 80046ae:	d873      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b40      	cmp	r3, #64	@ 0x40
 80046b2:	d058      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x13a>
 80046b4:	2b40      	cmp	r3, #64	@ 0x40
 80046b6:	d86f      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b30      	cmp	r3, #48	@ 0x30
 80046ba:	d064      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b30      	cmp	r3, #48	@ 0x30
 80046be:	d86b      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d060      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d867      	bhi.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d05c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d05a      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	e062      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046e2:	f000 f974 	bl	80049ce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	609a      	str	r2, [r3, #8]
      break;
 80046fe:	e04f      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004710:	f000 f95d 	bl	80049ce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004722:	609a      	str	r2, [r3, #8]
      break;
 8004724:	e03c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	461a      	mov	r2, r3
 8004734:	f000 f8d4 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2150      	movs	r1, #80	@ 0x50
 800473e:	4618      	mov	r0, r3
 8004740:	f000 f92b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004744:	e02c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	461a      	mov	r2, r3
 8004754:	f000 f8f2 	bl	800493c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2160      	movs	r1, #96	@ 0x60
 800475e:	4618      	mov	r0, r3
 8004760:	f000 f91b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004764:	e01c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	461a      	mov	r2, r3
 8004774:	f000 f8b4 	bl	80048e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2140      	movs	r1, #64	@ 0x40
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f90b 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004784:	e00c      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f000 f902 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 8004796:	e003      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e000      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800479e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a2f      	ldr	r2, [pc, #188]	@ (80048d4 <TIM_Base_SetConfig+0xd0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2c      	ldr	r2, [pc, #176]	@ (80048d8 <TIM_Base_SetConfig+0xd4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a2b      	ldr	r2, [pc, #172]	@ (80048dc <TIM_Base_SetConfig+0xd8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <TIM_Base_SetConfig+0xd0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a1f      	ldr	r2, [pc, #124]	@ (80048d8 <TIM_Base_SetConfig+0xd4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <TIM_Base_SetConfig+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0d      	ldr	r2, [pc, #52]	@ (80048d4 <TIM_Base_SetConfig+0xd0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d103      	bne.n	80048ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f023 0201 	bic.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]
  }
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40000400 	.word	0x40000400
 80048dc:	40000800 	.word	0x40000800

080048e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	f023 0201 	bic.w	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800490a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 030a 	bic.w	r3, r3, #10
 800491c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr

0800493c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f023 0210 	bic.w	r2, r3, #16
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	031b      	lsls	r3, r3, #12
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004978:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	621a      	str	r2, [r3, #32]
}
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f043 0307 	orr.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
 80049da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	021a      	lsls	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	609a      	str	r2, [r3, #8]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e046      	b.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00e      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a70:	d009      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a12      	ldr	r2, [pc, #72]	@ (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d004      	beq.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a10      	ldr	r2, [pc, #64]	@ (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10c      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	40000400 	.word	0x40000400
 8004ac4:	40000800 	.word	0x40000800

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e042      	b.n	8004b84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd fdce 	bl	80026b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	@ 0x24
 8004b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fdb7 	bl	80056a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695a      	ldr	r2, [r3, #20]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b08a      	sub	sp, #40	@ 0x28
 8004b90:	af02      	add	r7, sp, #8
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d175      	bne.n	8004c98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_UART_Transmit+0x2c>
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e06e      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2221      	movs	r2, #33	@ 0x21
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fd ff2d 	bl	8002a28 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be4:	d108      	bne.n	8004bf8 <HAL_UART_Transmit+0x6c>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	e003      	b.n	8004c00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c00:	e02e      	b.n	8004c60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	2180      	movs	r1, #128	@ 0x80
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 fb1c 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e03a      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	61bb      	str	r3, [r7, #24]
 8004c40:	e007      	b.n	8004c52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1cb      	bne.n	8004c02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2200      	movs	r2, #0
 8004c72:	2140      	movs	r1, #64	@ 0x40
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fae8 	bl	800524a <UART_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d005      	beq.n	8004c8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c94:	2300      	movs	r3, #0
 8004c96:	e000      	b.n	8004c9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c98:	2302      	movs	r3, #2
  }
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	4613      	mov	r3, r2
 8004cae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d112      	bne.n	8004ce2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_UART_Receive_IT+0x26>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e00b      	b.n	8004ce4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fb0f 	bl	80052fc <UART_Start_Receive_IT>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e000      	b.n	8004ce4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b0ba      	sub	sp, #232	@ 0xe8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <HAL_UART_IRQHandler+0x66>
 8004d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 fbec 	bl	8005528 <UART_Receive_IT>
      return;
 8004d50:	e25b      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80de 	beq.w	8004f18 <HAL_UART_IRQHandler+0x22c>
 8004d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d6c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80d1 	beq.w	8004f18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_UART_IRQHandler+0xae>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00b      	beq.n	8004dbe <HAL_UART_IRQHandler+0xd2>
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f043 0202 	orr.w	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_UART_IRQHandler+0xf6>
 8004dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d005      	beq.n	8004de2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f043 0204 	orr.w	r2, r3, #4
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d011      	beq.n	8004e12 <HAL_UART_IRQHandler+0x126>
 8004dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d005      	beq.n	8004e12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0a:	f043 0208 	orr.w	r2, r3, #8
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 81f2 	beq.w	8005200 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_UART_IRQHandler+0x14e>
 8004e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb77 	bl	8005528 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <HAL_UART_IRQHandler+0x17a>
 8004e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d04f      	beq.n	8004f06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fa81 	bl	800536e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d041      	beq.n	8004efe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e90:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3314      	adds	r3, #20
 8004ea2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004ea6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004eb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1d9      	bne.n	8004e7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d013      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	4a7e      	ldr	r2, [pc, #504]	@ (80050cc <HAL_UART_IRQHandler+0x3e0>)
 8004ed4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fd ff1a 	bl	8002d14 <HAL_DMA_Abort_IT>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	e00e      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f993 	bl	8005222 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	e00a      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f98f 	bl	8005222 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	e006      	b.n	8004f14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f98b 	bl	8005222 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004f12:	e175      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f14:	bf00      	nop
    return;
 8004f16:	e173      	b.n	8005200 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	f040 814f 	bne.w	80051c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 8148 	beq.w	80051c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f34:	f003 0310 	and.w	r3, r3, #16
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8141 	beq.w	80051c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	60bb      	str	r3, [r7, #8]
 8004f52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80b6 	beq.w	80050d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8145 	beq.w	8005204 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f82:	429a      	cmp	r2, r3
 8004f84:	f080 813e 	bcs.w	8005204 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	f000 8088 	beq.w	80050ac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004fb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004fc8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fcc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fd4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1d9      	bne.n	8004f9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ff8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3314      	adds	r3, #20
 8005008:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800500c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005010:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005014:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005018:	e841 2300 	strex	r3, r2, [r1]
 800501c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800501e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e1      	bne.n	8004fe8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3314      	adds	r3, #20
 800502a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005034:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800503a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3314      	adds	r3, #20
 8005044:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005048:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800504a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800504e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005050:	e841 2300 	strex	r3, r2, [r1]
 8005054:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e3      	bne.n	8005024 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800507a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507c:	f023 0310 	bic.w	r3, r3, #16
 8005080:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800508e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005090:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800509c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e3      	bne.n	800506a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fd fdf9 	bl	8002c9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4619      	mov	r1, r3
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f8b6 	bl	8005234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050c8:	e09c      	b.n	8005204 <HAL_UART_IRQHandler+0x518>
 80050ca:	bf00      	nop
 80050cc:	08005433 	.word	0x08005433
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 808e 	beq.w	8005208 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8089 	beq.w	8005208 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800511a:	647a      	str	r2, [r7, #68]	@ 0x44
 800511c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005120:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e3      	bne.n	80050f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3314      	adds	r3, #20
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	623b      	str	r3, [r7, #32]
   return(result);
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3314      	adds	r3, #20
 800514e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005152:	633a      	str	r2, [r7, #48]	@ 0x30
 8005154:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e3      	bne.n	800512e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	330c      	adds	r3, #12
 800517a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	60fb      	str	r3, [r7, #12]
   return(result);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005198:	61fa      	str	r2, [r7, #28]
 800519a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	69b9      	ldr	r1, [r7, #24]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	617b      	str	r3, [r7, #20]
   return(result);
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e3      	bne.n	8005174 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f83b 	bl	8005234 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051be:	e023      	b.n	8005208 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_UART_IRQHandler+0x4f4>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f93e 	bl	800545a <UART_Transmit_IT>
    return;
 80051de:	e014      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00e      	beq.n	800520a <HAL_UART_IRQHandler+0x51e>
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d008      	beq.n	800520a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f97d 	bl	80054f8 <UART_EndTransmit_IT>
    return;
 80051fe:	e004      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
    return;
 8005200:	bf00      	nop
 8005202:	e002      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
      return;
 8005204:	bf00      	nop
 8005206:	e000      	b.n	800520a <HAL_UART_IRQHandler+0x51e>
      return;
 8005208:	bf00      	nop
  }
}
 800520a:	37e8      	adds	r7, #232	@ 0xe8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b086      	sub	sp, #24
 800524e:	af00      	add	r7, sp, #0
 8005250:	60f8      	str	r0, [r7, #12]
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	603b      	str	r3, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525a:	e03b      	b.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d037      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005264:	f7fd fbe0 	bl	8002a28 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	6a3a      	ldr	r2, [r7, #32]
 8005270:	429a      	cmp	r2, r3
 8005272:	d302      	bcc.n	800527a <UART_WaitOnFlagUntilTimeout+0x30>
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e03a      	b.n	80052f4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b80      	cmp	r3, #128	@ 0x80
 8005290:	d020      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b40      	cmp	r3, #64	@ 0x40
 8005296:	d01d      	beq.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d116      	bne.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	617b      	str	r3, [r7, #20]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f856 	bl	800536e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2208      	movs	r2, #8
 80052c6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e00f      	b.n	80052f4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4013      	ands	r3, r2
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d0b4      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	88fa      	ldrh	r2, [r7, #6]
 8005314:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2222      	movs	r2, #34	@ 0x22
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005340:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0220 	orr.w	r2, r2, #32
 8005360:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr

0800536e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800536e:	b480      	push	{r7}
 8005370:	b095      	sub	sp, #84	@ 0x54
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800538c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	330c      	adds	r3, #12
 8005394:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005396:	643a      	str	r2, [r7, #64]	@ 0x40
 8005398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800539c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3314      	adds	r3, #20
 80053b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	f023 0301 	bic.w	r3, r3, #1
 80053c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3314      	adds	r3, #20
 80053c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d119      	bne.n	800541a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	e853 3f00 	ldrex	r3, [r3]
 80053f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f023 0310 	bic.w	r3, r3, #16
 80053fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005406:	61ba      	str	r2, [r7, #24]
 8005408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6979      	ldr	r1, [r7, #20]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	613b      	str	r3, [r7, #16]
   return(result);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005428:	bf00      	nop
 800542a:	3754      	adds	r7, #84	@ 0x54
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fee8 	bl	8005222 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b21      	cmp	r3, #33	@ 0x21
 800546c:	d13e      	bne.n	80054ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005476:	d114      	bne.n	80054a2 <UART_Transmit_IT+0x48>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005494:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	1c9a      	adds	r2, r3, #2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	621a      	str	r2, [r3, #32]
 80054a0:	e008      	b.n	80054b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6211      	str	r1, [r2, #32]
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29b      	uxth	r3, r3
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	4619      	mov	r1, r3
 80054c2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10f      	bne.n	80054e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80054d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	e000      	b.n	80054ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054ec:	2302      	movs	r3, #2
  }
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800550e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fe79 	bl	8005210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08c      	sub	sp, #48	@ 0x30
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b22      	cmp	r3, #34	@ 0x22
 800553a:	f040 80ae 	bne.w	800569a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005546:	d117      	bne.n	8005578 <UART_Receive_IT+0x50>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d113      	bne.n	8005578 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005550:	2300      	movs	r3, #0
 8005552:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005558:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	b29b      	uxth	r3, r3
 8005562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005566:	b29a      	uxth	r2, r3
 8005568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005570:	1c9a      	adds	r2, r3, #2
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	629a      	str	r2, [r3, #40]	@ 0x28
 8005576:	e026      	b.n	80055c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800558a:	d007      	beq.n	800559c <UART_Receive_IT+0x74>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <UART_Receive_IT+0x82>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	701a      	strb	r2, [r3, #0]
 80055a8:	e008      	b.n	80055bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	4619      	mov	r1, r3
 80055d4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d15d      	bne.n	8005696 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0220 	bic.w	r2, r2, #32
 80055e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0201 	bic.w	r2, r2, #1
 8005608:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561c:	2b01      	cmp	r3, #1
 800561e:	d135      	bne.n	800568c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	613b      	str	r3, [r7, #16]
   return(result);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f023 0310 	bic.w	r3, r3, #16
 800563c:	627b      	str	r3, [r7, #36]	@ 0x24
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005646:	623a      	str	r2, [r7, #32]
 8005648:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	69f9      	ldr	r1, [r7, #28]
 800564c:	6a3a      	ldr	r2, [r7, #32]
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	61bb      	str	r3, [r7, #24]
   return(result);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0310 	and.w	r3, r3, #16
 8005664:	2b10      	cmp	r3, #16
 8005666:	d10a      	bne.n	800567e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005682:	4619      	mov	r1, r3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff fdd5 	bl	8005234 <HAL_UARTEx_RxEventCallback>
 800568a:	e002      	b.n	8005692 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7fb fbc3 	bl	8000e18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	e002      	b.n	800569c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800569a:	2302      	movs	r3, #2
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	3730      	adds	r7, #48	@ 0x30
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80056de:	f023 030c 	bic.w	r3, r3, #12
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	68b9      	ldr	r1, [r7, #8]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2c      	ldr	r2, [pc, #176]	@ (80057b8 <UART_SetConfig+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800570c:	f7fe fdca 	bl	80042a4 <HAL_RCC_GetPCLK2Freq>
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	e002      	b.n	800571a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005714:	f7fe fdb2 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8005718:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009a      	lsls	r2, r3, #2
 8005724:	441a      	add	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	4a22      	ldr	r2, [pc, #136]	@ (80057bc <UART_SetConfig+0x118>)
 8005732:	fba2 2303 	umull	r2, r3, r2, r3
 8005736:	095b      	lsrs	r3, r3, #5
 8005738:	0119      	lsls	r1, r3, #4
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009a      	lsls	r2, r3, #2
 8005744:	441a      	add	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005750:	4b1a      	ldr	r3, [pc, #104]	@ (80057bc <UART_SetConfig+0x118>)
 8005752:	fba3 0302 	umull	r0, r3, r3, r2
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	2064      	movs	r0, #100	@ 0x64
 800575a:	fb00 f303 	mul.w	r3, r0, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	3332      	adds	r3, #50	@ 0x32
 8005764:	4a15      	ldr	r2, [pc, #84]	@ (80057bc <UART_SetConfig+0x118>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005770:	4419      	add	r1, r3
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009a      	lsls	r2, r3, #2
 800577c:	441a      	add	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	fbb2 f2f3 	udiv	r2, r2, r3
 8005788:	4b0c      	ldr	r3, [pc, #48]	@ (80057bc <UART_SetConfig+0x118>)
 800578a:	fba3 0302 	umull	r0, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2064      	movs	r0, #100	@ 0x64
 8005792:	fb00 f303 	mul.w	r3, r0, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	3332      	adds	r3, #50	@ 0x32
 800579c:	4a07      	ldr	r2, [pc, #28]	@ (80057bc <UART_SetConfig+0x118>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	440a      	add	r2, r1
 80057ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80057b0:	bf00      	nop
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40013800 	.word	0x40013800
 80057bc:	51eb851f 	.word	0x51eb851f

080057c0 <siprintf>:
 80057c0:	b40e      	push	{r1, r2, r3}
 80057c2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80057c6:	b500      	push	{lr}
 80057c8:	b09c      	sub	sp, #112	@ 0x70
 80057ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80057cc:	9002      	str	r0, [sp, #8]
 80057ce:	9006      	str	r0, [sp, #24]
 80057d0:	9107      	str	r1, [sp, #28]
 80057d2:	9104      	str	r1, [sp, #16]
 80057d4:	4808      	ldr	r0, [pc, #32]	@ (80057f8 <siprintf+0x38>)
 80057d6:	4909      	ldr	r1, [pc, #36]	@ (80057fc <siprintf+0x3c>)
 80057d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057dc:	9105      	str	r1, [sp, #20]
 80057de:	6800      	ldr	r0, [r0, #0]
 80057e0:	a902      	add	r1, sp, #8
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	f000 f992 	bl	8005b0c <_svfiprintf_r>
 80057e8:	2200      	movs	r2, #0
 80057ea:	9b02      	ldr	r3, [sp, #8]
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	b01c      	add	sp, #112	@ 0x70
 80057f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f4:	b003      	add	sp, #12
 80057f6:	4770      	bx	lr
 80057f8:	20000048 	.word	0x20000048
 80057fc:	ffff0208 	.word	0xffff0208

08005800 <memset>:
 8005800:	4603      	mov	r3, r0
 8005802:	4402      	add	r2, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	@ (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000048 	.word	0x20000048

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	2600      	movs	r6, #0
 8005820:	4d0c      	ldr	r5, [pc, #48]	@ (8005854 <__libc_init_array+0x38>)
 8005822:	4c0d      	ldr	r4, [pc, #52]	@ (8005858 <__libc_init_array+0x3c>)
 8005824:	1b64      	subs	r4, r4, r5
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	f000 fc78 	bl	8006120 <_init>
 8005830:	2600      	movs	r6, #0
 8005832:	4d0a      	ldr	r5, [pc, #40]	@ (800585c <__libc_init_array+0x40>)
 8005834:	4c0a      	ldr	r4, [pc, #40]	@ (8005860 <__libc_init_array+0x44>)
 8005836:	1b64      	subs	r4, r4, r5
 8005838:	10a4      	asrs	r4, r4, #2
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	f855 3b04 	ldr.w	r3, [r5], #4
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	f855 3b04 	ldr.w	r3, [r5], #4
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	08006278 	.word	0x08006278
 8005858:	08006278 	.word	0x08006278
 800585c:	08006278 	.word	0x08006278
 8005860:	0800627c 	.word	0x0800627c

08005864 <__retarget_lock_acquire_recursive>:
 8005864:	4770      	bx	lr

08005866 <__retarget_lock_release_recursive>:
 8005866:	4770      	bx	lr

08005868 <_free_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4605      	mov	r5, r0
 800586c:	2900      	cmp	r1, #0
 800586e:	d040      	beq.n	80058f2 <_free_r+0x8a>
 8005870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005874:	1f0c      	subs	r4, r1, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	bfb8      	it	lt
 800587a:	18e4      	addlt	r4, r4, r3
 800587c:	f000 f8de 	bl	8005a3c <__malloc_lock>
 8005880:	4a1c      	ldr	r2, [pc, #112]	@ (80058f4 <_free_r+0x8c>)
 8005882:	6813      	ldr	r3, [r2, #0]
 8005884:	b933      	cbnz	r3, 8005894 <_free_r+0x2c>
 8005886:	6063      	str	r3, [r4, #4]
 8005888:	6014      	str	r4, [r2, #0]
 800588a:	4628      	mov	r0, r5
 800588c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005890:	f000 b8da 	b.w	8005a48 <__malloc_unlock>
 8005894:	42a3      	cmp	r3, r4
 8005896:	d908      	bls.n	80058aa <_free_r+0x42>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	1821      	adds	r1, r4, r0
 800589c:	428b      	cmp	r3, r1
 800589e:	bf01      	itttt	eq
 80058a0:	6819      	ldreq	r1, [r3, #0]
 80058a2:	685b      	ldreq	r3, [r3, #4]
 80058a4:	1809      	addeq	r1, r1, r0
 80058a6:	6021      	streq	r1, [r4, #0]
 80058a8:	e7ed      	b.n	8005886 <_free_r+0x1e>
 80058aa:	461a      	mov	r2, r3
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	b10b      	cbz	r3, 80058b4 <_free_r+0x4c>
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	d9fa      	bls.n	80058aa <_free_r+0x42>
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	1850      	adds	r0, r2, r1
 80058b8:	42a0      	cmp	r0, r4
 80058ba:	d10b      	bne.n	80058d4 <_free_r+0x6c>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	4401      	add	r1, r0
 80058c0:	1850      	adds	r0, r2, r1
 80058c2:	4283      	cmp	r3, r0
 80058c4:	6011      	str	r1, [r2, #0]
 80058c6:	d1e0      	bne.n	800588a <_free_r+0x22>
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4408      	add	r0, r1
 80058ce:	6010      	str	r0, [r2, #0]
 80058d0:	6053      	str	r3, [r2, #4]
 80058d2:	e7da      	b.n	800588a <_free_r+0x22>
 80058d4:	d902      	bls.n	80058dc <_free_r+0x74>
 80058d6:	230c      	movs	r3, #12
 80058d8:	602b      	str	r3, [r5, #0]
 80058da:	e7d6      	b.n	800588a <_free_r+0x22>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	1821      	adds	r1, r4, r0
 80058e0:	428b      	cmp	r3, r1
 80058e2:	bf01      	itttt	eq
 80058e4:	6819      	ldreq	r1, [r3, #0]
 80058e6:	685b      	ldreq	r3, [r3, #4]
 80058e8:	1809      	addeq	r1, r1, r0
 80058ea:	6021      	streq	r1, [r4, #0]
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	6054      	str	r4, [r2, #4]
 80058f0:	e7cb      	b.n	800588a <_free_r+0x22>
 80058f2:	bd38      	pop	{r3, r4, r5, pc}
 80058f4:	20000410 	.word	0x20000410

080058f8 <sbrk_aligned>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005938 <sbrk_aligned+0x40>)
 80058fc:	460c      	mov	r4, r1
 80058fe:	6831      	ldr	r1, [r6, #0]
 8005900:	4605      	mov	r5, r0
 8005902:	b911      	cbnz	r1, 800590a <sbrk_aligned+0x12>
 8005904:	f000 fbaa 	bl	800605c <_sbrk_r>
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	4621      	mov	r1, r4
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fba5 	bl	800605c <_sbrk_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d103      	bne.n	800591e <sbrk_aligned+0x26>
 8005916:	f04f 34ff 	mov.w	r4, #4294967295
 800591a:	4620      	mov	r0, r4
 800591c:	bd70      	pop	{r4, r5, r6, pc}
 800591e:	1cc4      	adds	r4, r0, #3
 8005920:	f024 0403 	bic.w	r4, r4, #3
 8005924:	42a0      	cmp	r0, r4
 8005926:	d0f8      	beq.n	800591a <sbrk_aligned+0x22>
 8005928:	1a21      	subs	r1, r4, r0
 800592a:	4628      	mov	r0, r5
 800592c:	f000 fb96 	bl	800605c <_sbrk_r>
 8005930:	3001      	adds	r0, #1
 8005932:	d1f2      	bne.n	800591a <sbrk_aligned+0x22>
 8005934:	e7ef      	b.n	8005916 <sbrk_aligned+0x1e>
 8005936:	bf00      	nop
 8005938:	2000040c 	.word	0x2000040c

0800593c <_malloc_r>:
 800593c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005940:	1ccd      	adds	r5, r1, #3
 8005942:	f025 0503 	bic.w	r5, r5, #3
 8005946:	3508      	adds	r5, #8
 8005948:	2d0c      	cmp	r5, #12
 800594a:	bf38      	it	cc
 800594c:	250c      	movcc	r5, #12
 800594e:	2d00      	cmp	r5, #0
 8005950:	4606      	mov	r6, r0
 8005952:	db01      	blt.n	8005958 <_malloc_r+0x1c>
 8005954:	42a9      	cmp	r1, r5
 8005956:	d904      	bls.n	8005962 <_malloc_r+0x26>
 8005958:	230c      	movs	r3, #12
 800595a:	6033      	str	r3, [r6, #0]
 800595c:	2000      	movs	r0, #0
 800595e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005962:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a38 <_malloc_r+0xfc>
 8005966:	f000 f869 	bl	8005a3c <__malloc_lock>
 800596a:	f8d8 3000 	ldr.w	r3, [r8]
 800596e:	461c      	mov	r4, r3
 8005970:	bb44      	cbnz	r4, 80059c4 <_malloc_r+0x88>
 8005972:	4629      	mov	r1, r5
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff ffbf 	bl	80058f8 <sbrk_aligned>
 800597a:	1c43      	adds	r3, r0, #1
 800597c:	4604      	mov	r4, r0
 800597e:	d158      	bne.n	8005a32 <_malloc_r+0xf6>
 8005980:	f8d8 4000 	ldr.w	r4, [r8]
 8005984:	4627      	mov	r7, r4
 8005986:	2f00      	cmp	r7, #0
 8005988:	d143      	bne.n	8005a12 <_malloc_r+0xd6>
 800598a:	2c00      	cmp	r4, #0
 800598c:	d04b      	beq.n	8005a26 <_malloc_r+0xea>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	4639      	mov	r1, r7
 8005992:	4630      	mov	r0, r6
 8005994:	eb04 0903 	add.w	r9, r4, r3
 8005998:	f000 fb60 	bl	800605c <_sbrk_r>
 800599c:	4581      	cmp	r9, r0
 800599e:	d142      	bne.n	8005a26 <_malloc_r+0xea>
 80059a0:	6821      	ldr	r1, [r4, #0]
 80059a2:	4630      	mov	r0, r6
 80059a4:	1a6d      	subs	r5, r5, r1
 80059a6:	4629      	mov	r1, r5
 80059a8:	f7ff ffa6 	bl	80058f8 <sbrk_aligned>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d03a      	beq.n	8005a26 <_malloc_r+0xea>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	442b      	add	r3, r5
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	f8d8 3000 	ldr.w	r3, [r8]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	bb62      	cbnz	r2, 8005a18 <_malloc_r+0xdc>
 80059be:	f8c8 7000 	str.w	r7, [r8]
 80059c2:	e00f      	b.n	80059e4 <_malloc_r+0xa8>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	1b52      	subs	r2, r2, r5
 80059c8:	d420      	bmi.n	8005a0c <_malloc_r+0xd0>
 80059ca:	2a0b      	cmp	r2, #11
 80059cc:	d917      	bls.n	80059fe <_malloc_r+0xc2>
 80059ce:	1961      	adds	r1, r4, r5
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	6025      	str	r5, [r4, #0]
 80059d4:	bf18      	it	ne
 80059d6:	6059      	strne	r1, [r3, #4]
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	bf08      	it	eq
 80059dc:	f8c8 1000 	streq.w	r1, [r8]
 80059e0:	5162      	str	r2, [r4, r5]
 80059e2:	604b      	str	r3, [r1, #4]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f82f 	bl	8005a48 <__malloc_unlock>
 80059ea:	f104 000b 	add.w	r0, r4, #11
 80059ee:	1d23      	adds	r3, r4, #4
 80059f0:	f020 0007 	bic.w	r0, r0, #7
 80059f4:	1ac2      	subs	r2, r0, r3
 80059f6:	bf1c      	itt	ne
 80059f8:	1a1b      	subne	r3, r3, r0
 80059fa:	50a3      	strne	r3, [r4, r2]
 80059fc:	e7af      	b.n	800595e <_malloc_r+0x22>
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	42a3      	cmp	r3, r4
 8005a02:	bf0c      	ite	eq
 8005a04:	f8c8 2000 	streq.w	r2, [r8]
 8005a08:	605a      	strne	r2, [r3, #4]
 8005a0a:	e7eb      	b.n	80059e4 <_malloc_r+0xa8>
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	6864      	ldr	r4, [r4, #4]
 8005a10:	e7ae      	b.n	8005970 <_malloc_r+0x34>
 8005a12:	463c      	mov	r4, r7
 8005a14:	687f      	ldr	r7, [r7, #4]
 8005a16:	e7b6      	b.n	8005986 <_malloc_r+0x4a>
 8005a18:	461a      	mov	r2, r3
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	42a3      	cmp	r3, r4
 8005a1e:	d1fb      	bne.n	8005a18 <_malloc_r+0xdc>
 8005a20:	2300      	movs	r3, #0
 8005a22:	6053      	str	r3, [r2, #4]
 8005a24:	e7de      	b.n	80059e4 <_malloc_r+0xa8>
 8005a26:	230c      	movs	r3, #12
 8005a28:	4630      	mov	r0, r6
 8005a2a:	6033      	str	r3, [r6, #0]
 8005a2c:	f000 f80c 	bl	8005a48 <__malloc_unlock>
 8005a30:	e794      	b.n	800595c <_malloc_r+0x20>
 8005a32:	6005      	str	r5, [r0, #0]
 8005a34:	e7d6      	b.n	80059e4 <_malloc_r+0xa8>
 8005a36:	bf00      	nop
 8005a38:	20000410 	.word	0x20000410

08005a3c <__malloc_lock>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	@ (8005a44 <__malloc_lock+0x8>)
 8005a3e:	f7ff bf11 	b.w	8005864 <__retarget_lock_acquire_recursive>
 8005a42:	bf00      	nop
 8005a44:	20000408 	.word	0x20000408

08005a48 <__malloc_unlock>:
 8005a48:	4801      	ldr	r0, [pc, #4]	@ (8005a50 <__malloc_unlock+0x8>)
 8005a4a:	f7ff bf0c 	b.w	8005866 <__retarget_lock_release_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20000408 	.word	0x20000408

08005a54 <__ssputs_r>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	461f      	mov	r7, r3
 8005a5a:	688e      	ldr	r6, [r1, #8]
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	42be      	cmp	r6, r7
 8005a60:	460c      	mov	r4, r1
 8005a62:	4690      	mov	r8, r2
 8005a64:	680b      	ldr	r3, [r1, #0]
 8005a66:	d82d      	bhi.n	8005ac4 <__ssputs_r+0x70>
 8005a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a70:	d026      	beq.n	8005ac0 <__ssputs_r+0x6c>
 8005a72:	6965      	ldr	r5, [r4, #20]
 8005a74:	6909      	ldr	r1, [r1, #16]
 8005a76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a7a:	eba3 0901 	sub.w	r9, r3, r1
 8005a7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a82:	1c7b      	adds	r3, r7, #1
 8005a84:	444b      	add	r3, r9
 8005a86:	106d      	asrs	r5, r5, #1
 8005a88:	429d      	cmp	r5, r3
 8005a8a:	bf38      	it	cc
 8005a8c:	461d      	movcc	r5, r3
 8005a8e:	0553      	lsls	r3, r2, #21
 8005a90:	d527      	bpl.n	8005ae2 <__ssputs_r+0x8e>
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7ff ff52 	bl	800593c <_malloc_r>
 8005a98:	4606      	mov	r6, r0
 8005a9a:	b360      	cbz	r0, 8005af6 <__ssputs_r+0xa2>
 8005a9c:	464a      	mov	r2, r9
 8005a9e:	6921      	ldr	r1, [r4, #16]
 8005aa0:	f000 fafa 	bl	8006098 <memcpy>
 8005aa4:	89a3      	ldrh	r3, [r4, #12]
 8005aa6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	6126      	str	r6, [r4, #16]
 8005ab2:	444e      	add	r6, r9
 8005ab4:	6026      	str	r6, [r4, #0]
 8005ab6:	463e      	mov	r6, r7
 8005ab8:	6165      	str	r5, [r4, #20]
 8005aba:	eba5 0509 	sub.w	r5, r5, r9
 8005abe:	60a5      	str	r5, [r4, #8]
 8005ac0:	42be      	cmp	r6, r7
 8005ac2:	d900      	bls.n	8005ac6 <__ssputs_r+0x72>
 8005ac4:	463e      	mov	r6, r7
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	4641      	mov	r1, r8
 8005aca:	6820      	ldr	r0, [r4, #0]
 8005acc:	f000 faac 	bl	8006028 <memmove>
 8005ad0:	2000      	movs	r0, #0
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	1b9b      	subs	r3, r3, r6
 8005ad6:	60a3      	str	r3, [r4, #8]
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	4433      	add	r3, r6
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	f000 fae6 	bl	80060b4 <_realloc_r>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1e0      	bne.n	8005ab0 <__ssputs_r+0x5c>
 8005aee:	4650      	mov	r0, sl
 8005af0:	6921      	ldr	r1, [r4, #16]
 8005af2:	f7ff feb9 	bl	8005868 <_free_r>
 8005af6:	230c      	movs	r3, #12
 8005af8:	f8ca 3000 	str.w	r3, [sl]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295
 8005b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b06:	81a3      	strh	r3, [r4, #12]
 8005b08:	e7e9      	b.n	8005ade <__ssputs_r+0x8a>
	...

08005b0c <_svfiprintf_r>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	4698      	mov	r8, r3
 8005b12:	898b      	ldrh	r3, [r1, #12]
 8005b14:	4607      	mov	r7, r0
 8005b16:	061b      	lsls	r3, r3, #24
 8005b18:	460d      	mov	r5, r1
 8005b1a:	4614      	mov	r4, r2
 8005b1c:	b09d      	sub	sp, #116	@ 0x74
 8005b1e:	d510      	bpl.n	8005b42 <_svfiprintf_r+0x36>
 8005b20:	690b      	ldr	r3, [r1, #16]
 8005b22:	b973      	cbnz	r3, 8005b42 <_svfiprintf_r+0x36>
 8005b24:	2140      	movs	r1, #64	@ 0x40
 8005b26:	f7ff ff09 	bl	800593c <_malloc_r>
 8005b2a:	6028      	str	r0, [r5, #0]
 8005b2c:	6128      	str	r0, [r5, #16]
 8005b2e:	b930      	cbnz	r0, 8005b3e <_svfiprintf_r+0x32>
 8005b30:	230c      	movs	r3, #12
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	f04f 30ff 	mov.w	r0, #4294967295
 8005b38:	b01d      	add	sp, #116	@ 0x74
 8005b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3e:	2340      	movs	r3, #64	@ 0x40
 8005b40:	616b      	str	r3, [r5, #20]
 8005b42:	2300      	movs	r3, #0
 8005b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b46:	2320      	movs	r3, #32
 8005b48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b4c:	2330      	movs	r3, #48	@ 0x30
 8005b4e:	f04f 0901 	mov.w	r9, #1
 8005b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005cf0 <_svfiprintf_r+0x1e4>
 8005b5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b5e:	4623      	mov	r3, r4
 8005b60:	469a      	mov	sl, r3
 8005b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b66:	b10a      	cbz	r2, 8005b6c <_svfiprintf_r+0x60>
 8005b68:	2a25      	cmp	r2, #37	@ 0x25
 8005b6a:	d1f9      	bne.n	8005b60 <_svfiprintf_r+0x54>
 8005b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b70:	d00b      	beq.n	8005b8a <_svfiprintf_r+0x7e>
 8005b72:	465b      	mov	r3, fp
 8005b74:	4622      	mov	r2, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	4638      	mov	r0, r7
 8005b7a:	f7ff ff6b 	bl	8005a54 <__ssputs_r>
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f000 80a7 	beq.w	8005cd2 <_svfiprintf_r+0x1c6>
 8005b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b86:	445a      	add	r2, fp
 8005b88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 809f 	beq.w	8005cd2 <_svfiprintf_r+0x1c6>
 8005b94:	2300      	movs	r3, #0
 8005b96:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b9e:	f10a 0a01 	add.w	sl, sl, #1
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005baa:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bac:	4654      	mov	r4, sl
 8005bae:	2205      	movs	r2, #5
 8005bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb4:	484e      	ldr	r0, [pc, #312]	@ (8005cf0 <_svfiprintf_r+0x1e4>)
 8005bb6:	f000 fa61 	bl	800607c <memchr>
 8005bba:	9a04      	ldr	r2, [sp, #16]
 8005bbc:	b9d8      	cbnz	r0, 8005bf6 <_svfiprintf_r+0xea>
 8005bbe:	06d0      	lsls	r0, r2, #27
 8005bc0:	bf44      	itt	mi
 8005bc2:	2320      	movmi	r3, #32
 8005bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bc8:	0711      	lsls	r1, r2, #28
 8005bca:	bf44      	itt	mi
 8005bcc:	232b      	movmi	r3, #43	@ 0x2b
 8005bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bd8:	d015      	beq.n	8005c06 <_svfiprintf_r+0xfa>
 8005bda:	4654      	mov	r4, sl
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f04f 0c0a 	mov.w	ip, #10
 8005be2:	9a07      	ldr	r2, [sp, #28]
 8005be4:	4621      	mov	r1, r4
 8005be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bea:	3b30      	subs	r3, #48	@ 0x30
 8005bec:	2b09      	cmp	r3, #9
 8005bee:	d94b      	bls.n	8005c88 <_svfiprintf_r+0x17c>
 8005bf0:	b1b0      	cbz	r0, 8005c20 <_svfiprintf_r+0x114>
 8005bf2:	9207      	str	r2, [sp, #28]
 8005bf4:	e014      	b.n	8005c20 <_svfiprintf_r+0x114>
 8005bf6:	eba0 0308 	sub.w	r3, r0, r8
 8005bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	46a2      	mov	sl, r4
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	e7d2      	b.n	8005bac <_svfiprintf_r+0xa0>
 8005c06:	9b03      	ldr	r3, [sp, #12]
 8005c08:	1d19      	adds	r1, r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	9103      	str	r1, [sp, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfbb      	ittet	lt
 8005c12:	425b      	neglt	r3, r3
 8005c14:	f042 0202 	orrlt.w	r2, r2, #2
 8005c18:	9307      	strge	r3, [sp, #28]
 8005c1a:	9307      	strlt	r3, [sp, #28]
 8005c1c:	bfb8      	it	lt
 8005c1e:	9204      	strlt	r2, [sp, #16]
 8005c20:	7823      	ldrb	r3, [r4, #0]
 8005c22:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c24:	d10a      	bne.n	8005c3c <_svfiprintf_r+0x130>
 8005c26:	7863      	ldrb	r3, [r4, #1]
 8005c28:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c2a:	d132      	bne.n	8005c92 <_svfiprintf_r+0x186>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	3402      	adds	r4, #2
 8005c30:	1d1a      	adds	r2, r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	9203      	str	r2, [sp, #12]
 8005c36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c3a:	9305      	str	r3, [sp, #20]
 8005c3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005cf4 <_svfiprintf_r+0x1e8>
 8005c40:	2203      	movs	r2, #3
 8005c42:	4650      	mov	r0, sl
 8005c44:	7821      	ldrb	r1, [r4, #0]
 8005c46:	f000 fa19 	bl	800607c <memchr>
 8005c4a:	b138      	cbz	r0, 8005c5c <_svfiprintf_r+0x150>
 8005c4c:	2240      	movs	r2, #64	@ 0x40
 8005c4e:	9b04      	ldr	r3, [sp, #16]
 8005c50:	eba0 000a 	sub.w	r0, r0, sl
 8005c54:	4082      	lsls	r2, r0
 8005c56:	4313      	orrs	r3, r2
 8005c58:	3401      	adds	r4, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c60:	2206      	movs	r2, #6
 8005c62:	4825      	ldr	r0, [pc, #148]	@ (8005cf8 <_svfiprintf_r+0x1ec>)
 8005c64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c68:	f000 fa08 	bl	800607c <memchr>
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d036      	beq.n	8005cde <_svfiprintf_r+0x1d2>
 8005c70:	4b22      	ldr	r3, [pc, #136]	@ (8005cfc <_svfiprintf_r+0x1f0>)
 8005c72:	bb1b      	cbnz	r3, 8005cbc <_svfiprintf_r+0x1b0>
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	3307      	adds	r3, #7
 8005c78:	f023 0307 	bic.w	r3, r3, #7
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c82:	4433      	add	r3, r6
 8005c84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c86:	e76a      	b.n	8005b5e <_svfiprintf_r+0x52>
 8005c88:	460c      	mov	r4, r1
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c90:	e7a8      	b.n	8005be4 <_svfiprintf_r+0xd8>
 8005c92:	2300      	movs	r3, #0
 8005c94:	f04f 0c0a 	mov.w	ip, #10
 8005c98:	4619      	mov	r1, r3
 8005c9a:	3401      	adds	r4, #1
 8005c9c:	9305      	str	r3, [sp, #20]
 8005c9e:	4620      	mov	r0, r4
 8005ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca4:	3a30      	subs	r2, #48	@ 0x30
 8005ca6:	2a09      	cmp	r2, #9
 8005ca8:	d903      	bls.n	8005cb2 <_svfiprintf_r+0x1a6>
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0c6      	beq.n	8005c3c <_svfiprintf_r+0x130>
 8005cae:	9105      	str	r1, [sp, #20]
 8005cb0:	e7c4      	b.n	8005c3c <_svfiprintf_r+0x130>
 8005cb2:	4604      	mov	r4, r0
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cba:	e7f0      	b.n	8005c9e <_svfiprintf_r+0x192>
 8005cbc:	ab03      	add	r3, sp, #12
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	462a      	mov	r2, r5
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <_svfiprintf_r+0x1f4>)
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	f3af 8000 	nop.w
 8005ccc:	1c42      	adds	r2, r0, #1
 8005cce:	4606      	mov	r6, r0
 8005cd0:	d1d6      	bne.n	8005c80 <_svfiprintf_r+0x174>
 8005cd2:	89ab      	ldrh	r3, [r5, #12]
 8005cd4:	065b      	lsls	r3, r3, #25
 8005cd6:	f53f af2d 	bmi.w	8005b34 <_svfiprintf_r+0x28>
 8005cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005cdc:	e72c      	b.n	8005b38 <_svfiprintf_r+0x2c>
 8005cde:	ab03      	add	r3, sp, #12
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <_svfiprintf_r+0x1f4>)
 8005ce8:	a904      	add	r1, sp, #16
 8005cea:	f000 f87d 	bl	8005de8 <_printf_i>
 8005cee:	e7ed      	b.n	8005ccc <_svfiprintf_r+0x1c0>
 8005cf0:	08006242 	.word	0x08006242
 8005cf4:	08006248 	.word	0x08006248
 8005cf8:	0800624c 	.word	0x0800624c
 8005cfc:	00000000 	.word	0x00000000
 8005d00:	08005a55 	.word	0x08005a55

08005d04 <_printf_common>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	4616      	mov	r6, r2
 8005d0a:	4698      	mov	r8, r3
 8005d0c:	688a      	ldr	r2, [r1, #8]
 8005d0e:	690b      	ldr	r3, [r1, #16]
 8005d10:	4607      	mov	r7, r0
 8005d12:	4293      	cmp	r3, r2
 8005d14:	bfb8      	it	lt
 8005d16:	4613      	movlt	r3, r2
 8005d18:	6033      	str	r3, [r6, #0]
 8005d1a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d1e:	460c      	mov	r4, r1
 8005d20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d24:	b10a      	cbz	r2, 8005d2a <_printf_common+0x26>
 8005d26:	3301      	adds	r3, #1
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	0699      	lsls	r1, r3, #26
 8005d2e:	bf42      	ittt	mi
 8005d30:	6833      	ldrmi	r3, [r6, #0]
 8005d32:	3302      	addmi	r3, #2
 8005d34:	6033      	strmi	r3, [r6, #0]
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	f015 0506 	ands.w	r5, r5, #6
 8005d3c:	d106      	bne.n	8005d4c <_printf_common+0x48>
 8005d3e:	f104 0a19 	add.w	sl, r4, #25
 8005d42:	68e3      	ldr	r3, [r4, #12]
 8005d44:	6832      	ldr	r2, [r6, #0]
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	42ab      	cmp	r3, r5
 8005d4a:	dc2b      	bgt.n	8005da4 <_printf_common+0xa0>
 8005d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d50:	6822      	ldr	r2, [r4, #0]
 8005d52:	3b00      	subs	r3, #0
 8005d54:	bf18      	it	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	0692      	lsls	r2, r2, #26
 8005d5a:	d430      	bmi.n	8005dbe <_printf_common+0xba>
 8005d5c:	4641      	mov	r1, r8
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d64:	47c8      	blx	r9
 8005d66:	3001      	adds	r0, #1
 8005d68:	d023      	beq.n	8005db2 <_printf_common+0xae>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	6922      	ldr	r2, [r4, #16]
 8005d6e:	f003 0306 	and.w	r3, r3, #6
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	bf14      	ite	ne
 8005d76:	2500      	movne	r5, #0
 8005d78:	6833      	ldreq	r3, [r6, #0]
 8005d7a:	f04f 0600 	mov.w	r6, #0
 8005d7e:	bf08      	it	eq
 8005d80:	68e5      	ldreq	r5, [r4, #12]
 8005d82:	f104 041a 	add.w	r4, r4, #26
 8005d86:	bf08      	it	eq
 8005d88:	1aed      	subeq	r5, r5, r3
 8005d8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d8e:	bf08      	it	eq
 8005d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfc4      	itt	gt
 8005d98:	1a9b      	subgt	r3, r3, r2
 8005d9a:	18ed      	addgt	r5, r5, r3
 8005d9c:	42b5      	cmp	r5, r6
 8005d9e:	d11a      	bne.n	8005dd6 <_printf_common+0xd2>
 8005da0:	2000      	movs	r0, #0
 8005da2:	e008      	b.n	8005db6 <_printf_common+0xb2>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4652      	mov	r2, sl
 8005da8:	4641      	mov	r1, r8
 8005daa:	4638      	mov	r0, r7
 8005dac:	47c8      	blx	r9
 8005dae:	3001      	adds	r0, #1
 8005db0:	d103      	bne.n	8005dba <_printf_common+0xb6>
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dba:	3501      	adds	r5, #1
 8005dbc:	e7c1      	b.n	8005d42 <_printf_common+0x3e>
 8005dbe:	2030      	movs	r0, #48	@ 0x30
 8005dc0:	18e1      	adds	r1, r4, r3
 8005dc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005dcc:	4422      	add	r2, r4
 8005dce:	3302      	adds	r3, #2
 8005dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dd4:	e7c2      	b.n	8005d5c <_printf_common+0x58>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4622      	mov	r2, r4
 8005dda:	4641      	mov	r1, r8
 8005ddc:	4638      	mov	r0, r7
 8005dde:	47c8      	blx	r9
 8005de0:	3001      	adds	r0, #1
 8005de2:	d0e6      	beq.n	8005db2 <_printf_common+0xae>
 8005de4:	3601      	adds	r6, #1
 8005de6:	e7d9      	b.n	8005d9c <_printf_common+0x98>

08005de8 <_printf_i>:
 8005de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	7e0f      	ldrb	r7, [r1, #24]
 8005dee:	4691      	mov	r9, r2
 8005df0:	2f78      	cmp	r7, #120	@ 0x78
 8005df2:	4680      	mov	r8, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	469a      	mov	sl, r3
 8005df8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dfe:	d807      	bhi.n	8005e10 <_printf_i+0x28>
 8005e00:	2f62      	cmp	r7, #98	@ 0x62
 8005e02:	d80a      	bhi.n	8005e1a <_printf_i+0x32>
 8005e04:	2f00      	cmp	r7, #0
 8005e06:	f000 80d3 	beq.w	8005fb0 <_printf_i+0x1c8>
 8005e0a:	2f58      	cmp	r7, #88	@ 0x58
 8005e0c:	f000 80ba 	beq.w	8005f84 <_printf_i+0x19c>
 8005e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e18:	e03a      	b.n	8005e90 <_printf_i+0xa8>
 8005e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e1e:	2b15      	cmp	r3, #21
 8005e20:	d8f6      	bhi.n	8005e10 <_printf_i+0x28>
 8005e22:	a101      	add	r1, pc, #4	@ (adr r1, 8005e28 <_printf_i+0x40>)
 8005e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e28:	08005e81 	.word	0x08005e81
 8005e2c:	08005e95 	.word	0x08005e95
 8005e30:	08005e11 	.word	0x08005e11
 8005e34:	08005e11 	.word	0x08005e11
 8005e38:	08005e11 	.word	0x08005e11
 8005e3c:	08005e11 	.word	0x08005e11
 8005e40:	08005e95 	.word	0x08005e95
 8005e44:	08005e11 	.word	0x08005e11
 8005e48:	08005e11 	.word	0x08005e11
 8005e4c:	08005e11 	.word	0x08005e11
 8005e50:	08005e11 	.word	0x08005e11
 8005e54:	08005f97 	.word	0x08005f97
 8005e58:	08005ebf 	.word	0x08005ebf
 8005e5c:	08005f51 	.word	0x08005f51
 8005e60:	08005e11 	.word	0x08005e11
 8005e64:	08005e11 	.word	0x08005e11
 8005e68:	08005fb9 	.word	0x08005fb9
 8005e6c:	08005e11 	.word	0x08005e11
 8005e70:	08005ebf 	.word	0x08005ebf
 8005e74:	08005e11 	.word	0x08005e11
 8005e78:	08005e11 	.word	0x08005e11
 8005e7c:	08005f59 	.word	0x08005f59
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6032      	str	r2, [r6, #0]
 8005e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e90:	2301      	movs	r3, #1
 8005e92:	e09e      	b.n	8005fd2 <_printf_i+0x1ea>
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	6820      	ldr	r0, [r4, #0]
 8005e98:	1d19      	adds	r1, r3, #4
 8005e9a:	6031      	str	r1, [r6, #0]
 8005e9c:	0606      	lsls	r6, r0, #24
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_i+0xbc>
 8005ea0:	681d      	ldr	r5, [r3, #0]
 8005ea2:	e003      	b.n	8005eac <_printf_i+0xc4>
 8005ea4:	0645      	lsls	r5, r0, #25
 8005ea6:	d5fb      	bpl.n	8005ea0 <_printf_i+0xb8>
 8005ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	da03      	bge.n	8005eb8 <_printf_i+0xd0>
 8005eb0:	232d      	movs	r3, #45	@ 0x2d
 8005eb2:	426d      	negs	r5, r5
 8005eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005eb8:	230a      	movs	r3, #10
 8005eba:	4859      	ldr	r0, [pc, #356]	@ (8006020 <_printf_i+0x238>)
 8005ebc:	e011      	b.n	8005ee2 <_printf_i+0xfa>
 8005ebe:	6821      	ldr	r1, [r4, #0]
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	0608      	lsls	r0, r1, #24
 8005ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ec8:	d402      	bmi.n	8005ed0 <_printf_i+0xe8>
 8005eca:	0649      	lsls	r1, r1, #25
 8005ecc:	bf48      	it	mi
 8005ece:	b2ad      	uxthmi	r5, r5
 8005ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ed2:	6033      	str	r3, [r6, #0]
 8005ed4:	bf14      	ite	ne
 8005ed6:	230a      	movne	r3, #10
 8005ed8:	2308      	moveq	r3, #8
 8005eda:	4851      	ldr	r0, [pc, #324]	@ (8006020 <_printf_i+0x238>)
 8005edc:	2100      	movs	r1, #0
 8005ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ee2:	6866      	ldr	r6, [r4, #4]
 8005ee4:	2e00      	cmp	r6, #0
 8005ee6:	bfa8      	it	ge
 8005ee8:	6821      	ldrge	r1, [r4, #0]
 8005eea:	60a6      	str	r6, [r4, #8]
 8005eec:	bfa4      	itt	ge
 8005eee:	f021 0104 	bicge.w	r1, r1, #4
 8005ef2:	6021      	strge	r1, [r4, #0]
 8005ef4:	b90d      	cbnz	r5, 8005efa <_printf_i+0x112>
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d04b      	beq.n	8005f92 <_printf_i+0x1aa>
 8005efa:	4616      	mov	r6, r2
 8005efc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f00:	fb03 5711 	mls	r7, r3, r1, r5
 8005f04:	5dc7      	ldrb	r7, [r0, r7]
 8005f06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f0a:	462f      	mov	r7, r5
 8005f0c:	42bb      	cmp	r3, r7
 8005f0e:	460d      	mov	r5, r1
 8005f10:	d9f4      	bls.n	8005efc <_printf_i+0x114>
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d10b      	bne.n	8005f2e <_printf_i+0x146>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	07df      	lsls	r7, r3, #31
 8005f1a:	d508      	bpl.n	8005f2e <_printf_i+0x146>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	6861      	ldr	r1, [r4, #4]
 8005f20:	4299      	cmp	r1, r3
 8005f22:	bfde      	ittt	le
 8005f24:	2330      	movle	r3, #48	@ 0x30
 8005f26:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f2e:	1b92      	subs	r2, r2, r6
 8005f30:	6122      	str	r2, [r4, #16]
 8005f32:	464b      	mov	r3, r9
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f8cd a000 	str.w	sl, [sp]
 8005f3c:	aa03      	add	r2, sp, #12
 8005f3e:	f7ff fee1 	bl	8005d04 <_printf_common>
 8005f42:	3001      	adds	r0, #1
 8005f44:	d14a      	bne.n	8005fdc <_printf_i+0x1f4>
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	b004      	add	sp, #16
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	f043 0320 	orr.w	r3, r3, #32
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	2778      	movs	r7, #120	@ 0x78
 8005f5a:	4832      	ldr	r0, [pc, #200]	@ (8006024 <_printf_i+0x23c>)
 8005f5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	6831      	ldr	r1, [r6, #0]
 8005f64:	061f      	lsls	r7, r3, #24
 8005f66:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f6a:	d402      	bmi.n	8005f72 <_printf_i+0x18a>
 8005f6c:	065f      	lsls	r7, r3, #25
 8005f6e:	bf48      	it	mi
 8005f70:	b2ad      	uxthmi	r5, r5
 8005f72:	6031      	str	r1, [r6, #0]
 8005f74:	07d9      	lsls	r1, r3, #31
 8005f76:	bf44      	itt	mi
 8005f78:	f043 0320 	orrmi.w	r3, r3, #32
 8005f7c:	6023      	strmi	r3, [r4, #0]
 8005f7e:	b11d      	cbz	r5, 8005f88 <_printf_i+0x1a0>
 8005f80:	2310      	movs	r3, #16
 8005f82:	e7ab      	b.n	8005edc <_printf_i+0xf4>
 8005f84:	4826      	ldr	r0, [pc, #152]	@ (8006020 <_printf_i+0x238>)
 8005f86:	e7e9      	b.n	8005f5c <_printf_i+0x174>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	f023 0320 	bic.w	r3, r3, #32
 8005f8e:	6023      	str	r3, [r4, #0]
 8005f90:	e7f6      	b.n	8005f80 <_printf_i+0x198>
 8005f92:	4616      	mov	r6, r2
 8005f94:	e7bd      	b.n	8005f12 <_printf_i+0x12a>
 8005f96:	6833      	ldr	r3, [r6, #0]
 8005f98:	6825      	ldr	r5, [r4, #0]
 8005f9a:	1d18      	adds	r0, r3, #4
 8005f9c:	6961      	ldr	r1, [r4, #20]
 8005f9e:	6030      	str	r0, [r6, #0]
 8005fa0:	062e      	lsls	r6, r5, #24
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	d501      	bpl.n	8005faa <_printf_i+0x1c2>
 8005fa6:	6019      	str	r1, [r3, #0]
 8005fa8:	e002      	b.n	8005fb0 <_printf_i+0x1c8>
 8005faa:	0668      	lsls	r0, r5, #25
 8005fac:	d5fb      	bpl.n	8005fa6 <_printf_i+0x1be>
 8005fae:	8019      	strh	r1, [r3, #0]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4616      	mov	r6, r2
 8005fb4:	6123      	str	r3, [r4, #16]
 8005fb6:	e7bc      	b.n	8005f32 <_printf_i+0x14a>
 8005fb8:	6833      	ldr	r3, [r6, #0]
 8005fba:	2100      	movs	r1, #0
 8005fbc:	1d1a      	adds	r2, r3, #4
 8005fbe:	6032      	str	r2, [r6, #0]
 8005fc0:	681e      	ldr	r6, [r3, #0]
 8005fc2:	6862      	ldr	r2, [r4, #4]
 8005fc4:	4630      	mov	r0, r6
 8005fc6:	f000 f859 	bl	800607c <memchr>
 8005fca:	b108      	cbz	r0, 8005fd0 <_printf_i+0x1e8>
 8005fcc:	1b80      	subs	r0, r0, r6
 8005fce:	6060      	str	r0, [r4, #4]
 8005fd0:	6863      	ldr	r3, [r4, #4]
 8005fd2:	6123      	str	r3, [r4, #16]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fda:	e7aa      	b.n	8005f32 <_printf_i+0x14a>
 8005fdc:	4632      	mov	r2, r6
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	6923      	ldr	r3, [r4, #16]
 8005fe4:	47d0      	blx	sl
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d0ad      	beq.n	8005f46 <_printf_i+0x15e>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	079b      	lsls	r3, r3, #30
 8005fee:	d413      	bmi.n	8006018 <_printf_i+0x230>
 8005ff0:	68e0      	ldr	r0, [r4, #12]
 8005ff2:	9b03      	ldr	r3, [sp, #12]
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	bfb8      	it	lt
 8005ff8:	4618      	movlt	r0, r3
 8005ffa:	e7a6      	b.n	8005f4a <_printf_i+0x162>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4632      	mov	r2, r6
 8006000:	4649      	mov	r1, r9
 8006002:	4640      	mov	r0, r8
 8006004:	47d0      	blx	sl
 8006006:	3001      	adds	r0, #1
 8006008:	d09d      	beq.n	8005f46 <_printf_i+0x15e>
 800600a:	3501      	adds	r5, #1
 800600c:	68e3      	ldr	r3, [r4, #12]
 800600e:	9903      	ldr	r1, [sp, #12]
 8006010:	1a5b      	subs	r3, r3, r1
 8006012:	42ab      	cmp	r3, r5
 8006014:	dcf2      	bgt.n	8005ffc <_printf_i+0x214>
 8006016:	e7eb      	b.n	8005ff0 <_printf_i+0x208>
 8006018:	2500      	movs	r5, #0
 800601a:	f104 0619 	add.w	r6, r4, #25
 800601e:	e7f5      	b.n	800600c <_printf_i+0x224>
 8006020:	08006253 	.word	0x08006253
 8006024:	08006264 	.word	0x08006264

08006028 <memmove>:
 8006028:	4288      	cmp	r0, r1
 800602a:	b510      	push	{r4, lr}
 800602c:	eb01 0402 	add.w	r4, r1, r2
 8006030:	d902      	bls.n	8006038 <memmove+0x10>
 8006032:	4284      	cmp	r4, r0
 8006034:	4623      	mov	r3, r4
 8006036:	d807      	bhi.n	8006048 <memmove+0x20>
 8006038:	1e43      	subs	r3, r0, #1
 800603a:	42a1      	cmp	r1, r4
 800603c:	d008      	beq.n	8006050 <memmove+0x28>
 800603e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006046:	e7f8      	b.n	800603a <memmove+0x12>
 8006048:	4601      	mov	r1, r0
 800604a:	4402      	add	r2, r0
 800604c:	428a      	cmp	r2, r1
 800604e:	d100      	bne.n	8006052 <memmove+0x2a>
 8006050:	bd10      	pop	{r4, pc}
 8006052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800605a:	e7f7      	b.n	800604c <memmove+0x24>

0800605c <_sbrk_r>:
 800605c:	b538      	push	{r3, r4, r5, lr}
 800605e:	2300      	movs	r3, #0
 8006060:	4d05      	ldr	r5, [pc, #20]	@ (8006078 <_sbrk_r+0x1c>)
 8006062:	4604      	mov	r4, r0
 8006064:	4608      	mov	r0, r1
 8006066:	602b      	str	r3, [r5, #0]
 8006068:	f7fc fbd4 	bl	8002814 <_sbrk>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_sbrk_r+0x1a>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_sbrk_r+0x1a>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	20000404 	.word	0x20000404

0800607c <memchr>:
 800607c:	4603      	mov	r3, r0
 800607e:	b510      	push	{r4, lr}
 8006080:	b2c9      	uxtb	r1, r1
 8006082:	4402      	add	r2, r0
 8006084:	4293      	cmp	r3, r2
 8006086:	4618      	mov	r0, r3
 8006088:	d101      	bne.n	800608e <memchr+0x12>
 800608a:	2000      	movs	r0, #0
 800608c:	e003      	b.n	8006096 <memchr+0x1a>
 800608e:	7804      	ldrb	r4, [r0, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	428c      	cmp	r4, r1
 8006094:	d1f6      	bne.n	8006084 <memchr+0x8>
 8006096:	bd10      	pop	{r4, pc}

08006098 <memcpy>:
 8006098:	440a      	add	r2, r1
 800609a:	4291      	cmp	r1, r2
 800609c:	f100 33ff 	add.w	r3, r0, #4294967295
 80060a0:	d100      	bne.n	80060a4 <memcpy+0xc>
 80060a2:	4770      	bx	lr
 80060a4:	b510      	push	{r4, lr}
 80060a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060aa:	4291      	cmp	r1, r2
 80060ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060b0:	d1f9      	bne.n	80060a6 <memcpy+0xe>
 80060b2:	bd10      	pop	{r4, pc}

080060b4 <_realloc_r>:
 80060b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060b8:	4680      	mov	r8, r0
 80060ba:	4615      	mov	r5, r2
 80060bc:	460c      	mov	r4, r1
 80060be:	b921      	cbnz	r1, 80060ca <_realloc_r+0x16>
 80060c0:	4611      	mov	r1, r2
 80060c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	f7ff bc39 	b.w	800593c <_malloc_r>
 80060ca:	b92a      	cbnz	r2, 80060d8 <_realloc_r+0x24>
 80060cc:	f7ff fbcc 	bl	8005868 <_free_r>
 80060d0:	2400      	movs	r4, #0
 80060d2:	4620      	mov	r0, r4
 80060d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d8:	f000 f81a 	bl	8006110 <_malloc_usable_size_r>
 80060dc:	4285      	cmp	r5, r0
 80060de:	4606      	mov	r6, r0
 80060e0:	d802      	bhi.n	80060e8 <_realloc_r+0x34>
 80060e2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060e6:	d8f4      	bhi.n	80060d2 <_realloc_r+0x1e>
 80060e8:	4629      	mov	r1, r5
 80060ea:	4640      	mov	r0, r8
 80060ec:	f7ff fc26 	bl	800593c <_malloc_r>
 80060f0:	4607      	mov	r7, r0
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d0ec      	beq.n	80060d0 <_realloc_r+0x1c>
 80060f6:	42b5      	cmp	r5, r6
 80060f8:	462a      	mov	r2, r5
 80060fa:	4621      	mov	r1, r4
 80060fc:	bf28      	it	cs
 80060fe:	4632      	movcs	r2, r6
 8006100:	f7ff ffca 	bl	8006098 <memcpy>
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f7ff fbae 	bl	8005868 <_free_r>
 800610c:	463c      	mov	r4, r7
 800610e:	e7e0      	b.n	80060d2 <_realloc_r+0x1e>

08006110 <_malloc_usable_size_r>:
 8006110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006114:	1f18      	subs	r0, r3, #4
 8006116:	2b00      	cmp	r3, #0
 8006118:	bfbc      	itt	lt
 800611a:	580b      	ldrlt	r3, [r1, r0]
 800611c:	18c0      	addlt	r0, r0, r3
 800611e:	4770      	bx	lr

08006120 <_init>:
 8006120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006122:	bf00      	nop
 8006124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006126:	bc08      	pop	{r3}
 8006128:	469e      	mov	lr, r3
 800612a:	4770      	bx	lr

0800612c <_fini>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	bf00      	nop
 8006130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006132:	bc08      	pop	{r3}
 8006134:	469e      	mov	lr, r3
 8006136:	4770      	bx	lr
