
A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058cc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006614  08006614  00008094  2**0
                  CONTENTS
  4 .ARM          00000008  08006614  08006614  00007614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800661c  0800661c  00008094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800661c  0800661c  0000761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006620  08006620  00007620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08006624  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  20000094  080066b8  00008094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  080066b8  00008874  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104a7  00000000  00000000  000080bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029bd  00000000  00000000  00018564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0001af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cde  00000000  00000000  0001bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001974e  00000000  00000000  0001cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001636b  00000000  00000000  000363dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3dc  00000000  00000000  0004c747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a4  00000000  00000000  000d9b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000033  00000000  00000000  000de40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	080059c0 	.word	0x080059c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	080059c0 	.word	0x080059c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <isButtonPressed>:
int KeyReg[10] = {0};
int TimeOutForKeyPress =  500;
int button_long_pressed[10]={0};
int button_flag[10]={0};
int state[10] = {0};
int isButtonPressed(int index){
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000164:	4a09      	ldr	r2, [pc, #36]	@ (800018c <isButtonPressed+0x30>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d106      	bne.n	800017e <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000170:	4a06      	ldr	r2, [pc, #24]	@ (800018c <isButtonPressed+0x30>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2100      	movs	r1, #0
 8000176:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800017a:	2301      	movs	r3, #1
 800017c:	e000      	b.n	8000180 <isButtonPressed+0x24>
	}
	return 0;
 800017e:	2300      	movs	r3, #0
}
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	20000100 	.word	0x20000100

08000190 <getKeyInput>:
		return 1;
	}
	return 0;
}

void getKeyInput(){
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
//  KeyReg2 = KeyReg1;
//  KeyReg1 = KeyReg0;
 	KeyReg[0] = HAL_GPIO_ReadPin(A0_GPIO_Port, A0_Pin);
 8000196:	2101      	movs	r1, #1
 8000198:	4858      	ldr	r0, [pc, #352]	@ (80002fc <getKeyInput+0x16c>)
 800019a:	f002 fbf1 	bl	8002980 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b57      	ldr	r3, [pc, #348]	@ (8000300 <getKeyInput+0x170>)
 80001a4:	601a      	str	r2, [r3, #0]
 	KeyReg[1] = HAL_GPIO_ReadPin(A1_GPIO_Port, A1_Pin);
 80001a6:	2102      	movs	r1, #2
 80001a8:	4854      	ldr	r0, [pc, #336]	@ (80002fc <getKeyInput+0x16c>)
 80001aa:	f002 fbe9 	bl	8002980 <HAL_GPIO_ReadPin>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b53      	ldr	r3, [pc, #332]	@ (8000300 <getKeyInput+0x170>)
 80001b4:	605a      	str	r2, [r3, #4]
 	KeyReg[2] = HAL_GPIO_ReadPin(A2_GPIO_Port, A2_Pin);
 80001b6:	2110      	movs	r1, #16
 80001b8:	4850      	ldr	r0, [pc, #320]	@ (80002fc <getKeyInput+0x16c>)
 80001ba:	f002 fbe1 	bl	8002980 <HAL_GPIO_ReadPin>
 80001be:	4603      	mov	r3, r0
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b4f      	ldr	r3, [pc, #316]	@ (8000300 <getKeyInput+0x170>)
 80001c4:	609a      	str	r2, [r3, #8]
 	KeyReg[3] = HAL_GPIO_ReadPin(A3_GPIO_Port, A3_Pin);
 80001c6:	2101      	movs	r1, #1
 80001c8:	484e      	ldr	r0, [pc, #312]	@ (8000304 <getKeyInput+0x174>)
 80001ca:	f002 fbd9 	bl	8002980 <HAL_GPIO_ReadPin>
 80001ce:	4603      	mov	r3, r0
 80001d0:	461a      	mov	r2, r3
 80001d2:	4b4b      	ldr	r3, [pc, #300]	@ (8000300 <getKeyInput+0x170>)
 80001d4:	60da      	str	r2, [r3, #12]
//  KeyReg[5] = HAL_GPIO_ReadPin(BUTTON6_GPIO_Port, BUTTON6_Pin);
//  KeyReg[6] = HAL_GPIO_ReadPin(BUTTON7_GPIO_Port, BUTTON7_Pin);
//  KeyReg[7] = HAL_GPIO_ReadPin(BUTTON8_GPIO_Port, BUTTON8_Pin);
//  KeyReg[8] = HAL_GPIO_ReadPin(BUTTON9_GPIO_Port, BUTTON9_Pin);
//  KeyReg[9] = HAL_GPIO_ReadPin(BUTTON10_GPIO_Port, BUTTON10_Pin);
  for(int i=0;i<4;i++){
 80001d6:	2300      	movs	r3, #0
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	e086      	b.n	80002ea <getKeyInput+0x15a>
	  switch(state[i]){
 80001dc:	4a4a      	ldr	r2, [pc, #296]	@ (8000308 <getKeyInput+0x178>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e4:	2b04      	cmp	r3, #4
 80001e6:	d878      	bhi.n	80002da <getKeyInput+0x14a>
 80001e8:	a201      	add	r2, pc, #4	@ (adr r2, 80001f0 <getKeyInput+0x60>)
 80001ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ee:	bf00      	nop
 80001f0:	08000205 	.word	0x08000205
 80001f4:	08000227 	.word	0x08000227
 80001f8:	0800024b 	.word	0x0800024b
 80001fc:	0800026f 	.word	0x0800026f
 8000200:	080002a5 	.word	0x080002a5
	  	case 0:	// KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE
		  button_flag[i] = 0;
 8000204:	4a41      	ldr	r2, [pc, #260]	@ (800030c <getKeyInput+0x17c>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2100      	movs	r1, #0
 800020a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  if(KeyReg[i] == PRESSED_STATE) state[i] = 1;
 800020e:	4a3c      	ldr	r2, [pc, #240]	@ (8000300 <getKeyInput+0x170>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d161      	bne.n	80002de <getKeyInput+0x14e>
 800021a:	4a3b      	ldr	r2, [pc, #236]	@ (8000308 <getKeyInput+0x178>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2101      	movs	r1, #1
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000224:	e05b      	b.n	80002de <getKeyInput+0x14e>
		case 1:	// KeyReg2 == NORMAL_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE)
 8000226:	4a36      	ldr	r2, [pc, #216]	@ (8000300 <getKeyInput+0x170>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d105      	bne.n	800023e <getKeyInput+0xae>
				state[i] = 3;
 8000232:	4a35      	ldr	r2, [pc, #212]	@ (8000308 <getKeyInput+0x178>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2103      	movs	r1, #3
 8000238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 2;
			break;
 800023c:	e052      	b.n	80002e4 <getKeyInput+0x154>
				state[i] = 2;
 800023e:	4a32      	ldr	r2, [pc, #200]	@ (8000308 <getKeyInput+0x178>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2102      	movs	r1, #2
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000248:	e04c      	b.n	80002e4 <getKeyInput+0x154>
		case 2:	// KeyReg2 == PRESSED_STATE && KeyReg1 == NORMAL_STATE
			if (KeyReg[i] == PRESSED_STATE)
 800024a:	4a2d      	ldr	r2, [pc, #180]	@ (8000300 <getKeyInput+0x170>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d105      	bne.n	8000262 <getKeyInput+0xd2>
				state[i] = 1;
 8000256:	4a2c      	ldr	r2, [pc, #176]	@ (8000308 <getKeyInput+0x178>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	2101      	movs	r1, #1
 800025c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			else
				state[i] = 0;
			break;
 8000260:	e040      	b.n	80002e4 <getKeyInput+0x154>
				state[i] = 0;
 8000262:	4a29      	ldr	r2, [pc, #164]	@ (8000308 <getKeyInput+0x178>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2100      	movs	r1, #0
 8000268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800026c:	e03a      	b.n	80002e4 <getKeyInput+0x154>
		case 3:	// KeyReg2 == PRESSED_STATE && KeyReg1 == PRESSED_STATE
			if (KeyReg[i] == PRESSED_STATE) {
 800026e:	4a24      	ldr	r2, [pc, #144]	@ (8000300 <getKeyInput+0x170>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d10e      	bne.n	8000298 <getKeyInput+0x108>
				button_flag[i] = 1;
 800027a:	4a24      	ldr	r2, [pc, #144]	@ (800030c <getKeyInput+0x17c>)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2101      	movs	r1, #1
 8000280:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				TimeOutForKeyPress = 500;
 8000284:	4b22      	ldr	r3, [pc, #136]	@ (8000310 <getKeyInput+0x180>)
 8000286:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800028a:	601a      	str	r2, [r3, #0]
				state[i] = 4;
 800028c:	4a1e      	ldr	r2, [pc, #120]	@ (8000308 <getKeyInput+0x178>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2104      	movs	r1, #4
 8000292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			} else
				state[i] = 1;
			break;
 8000296:	e025      	b.n	80002e4 <getKeyInput+0x154>
				state[i] = 1;
 8000298:	4a1b      	ldr	r2, [pc, #108]	@ (8000308 <getKeyInput+0x178>)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2101      	movs	r1, #1
 800029e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002a2:	e01f      	b.n	80002e4 <getKeyInput+0x154>
		case 4: // KeyReg2 == NORMAL_STATE && KeyReg1 == NORMAL_STATE && KeyReg0 = PRESSED_STATE
			if (KeyReg[i] != PRESSED_STATE) {
 80002a4:	4a16      	ldr	r2, [pc, #88]	@ (8000300 <getKeyInput+0x170>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d005      	beq.n	80002bc <getKeyInput+0x12c>
				state[i] = 1;
 80002b0:	4a15      	ldr	r2, [pc, #84]	@ (8000308 <getKeyInput+0x178>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80002ba:	e013      	b.n	80002e4 <getKeyInput+0x154>
			}
			TimeOutForKeyPress--;
 80002bc:	4b14      	ldr	r3, [pc, #80]	@ (8000310 <getKeyInput+0x180>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3b01      	subs	r3, #1
 80002c2:	4a13      	ldr	r2, [pc, #76]	@ (8000310 <getKeyInput+0x180>)
 80002c4:	6013      	str	r3, [r2, #0]
			if (TimeOutForKeyPress == 0) button_long_pressed[i] = 1;
 80002c6:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <getKeyInput+0x180>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d109      	bne.n	80002e2 <getKeyInput+0x152>
 80002ce:	4a11      	ldr	r2, [pc, #68]	@ (8000314 <getKeyInput+0x184>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2101      	movs	r1, #1
 80002d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80002d8:	e003      	b.n	80002e2 <getKeyInput+0x152>
		default:
			break;
 80002da:	bf00      	nop
 80002dc:	e002      	b.n	80002e4 <getKeyInput+0x154>
			break;
 80002de:	bf00      	nop
 80002e0:	e000      	b.n	80002e4 <getKeyInput+0x154>
			break;
 80002e2:	bf00      	nop
  for(int i=0;i<4;i++){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	f77f af75 	ble.w	80001dc <getKeyInput+0x4c>
	  }
  }
}
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800
 8000300:	200000b0 	.word	0x200000b0
 8000304:	40010c00 	.word	0x40010c00
 8000308:	20000128 	.word	0x20000128
 800030c:	20000100 	.word	0x20000100
 8000310:	20000000 	.word	0x20000000
 8000314:	200000d8 	.word	0x200000d8

08000318 <SendCommand>:
unsigned char UID[5];
unsigned char store_UID[5] = "";

int Server_State = OFF_SERVER;

void SendCommand(char* str){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
	command_size = strlen(str);
 8000320:	6878      	ldr	r0, [r7, #4]
 8000322:	f7ff ff13 	bl	800014c <strlen>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <SendCommand+0x48>)
 800032c:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 800032e:	6878      	ldr	r0, [r7, #4]
 8000330:	f7ff ff0c 	bl	800014c <strlen>
 8000334:	4603      	mov	r3, r0
 8000336:	b29a      	uxth	r2, r3
 8000338:	f04f 33ff 	mov.w	r3, #4294967295
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	4809      	ldr	r0, [pc, #36]	@ (8000364 <SendCommand+0x4c>)
 8000340:	f004 f85e 	bl	8004400 <HAL_UART_Transmit>
	if(Server_State == OFF_SERVER) HAL_UART_Receive_IT(&huart3, data_byte_receive,1);
 8000344:	4b08      	ldr	r3, [pc, #32]	@ (8000368 <SendCommand+0x50>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d104      	bne.n	8000356 <SendCommand+0x3e>
 800034c:	2201      	movs	r2, #1
 800034e:	4907      	ldr	r1, [pc, #28]	@ (800036c <SendCommand+0x54>)
 8000350:	4804      	ldr	r0, [pc, #16]	@ (8000364 <SendCommand+0x4c>)
 8000352:	f004 f8e0 	bl	8004516 <HAL_UART_Receive_IT>
}
 8000356:	bf00      	nop
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000574 	.word	0x20000574
 8000364:	2000068c 	.word	0x2000068c
 8000368:	20000020 	.word	0x20000020
 800036c:	20000150 	.word	0x20000150

08000370 <WaitForResponse>:
void WaitForResponse(int timeout,char* OKE_response,char* Error_response){
 8000370:	b580      	push	{r7, lr}
 8000372:	b086      	sub	sp, #24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
	uint32_t tickStart = HAL_GetTick();
 800037c:	f001 ff8e 	bl	800229c <HAL_GetTick>
 8000380:	6178      	str	r0, [r7, #20]
		while(Flag_Response == 0){
 8000382:	e026      	b.n	80003d2 <WaitForResponse+0x62>
			if(HAL_GetTick()-tickStart > timeout){
 8000384:	f001 ff8a 	bl	800229c <HAL_GetTick>
 8000388:	4602      	mov	r2, r0
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	1ad2      	subs	r2, r2, r3
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	429a      	cmp	r2, r3
 8000392:	d909      	bls.n	80003a8 <WaitForResponse+0x38>
				count_data_come = 0;
 8000394:	4b17      	ldr	r3, [pc, #92]	@ (80003f4 <WaitForResponse+0x84>)
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
				idx=0;
 800039a:	4b17      	ldr	r3, [pc, #92]	@ (80003f8 <WaitForResponse+0x88>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
				command_size=0;
 80003a0:	4b16      	ldr	r3, [pc, #88]	@ (80003fc <WaitForResponse+0x8c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
				return;
 80003a6:	e021      	b.n	80003ec <WaitForResponse+0x7c>
			}
			if(strstr((char*)ESP_Response,OKE_response) != NULL){
 80003a8:	68b9      	ldr	r1, [r7, #8]
 80003aa:	4815      	ldr	r0, [pc, #84]	@ (8000400 <WaitForResponse+0x90>)
 80003ac:	f004 fe6a 	bl	8005084 <strstr>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d003      	beq.n	80003be <WaitForResponse+0x4e>
				Flag_Response = 1;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <WaitForResponse+0x94>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	e009      	b.n	80003d2 <WaitForResponse+0x62>
			}
			else if(strstr((char*)ESP_Response,Error_response) != NULL){
 80003be:	6879      	ldr	r1, [r7, #4]
 80003c0:	480f      	ldr	r0, [pc, #60]	@ (8000400 <WaitForResponse+0x90>)
 80003c2:	f004 fe5f 	bl	8005084 <strstr>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d002      	beq.n	80003d2 <WaitForResponse+0x62>
				Flag_Response = 2;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <WaitForResponse+0x94>)
 80003ce:	2202      	movs	r2, #2
 80003d0:	601a      	str	r2, [r3, #0]
		while(Flag_Response == 0){
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <WaitForResponse+0x94>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0d4      	beq.n	8000384 <WaitForResponse+0x14>
			}
		}
		idx=0;
 80003da:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <WaitForResponse+0x88>)
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
		command_size =0;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <WaitForResponse+0x8c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
		count_data_come = 0;
 80003e6:	4b03      	ldr	r3, [pc, #12]	@ (80003f4 <WaitForResponse+0x84>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
}
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000570 	.word	0x20000570
 80003f8:	2000057c 	.word	0x2000057c
 80003fc:	20000574 	.word	0x20000574
 8000400:	20000154 	.word	0x20000154
 8000404:	20000578 	.word	0x20000578

08000408 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	if(Flag_Response == 0||Server_State==ON_SERVER) HAL_UART_Receive_IT(&huart3, data_byte_receive, 1);
 8000410:	4b16      	ldr	r3, [pc, #88]	@ (800046c <HAL_UART_RxCpltCallback+0x64>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d003      	beq.n	8000420 <HAL_UART_RxCpltCallback+0x18>
 8000418:	4b15      	ldr	r3, [pc, #84]	@ (8000470 <HAL_UART_RxCpltCallback+0x68>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d104      	bne.n	800042a <HAL_UART_RxCpltCallback+0x22>
 8000420:	2201      	movs	r2, #1
 8000422:	4914      	ldr	r1, [pc, #80]	@ (8000474 <HAL_UART_RxCpltCallback+0x6c>)
 8000424:	4814      	ldr	r0, [pc, #80]	@ (8000478 <HAL_UART_RxCpltCallback+0x70>)
 8000426:	f004 f876 	bl	8004516 <HAL_UART_Receive_IT>
		count_data_come++;
 800042a:	4b14      	ldr	r3, [pc, #80]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	4a12      	ldr	r2, [pc, #72]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 8000432:	6013      	str	r3, [r2, #0]
		if(count_data_come > command_size){
 8000434:	4b11      	ldr	r3, [pc, #68]	@ (800047c <HAL_UART_RxCpltCallback+0x74>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <HAL_UART_RxCpltCallback+0x78>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	dd10      	ble.n	8000462 <HAL_UART_RxCpltCallback+0x5a>
			ESP_Response[idx++] = data_byte_receive[0];
 8000440:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <HAL_UART_RxCpltCallback+0x7c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	490f      	ldr	r1, [pc, #60]	@ (8000484 <HAL_UART_RxCpltCallback+0x7c>)
 8000448:	600a      	str	r2, [r1, #0]
 800044a:	4a0a      	ldr	r2, [pc, #40]	@ (8000474 <HAL_UART_RxCpltCallback+0x6c>)
 800044c:	7811      	ldrb	r1, [r2, #0]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <HAL_UART_RxCpltCallback+0x80>)
 8000450:	54d1      	strb	r1, [r2, r3]
			if(idx>=1000){ //+IPD
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <HAL_UART_RxCpltCallback+0x7c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800045a:	db02      	blt.n	8000462 <HAL_UART_RxCpltCallback+0x5a>
				idx = 0;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <HAL_UART_RxCpltCallback+0x7c>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
			}
		}
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000578 	.word	0x20000578
 8000470:	20000020 	.word	0x20000020
 8000474:	20000150 	.word	0x20000150
 8000478:	2000068c 	.word	0x2000068c
 800047c:	20000570 	.word	0x20000570
 8000480:	20000574 	.word	0x20000574
 8000484:	2000057c 	.word	0x2000057c
 8000488:	20000154 	.word	0x20000154

0800048c <ESP_INIT>:
void ESP_INIT(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	SendCommand("AT+RESTORE\r\n");
 8000490:	4835      	ldr	r0, [pc, #212]	@ (8000568 <ESP_INIT+0xdc>)
 8000492:	f7ff ff41 	bl	8000318 <SendCommand>
	WaitForResponse(20000,"ready\r\n","ERROR\r\n");
 8000496:	4a35      	ldr	r2, [pc, #212]	@ (800056c <ESP_INIT+0xe0>)
 8000498:	4935      	ldr	r1, [pc, #212]	@ (8000570 <ESP_INIT+0xe4>)
 800049a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800049e:	f7ff ff67 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 80004a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004a6:	2100      	movs	r1, #0
 80004a8:	4832      	ldr	r0, [pc, #200]	@ (8000574 <ESP_INIT+0xe8>)
 80004aa:	f004 fde3 	bl	8005074 <memset>
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT rst OKE\r",sizeof("AT rst OKE\r"),HAL_MAX_DELAY);
//	}
//	else if(Flag_Response==2){
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT rst ERROR\r",sizeof("AT rst ERROR\r"),HAL_MAX_DELAY);
//	}
	Flag_Response = 0;
 80004ae:	4b32      	ldr	r3, [pc, #200]	@ (8000578 <ESP_INIT+0xec>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	601a      	str	r2, [r3, #0]
	SendCommand("AT+CWMODE=1\r\n");
 80004b4:	4831      	ldr	r0, [pc, #196]	@ (800057c <ESP_INIT+0xf0>)
 80004b6:	f7ff ff2f 	bl	8000318 <SendCommand>
	WaitForResponse(5000,"OK\r\n","ERROR\r\n");
 80004ba:	4a2c      	ldr	r2, [pc, #176]	@ (800056c <ESP_INIT+0xe0>)
 80004bc:	4930      	ldr	r1, [pc, #192]	@ (8000580 <ESP_INIT+0xf4>)
 80004be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004c2:	f7ff ff55 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 80004c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004ca:	2100      	movs	r1, #0
 80004cc:	4829      	ldr	r0, [pc, #164]	@ (8000574 <ESP_INIT+0xe8>)
 80004ce:	f004 fdd1 	bl	8005074 <memset>
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT CWMODE OKE\r",sizeof("AT CWMODE OKE\r"),HAL_MAX_DELAY);
//	}
//	else if(Flag_Response==2){
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT CWMODE ERROR\r",sizeof("AT CWMODE ERROR\r"),HAL_MAX_DELAY);
//	}
	Flag_Response = 0;
 80004d2:	4b29      	ldr	r3, [pc, #164]	@ (8000578 <ESP_INIT+0xec>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"AT+CWJAP=%s,%s\r\n",SSID,Pass);
 80004d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <ESP_INIT+0xf8>)
 80004da:	4a2b      	ldr	r2, [pc, #172]	@ (8000588 <ESP_INIT+0xfc>)
 80004dc:	492b      	ldr	r1, [pc, #172]	@ (800058c <ESP_INIT+0x100>)
 80004de:	482c      	ldr	r0, [pc, #176]	@ (8000590 <ESP_INIT+0x104>)
 80004e0:	f004 fda8 	bl	8005034 <siprintf>
	SendCommand(buffer);
 80004e4:	482a      	ldr	r0, [pc, #168]	@ (8000590 <ESP_INIT+0x104>)
 80004e6:	f7ff ff17 	bl	8000318 <SendCommand>
	memset(buffer,0,sizeof(buffer));
 80004ea:	2232      	movs	r2, #50	@ 0x32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4828      	ldr	r0, [pc, #160]	@ (8000590 <ESP_INIT+0x104>)
 80004f0:	f004 fdc0 	bl	8005074 <memset>
	WaitForResponse(20000,"OK\r\n","ERROR\r\n");
 80004f4:	4a1d      	ldr	r2, [pc, #116]	@ (800056c <ESP_INIT+0xe0>)
 80004f6:	4922      	ldr	r1, [pc, #136]	@ (8000580 <ESP_INIT+0xf4>)
 80004f8:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80004fc:	f7ff ff38 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000500:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000504:	2100      	movs	r1, #0
 8000506:	481b      	ldr	r0, [pc, #108]	@ (8000574 <ESP_INIT+0xe8>)
 8000508:	f004 fdb4 	bl	8005074 <memset>
//	}
//	else if(Flag_Response==2){
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT CWJAP ERROR\r",sizeof("AT CWJAP ERROR\r"),HAL_MAX_DELAY);
//	}

	Flag_Response = 0;
 800050c:	4b1a      	ldr	r3, [pc, #104]	@ (8000578 <ESP_INIT+0xec>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
	SendCommand("AT+CIPMUX=1\r\n");
 8000512:	4820      	ldr	r0, [pc, #128]	@ (8000594 <ESP_INIT+0x108>)
 8000514:	f7ff ff00 	bl	8000318 <SendCommand>
	WaitForResponse(5000,"OK\r\n","ERROR\r\n");
 8000518:	4a14      	ldr	r2, [pc, #80]	@ (800056c <ESP_INIT+0xe0>)
 800051a:	4919      	ldr	r1, [pc, #100]	@ (8000580 <ESP_INIT+0xf4>)
 800051c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000520:	f7ff ff26 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000524:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000528:	2100      	movs	r1, #0
 800052a:	4812      	ldr	r0, [pc, #72]	@ (8000574 <ESP_INIT+0xe8>)
 800052c:	f004 fda2 	bl	8005074 <memset>
//		}
//	else if(Flag_Response==2){
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT CIPMUX ERROR\r",sizeof("AT CIPMUX ERROR\r"),HAL_MAX_DELAY);
//	}

	Flag_Response = 0;
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <ESP_INIT+0xec>)
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
	SendCommand("AT+CIPSERVER=1,80\r\n");
 8000536:	4818      	ldr	r0, [pc, #96]	@ (8000598 <ESP_INIT+0x10c>)
 8000538:	f7ff feee 	bl	8000318 <SendCommand>
	WaitForResponse(5000,"OK\r\n","ERROR\r\n");
 800053c:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <ESP_INIT+0xe0>)
 800053e:	4910      	ldr	r1, [pc, #64]	@ (8000580 <ESP_INIT+0xf4>)
 8000540:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000544:	f7ff ff14 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000548:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800054c:	2100      	movs	r1, #0
 800054e:	4809      	ldr	r0, [pc, #36]	@ (8000574 <ESP_INIT+0xe8>)
 8000550:	f004 fd90 	bl	8005074 <memset>
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT CIPSERVER OKE\r",sizeof("AT CIPSERVER OKE\r"),HAL_MAX_DELAY);
//	}
//	else if(Flag_Response==2){
//		HAL_UART_Transmit(&huart3,(uint8_t*)"AT CIPSERVER ERROR\r",sizeof("AT CIPSERVER ERROR\r"),HAL_MAX_DELAY);
//	}
	Server_State = ON_SERVER;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <ESP_INIT+0x110>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart3, data_byte_receive, 1);
 800055a:	2201      	movs	r2, #1
 800055c:	4910      	ldr	r1, [pc, #64]	@ (80005a0 <ESP_INIT+0x114>)
 800055e:	4811      	ldr	r0, [pc, #68]	@ (80005a4 <ESP_INIT+0x118>)
 8000560:	f003 ffd9 	bl	8004516 <HAL_UART_Receive_IT>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	080063c4 	.word	0x080063c4
 800056c:	080063d4 	.word	0x080063d4
 8000570:	080063dc 	.word	0x080063dc
 8000574:	20000154 	.word	0x20000154
 8000578:	20000578 	.word	0x20000578
 800057c:	080063e4 	.word	0x080063e4
 8000580:	080063f4 	.word	0x080063f4
 8000584:	20000008 	.word	0x20000008
 8000588:	20000004 	.word	0x20000004
 800058c:	080063fc 	.word	0x080063fc
 8000590:	2000053c 	.word	0x2000053c
 8000594:	08006410 	.word	0x08006410
 8000598:	08006420 	.word	0x08006420
 800059c:	20000020 	.word	0x20000020
 80005a0:	20000150 	.word	0x20000150
 80005a4:	2000068c 	.word	0x2000068c

080005a8 <Server_Send>:
void Server_Send(int linkID,char* str){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	Flag_Response = 0;
 80005b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <Server_Send+0xc0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"AT+CIPSEND=%d,%d\r\n",linkID,strlen(str));
 80005b8:	6838      	ldr	r0, [r7, #0]
 80005ba:	f7ff fdc7 	bl	800014c <strlen>
 80005be:	4603      	mov	r3, r0
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	492a      	ldr	r1, [pc, #168]	@ (800066c <Server_Send+0xc4>)
 80005c4:	482a      	ldr	r0, [pc, #168]	@ (8000670 <Server_Send+0xc8>)
 80005c6:	f004 fd35 	bl	8005034 <siprintf>
	SendCommand(buffer);
 80005ca:	4829      	ldr	r0, [pc, #164]	@ (8000670 <Server_Send+0xc8>)
 80005cc:	f7ff fea4 	bl	8000318 <SendCommand>
	memset(buffer,0,sizeof(buffer));
 80005d0:	2232      	movs	r2, #50	@ 0x32
 80005d2:	2100      	movs	r1, #0
 80005d4:	4826      	ldr	r0, [pc, #152]	@ (8000670 <Server_Send+0xc8>)
 80005d6:	f004 fd4d 	bl	8005074 <memset>
	WaitForResponse(10000,">","ERROR");
 80005da:	4a26      	ldr	r2, [pc, #152]	@ (8000674 <Server_Send+0xcc>)
 80005dc:	4926      	ldr	r1, [pc, #152]	@ (8000678 <Server_Send+0xd0>)
 80005de:	f242 7010 	movw	r0, #10000	@ 0x2710
 80005e2:	f7ff fec5 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 80005e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80005ea:	2100      	movs	r1, #0
 80005ec:	4823      	ldr	r0, [pc, #140]	@ (800067c <Server_Send+0xd4>)
 80005ee:	f004 fd41 	bl	8005074 <memset>

	Flag_Response = 0;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000668 <Server_Send+0xc0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 80005f8:	6838      	ldr	r0, [r7, #0]
 80005fa:	f7ff fda7 	bl	800014c <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	6839      	ldr	r1, [r7, #0]
 8000608:	481d      	ldr	r0, [pc, #116]	@ (8000680 <Server_Send+0xd8>)
 800060a:	f003 fef9 	bl	8004400 <HAL_UART_Transmit>
	WaitForResponse(20000,"SEND OK","SEND FAIL");
 800060e:	4a1d      	ldr	r2, [pc, #116]	@ (8000684 <Server_Send+0xdc>)
 8000610:	491d      	ldr	r1, [pc, #116]	@ (8000688 <Server_Send+0xe0>)
 8000612:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000616:	f7ff feab 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 800061a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800061e:	2100      	movs	r1, #0
 8000620:	4816      	ldr	r0, [pc, #88]	@ (800067c <Server_Send+0xd4>)
 8000622:	f004 fd27 	bl	8005074 <memset>

	Flag_Response = 0;
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <Server_Send+0xc0>)
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"AT+CIPCLOSE=%d\r\n",linkID);
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4917      	ldr	r1, [pc, #92]	@ (800068c <Server_Send+0xe4>)
 8000630:	480f      	ldr	r0, [pc, #60]	@ (8000670 <Server_Send+0xc8>)
 8000632:	f004 fcff 	bl	8005034 <siprintf>
	SendCommand(buffer);
 8000636:	480e      	ldr	r0, [pc, #56]	@ (8000670 <Server_Send+0xc8>)
 8000638:	f7ff fe6e 	bl	8000318 <SendCommand>
	memset(buffer,0,sizeof(buffer));
 800063c:	2232      	movs	r2, #50	@ 0x32
 800063e:	2100      	movs	r1, #0
 8000640:	480b      	ldr	r0, [pc, #44]	@ (8000670 <Server_Send+0xc8>)
 8000642:	f004 fd17 	bl	8005074 <memset>
	WaitForResponse(10000,"OK\r\n","ERROR\r\n");
 8000646:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <Server_Send+0xe8>)
 8000648:	4912      	ldr	r1, [pc, #72]	@ (8000694 <Server_Send+0xec>)
 800064a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800064e:	f7ff fe8f 	bl	8000370 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000652:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000656:	2100      	movs	r1, #0
 8000658:	4808      	ldr	r0, [pc, #32]	@ (800067c <Server_Send+0xd4>)
 800065a:	f004 fd0b 	bl	8005074 <memset>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000578 	.word	0x20000578
 800066c:	08006434 	.word	0x08006434
 8000670:	2000053c 	.word	0x2000053c
 8000674:	08006448 	.word	0x08006448
 8000678:	08006450 	.word	0x08006450
 800067c:	20000154 	.word	0x20000154
 8000680:	2000068c 	.word	0x2000068c
 8000684:	08006454 	.word	0x08006454
 8000688:	08006460 	.word	0x08006460
 800068c:	08006468 	.word	0x08006468
 8000690:	080063d4 	.word	0x080063d4
 8000694:	080063f4 	.word	0x080063f4

08000698 <server_on>:
void server_on(){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
	char* pos = strstr((char*)ESP_Response,"+IPD,");
 800069e:	49a0      	ldr	r1, [pc, #640]	@ (8000920 <server_on+0x288>)
 80006a0:	48a0      	ldr	r0, [pc, #640]	@ (8000924 <server_on+0x28c>)
 80006a2:	f004 fcef 	bl	8005084 <strstr>
 80006a6:	6078      	str	r0, [r7, #4]
	if(pos!=NULL){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <server_on+0x26>
			store_char = Link_ID;
 80006ae:	4b9e      	ldr	r3, [pc, #632]	@ (8000928 <server_on+0x290>)
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b9e      	ldr	r3, [pc, #632]	@ (800092c <server_on+0x294>)
 80006b4:	701a      	strb	r2, [r3, #0]
			Link_ID = (*(pos+5));
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	795a      	ldrb	r2, [r3, #5]
 80006ba:	4b9b      	ldr	r3, [pc, #620]	@ (8000928 <server_on+0x290>)
 80006bc:	701a      	strb	r2, [r3, #0]
	}
	if(store_char == Link_ID && Link_ID >='0' && Link_ID <= '4'){
 80006be:	4b9b      	ldr	r3, [pc, #620]	@ (800092c <server_on+0x294>)
 80006c0:	781a      	ldrb	r2, [r3, #0]
 80006c2:	4b99      	ldr	r3, [pc, #612]	@ (8000928 <server_on+0x290>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	f040 8171 	bne.w	80009ae <server_on+0x316>
 80006cc:	4b96      	ldr	r3, [pc, #600]	@ (8000928 <server_on+0x290>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80006d2:	f240 816c 	bls.w	80009ae <server_on+0x316>
 80006d6:	4b94      	ldr	r3, [pc, #592]	@ (8000928 <server_on+0x290>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b34      	cmp	r3, #52	@ 0x34
 80006dc:	f200 8167 	bhi.w	80009ae <server_on+0x316>
		if(strstr((char*)ESP_Response,"GET")!=NULL){
 80006e0:	4993      	ldr	r1, [pc, #588]	@ (8000930 <server_on+0x298>)
 80006e2:	4890      	ldr	r0, [pc, #576]	@ (8000924 <server_on+0x28c>)
 80006e4:	f004 fcce 	bl	8005084 <strstr>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 815f 	beq.w	80009ae <server_on+0x316>
		   if(strstr((char*)ESP_Response,"/home")!=NULL){
 80006f0:	4990      	ldr	r1, [pc, #576]	@ (8000934 <server_on+0x29c>)
 80006f2:	488c      	ldr	r0, [pc, #560]	@ (8000924 <server_on+0x28c>)
 80006f4:	f004 fcc6 	bl	8005084 <strstr>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d01d      	beq.n	800073a <server_on+0xa2>
			    Server_Send(Link_ID-48, home);
 80006fe:	4b8a      	ldr	r3, [pc, #552]	@ (8000928 <server_on+0x290>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	3b30      	subs	r3, #48	@ 0x30
 8000704:	4a8c      	ldr	r2, [pc, #560]	@ (8000938 <server_on+0x2a0>)
 8000706:	6812      	ldr	r2, [r2, #0]
 8000708:	4611      	mov	r1, r2
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff4c 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 8000710:	4b8a      	ldr	r3, [pc, #552]	@ (800093c <server_on+0x2a4>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 8000716:	4a8a      	ldr	r2, [pc, #552]	@ (8000940 <server_on+0x2a8>)
 8000718:	498a      	ldr	r1, [pc, #552]	@ (8000944 <server_on+0x2ac>)
 800071a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800071e:	f7ff fe27 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000722:	4b86      	ldr	r3, [pc, #536]	@ (800093c <server_on+0x2a4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	f040 8141 	bne.w	80009ae <server_on+0x316>
 800072c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000730:	2100      	movs	r1, #0
 8000732:	487c      	ldr	r0, [pc, #496]	@ (8000924 <server_on+0x28c>)
 8000734:	f004 fc9e 	bl	8005074 <memset>
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
			}
		}
	}
}
 8000738:	e139      	b.n	80009ae <server_on+0x316>
			else if(strstr((char*)ESP_Response,"/manual")!=NULL){
 800073a:	4983      	ldr	r1, [pc, #524]	@ (8000948 <server_on+0x2b0>)
 800073c:	4879      	ldr	r0, [pc, #484]	@ (8000924 <server_on+0x28c>)
 800073e:	f004 fca1 	bl	8005084 <strstr>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d022      	beq.n	800078e <server_on+0xf6>
				status_fsm = RED_GREEN_MANUAL;
 8000748:	4b80      	ldr	r3, [pc, #512]	@ (800094c <server_on+0x2b4>)
 800074a:	2205      	movs	r2, #5
 800074c:	601a      	str	r2, [r3, #0]
				lcd_clear_display();
 800074e:	f000 fc74 	bl	800103a <lcd_clear_display>
				Server_Send(Link_ID-48,manual);
 8000752:	4b75      	ldr	r3, [pc, #468]	@ (8000928 <server_on+0x290>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3b30      	subs	r3, #48	@ 0x30
 8000758:	4a7d      	ldr	r2, [pc, #500]	@ (8000950 <server_on+0x2b8>)
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff22 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 8000764:	4b75      	ldr	r3, [pc, #468]	@ (800093c <server_on+0x2a4>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800076a:	4a75      	ldr	r2, [pc, #468]	@ (8000940 <server_on+0x2a8>)
 800076c:	4975      	ldr	r1, [pc, #468]	@ (8000944 <server_on+0x2ac>)
 800076e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000772:	f7ff fdfd 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000776:	4b71      	ldr	r3, [pc, #452]	@ (800093c <server_on+0x2a4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b01      	cmp	r3, #1
 800077c:	f040 8117 	bne.w	80009ae <server_on+0x316>
 8000780:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000784:	2100      	movs	r1, #0
 8000786:	4867      	ldr	r0, [pc, #412]	@ (8000924 <server_on+0x28c>)
 8000788:	f004 fc74 	bl	8005074 <memset>
}
 800078c:	e10f      	b.n	80009ae <server_on+0x316>
			else if(strstr((char*)ESP_Response,"/redgreen")!=NULL){
 800078e:	4971      	ldr	r1, [pc, #452]	@ (8000954 <server_on+0x2bc>)
 8000790:	4864      	ldr	r0, [pc, #400]	@ (8000924 <server_on+0x28c>)
 8000792:	f004 fc77 	bl	8005084 <strstr>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d020      	beq.n	80007de <server_on+0x146>
				status_fsm = RED_GREEN_MANUAL;
 800079c:	4b6b      	ldr	r3, [pc, #428]	@ (800094c <server_on+0x2b4>)
 800079e:	2205      	movs	r2, #5
 80007a0:	601a      	str	r2, [r3, #0]
				Server_Send(Link_ID-48,manual);
 80007a2:	4b61      	ldr	r3, [pc, #388]	@ (8000928 <server_on+0x290>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3b30      	subs	r3, #48	@ 0x30
 80007a8:	4a69      	ldr	r2, [pc, #420]	@ (8000950 <server_on+0x2b8>)
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fefa 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 80007b4:	4b61      	ldr	r3, [pc, #388]	@ (800093c <server_on+0x2a4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 80007ba:	4a61      	ldr	r2, [pc, #388]	@ (8000940 <server_on+0x2a8>)
 80007bc:	4961      	ldr	r1, [pc, #388]	@ (8000944 <server_on+0x2ac>)
 80007be:	f242 7010 	movw	r0, #10000	@ 0x2710
 80007c2:	f7ff fdd5 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 80007c6:	4b5d      	ldr	r3, [pc, #372]	@ (800093c <server_on+0x2a4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	f040 80ef 	bne.w	80009ae <server_on+0x316>
 80007d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007d4:	2100      	movs	r1, #0
 80007d6:	4853      	ldr	r0, [pc, #332]	@ (8000924 <server_on+0x28c>)
 80007d8:	f004 fc4c 	bl	8005074 <memset>
}
 80007dc:	e0e7      	b.n	80009ae <server_on+0x316>
			else if(strstr((char*)ESP_Response,"/redyellow")!=NULL){
 80007de:	495e      	ldr	r1, [pc, #376]	@ (8000958 <server_on+0x2c0>)
 80007e0:	4850      	ldr	r0, [pc, #320]	@ (8000924 <server_on+0x28c>)
 80007e2:	f004 fc4f 	bl	8005084 <strstr>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d020      	beq.n	800082e <server_on+0x196>
				status_fsm = RED_YELLOW_MANUAL;
 80007ec:	4b57      	ldr	r3, [pc, #348]	@ (800094c <server_on+0x2b4>)
 80007ee:	2206      	movs	r2, #6
 80007f0:	601a      	str	r2, [r3, #0]
				Server_Send(Link_ID-48,manual);
 80007f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000928 <server_on+0x290>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	3b30      	subs	r3, #48	@ 0x30
 80007f8:	4a55      	ldr	r2, [pc, #340]	@ (8000950 <server_on+0x2b8>)
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	4611      	mov	r1, r2
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fed2 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 8000804:	4b4d      	ldr	r3, [pc, #308]	@ (800093c <server_on+0x2a4>)
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800080a:	4a4d      	ldr	r2, [pc, #308]	@ (8000940 <server_on+0x2a8>)
 800080c:	494d      	ldr	r1, [pc, #308]	@ (8000944 <server_on+0x2ac>)
 800080e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000812:	f7ff fdad 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <server_on+0x2a4>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	f040 80c7 	bne.w	80009ae <server_on+0x316>
 8000820:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000824:	2100      	movs	r1, #0
 8000826:	483f      	ldr	r0, [pc, #252]	@ (8000924 <server_on+0x28c>)
 8000828:	f004 fc24 	bl	8005074 <memset>
}
 800082c:	e0bf      	b.n	80009ae <server_on+0x316>
			else if(strstr((char*)ESP_Response,"/greenred")!=NULL){
 800082e:	494b      	ldr	r1, [pc, #300]	@ (800095c <server_on+0x2c4>)
 8000830:	483c      	ldr	r0, [pc, #240]	@ (8000924 <server_on+0x28c>)
 8000832:	f004 fc27 	bl	8005084 <strstr>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d020      	beq.n	800087e <server_on+0x1e6>
				status_fsm = GREEN_RED_MANUAL;
 800083c:	4b43      	ldr	r3, [pc, #268]	@ (800094c <server_on+0x2b4>)
 800083e:	2207      	movs	r2, #7
 8000840:	601a      	str	r2, [r3, #0]
				Server_Send(Link_ID-48,manual);
 8000842:	4b39      	ldr	r3, [pc, #228]	@ (8000928 <server_on+0x290>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3b30      	subs	r3, #48	@ 0x30
 8000848:	4a41      	ldr	r2, [pc, #260]	@ (8000950 <server_on+0x2b8>)
 800084a:	6812      	ldr	r2, [r2, #0]
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff feaa 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 8000854:	4b39      	ldr	r3, [pc, #228]	@ (800093c <server_on+0x2a4>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800085a:	4a39      	ldr	r2, [pc, #228]	@ (8000940 <server_on+0x2a8>)
 800085c:	4939      	ldr	r1, [pc, #228]	@ (8000944 <server_on+0x2ac>)
 800085e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000862:	f7ff fd85 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000866:	4b35      	ldr	r3, [pc, #212]	@ (800093c <server_on+0x2a4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	f040 809f 	bne.w	80009ae <server_on+0x316>
 8000870:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000874:	2100      	movs	r1, #0
 8000876:	482b      	ldr	r0, [pc, #172]	@ (8000924 <server_on+0x28c>)
 8000878:	f004 fbfc 	bl	8005074 <memset>
}
 800087c:	e097      	b.n	80009ae <server_on+0x316>
			else if(strstr((char*)ESP_Response,"/yellowred")!=NULL){
 800087e:	4938      	ldr	r1, [pc, #224]	@ (8000960 <server_on+0x2c8>)
 8000880:	4828      	ldr	r0, [pc, #160]	@ (8000924 <server_on+0x28c>)
 8000882:	f004 fbff 	bl	8005084 <strstr>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d01f      	beq.n	80008cc <server_on+0x234>
				status_fsm = YELLOW_RED_MANUAL;
 800088c:	4b2f      	ldr	r3, [pc, #188]	@ (800094c <server_on+0x2b4>)
 800088e:	2208      	movs	r2, #8
 8000890:	601a      	str	r2, [r3, #0]
				Server_Send(Link_ID-48,manual);
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <server_on+0x290>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	3b30      	subs	r3, #48	@ 0x30
 8000898:	4a2d      	ldr	r2, [pc, #180]	@ (8000950 <server_on+0x2b8>)
 800089a:	6812      	ldr	r2, [r2, #0]
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe82 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 80008a4:	4b25      	ldr	r3, [pc, #148]	@ (800093c <server_on+0x2a4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 80008aa:	4a25      	ldr	r2, [pc, #148]	@ (8000940 <server_on+0x2a8>)
 80008ac:	4925      	ldr	r1, [pc, #148]	@ (8000944 <server_on+0x2ac>)
 80008ae:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008b2:	f7ff fd5d 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 80008b6:	4b21      	ldr	r3, [pc, #132]	@ (800093c <server_on+0x2a4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d177      	bne.n	80009ae <server_on+0x316>
 80008be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c2:	2100      	movs	r1, #0
 80008c4:	4817      	ldr	r0, [pc, #92]	@ (8000924 <server_on+0x28c>)
 80008c6:	f004 fbd5 	bl	8005074 <memset>
}
 80008ca:	e070      	b.n	80009ae <server_on+0x316>
			else if(strstr((char*)ESP_Response,"/run")!=NULL){
 80008cc:	4925      	ldr	r1, [pc, #148]	@ (8000964 <server_on+0x2cc>)
 80008ce:	4815      	ldr	r0, [pc, #84]	@ (8000924 <server_on+0x28c>)
 80008d0:	f004 fbd8 	bl	8005084 <strstr>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d046      	beq.n	8000968 <server_on+0x2d0>
				lcd_clear_display();
 80008da:	f000 fbae 	bl	800103a <lcd_clear_display>
				status_fsm = INIT;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <server_on+0x2b4>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	601a      	str	r2, [r3, #0]
				Server_Send(Link_ID-48, home);
 80008e4:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <server_on+0x290>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	3b30      	subs	r3, #48	@ 0x30
 80008ea:	4a13      	ldr	r2, [pc, #76]	@ (8000938 <server_on+0x2a0>)
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	4611      	mov	r1, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe59 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <server_on+0x2a4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 80008fc:	4a10      	ldr	r2, [pc, #64]	@ (8000940 <server_on+0x2a8>)
 80008fe:	4911      	ldr	r1, [pc, #68]	@ (8000944 <server_on+0x2ac>)
 8000900:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000904:	f7ff fd34 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <server_on+0x2a4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d14e      	bne.n	80009ae <server_on+0x316>
 8000910:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000914:	2100      	movs	r1, #0
 8000916:	4803      	ldr	r0, [pc, #12]	@ (8000924 <server_on+0x28c>)
 8000918:	f004 fbac 	bl	8005074 <memset>
}
 800091c:	e047      	b.n	80009ae <server_on+0x316>
 800091e:	bf00      	nop
 8000920:	0800647c 	.word	0x0800647c
 8000924:	20000154 	.word	0x20000154
 8000928:	20000013 	.word	0x20000013
 800092c:	20000014 	.word	0x20000014
 8000930:	08006484 	.word	0x08006484
 8000934:	08006488 	.word	0x08006488
 8000938:	20000018 	.word	0x20000018
 800093c:	20000578 	.word	0x20000578
 8000940:	080063d4 	.word	0x080063d4
 8000944:	08006490 	.word	0x08006490
 8000948:	08006494 	.word	0x08006494
 800094c:	20000024 	.word	0x20000024
 8000950:	2000001c 	.word	0x2000001c
 8000954:	0800649c 	.word	0x0800649c
 8000958:	080064a8 	.word	0x080064a8
 800095c:	080064b4 	.word	0x080064b4
 8000960:	080064c0 	.word	0x080064c0
 8000964:	080064cc 	.word	0x080064cc
			else if(strstr((char*)ESP_Response,"/ ")!=NULL){
 8000968:	4913      	ldr	r1, [pc, #76]	@ (80009b8 <server_on+0x320>)
 800096a:	4814      	ldr	r0, [pc, #80]	@ (80009bc <server_on+0x324>)
 800096c:	f004 fb8a 	bl	8005084 <strstr>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d01b      	beq.n	80009ae <server_on+0x316>
				Server_Send(Link_ID-48, home);
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <server_on+0x328>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3b30      	subs	r3, #48	@ 0x30
 800097c:	4a11      	ldr	r2, [pc, #68]	@ (80009c4 <server_on+0x32c>)
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe10 	bl	80005a8 <Server_Send>
				Flag_Response = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <server_on+0x330>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800098e:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <server_on+0x334>)
 8000990:	490f      	ldr	r1, [pc, #60]	@ (80009d0 <server_on+0x338>)
 8000992:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000996:	f7ff fceb 	bl	8000370 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 800099a:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <server_on+0x330>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d105      	bne.n	80009ae <server_on+0x316>
 80009a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a6:	2100      	movs	r1, #0
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <server_on+0x324>)
 80009aa:	f004 fb63 	bl	8005074 <memset>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	080064d4 	.word	0x080064d4
 80009bc:	20000154 	.word	0x20000154
 80009c0:	20000013 	.word	0x20000013
 80009c4:	20000018 	.word	0x20000018
 80009c8:	20000578 	.word	0x20000578
 80009cc:	080063d4 	.word	0x080063d4
 80009d0:	08006490 	.word	0x08006490

080009d4 <fsm_autorun>:
 *      Author: ADMIN
 */
#include "global.h"
#include "fsm_autorun.h"
int status_fsm = INIT;
void fsm_autorun(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	if(button_flag[0] && status_fsm < INIT){
 80009d8:	4b6e      	ldr	r3, [pc, #440]	@ (8000b94 <fsm_autorun+0x1c0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d00d      	beq.n	80009fc <fsm_autorun+0x28>
 80009e0:	4b6d      	ldr	r3, [pc, #436]	@ (8000b98 <fsm_autorun+0x1c4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	dc09      	bgt.n	80009fc <fsm_autorun+0x28>
			status_fsm += 5;
 80009e8:	4b6b      	ldr	r3, [pc, #428]	@ (8000b98 <fsm_autorun+0x1c4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3305      	adds	r3, #5
 80009ee:	4a6a      	ldr	r2, [pc, #424]	@ (8000b98 <fsm_autorun+0x1c4>)
 80009f0:	6013      	str	r3, [r2, #0]
			button_flag[0] = 0;
 80009f2:	4b68      	ldr	r3, [pc, #416]	@ (8000b94 <fsm_autorun+0x1c0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
			lcd_clear_display();
 80009f8:	f000 fb1f 	bl	800103a <lcd_clear_display>
	}
	switch(status_fsm){
 80009fc:	4b66      	ldr	r3, [pc, #408]	@ (8000b98 <fsm_autorun+0x1c4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	f200 80bb 	bhi.w	8000b7c <fsm_autorun+0x1a8>
 8000a06:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <fsm_autorun+0x38>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a5b 	.word	0x08000a5b
 8000a10:	08000a97 	.word	0x08000a97
 8000a14:	08000b43 	.word	0x08000b43
 8000a18:	08000aed 	.word	0x08000aed
 8000a1c:	08000a21 	.word	0x08000a21
	case INIT:
		status_fsm = RED_GREEN;
 8000a20:	4b5d      	ldr	r3, [pc, #372]	@ (8000b98 <fsm_autorun+0x1c4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
		setTimer(1, 1000*red_time);
 8000a26:	4b5d      	ldr	r3, [pc, #372]	@ (8000b9c <fsm_autorun+0x1c8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2e:	fb02 f303 	mul.w	r3, r2, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	2001      	movs	r0, #1
 8000a36:	f001 fb63 	bl	8002100 <setTimer>
		setTimer(2, 1000*green_time);
 8000a3a:	4b59      	ldr	r3, [pc, #356]	@ (8000ba0 <fsm_autorun+0x1cc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a42:	fb02 f303 	mul.w	r3, r2, r3
 8000a46:	4619      	mov	r1, r3
 8000a48:	2002      	movs	r0, #2
 8000a4a:	f001 fb59 	bl	8002100 <setTimer>
		setTimer(3, 1000);
 8000a4e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a52:	2003      	movs	r0, #3
 8000a54:	f001 fb54 	bl	8002100 <setTimer>
		break;
 8000a58:	e099      	b.n	8000b8e <fsm_autorun+0x1ba>
	case RED_GREEN:
		led_red_and_green();
 8000a5a:	f000 fe1f 	bl	800169c <led_red_and_green>
		if(flag_timer[2] == 1){
 8000a5e:	4b51      	ldr	r3, [pc, #324]	@ (8000ba4 <fsm_autorun+0x1d0>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	f040 808c 	bne.w	8000b80 <fsm_autorun+0x1ac>
			status_fsm = RED_YELLOW;
 8000a68:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <fsm_autorun+0x1c4>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
			setTimer(2, 1000*yellow_time);
 8000a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba8 <fsm_autorun+0x1d4>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a76:	fb02 f303 	mul.w	r3, r2, r3
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f001 fb3f 	bl	8002100 <setTimer>

			lcd_yellow_time = yellow_time;
 8000a82:	4b49      	ldr	r3, [pc, #292]	@ (8000ba8 <fsm_autorun+0x1d4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a49      	ldr	r2, [pc, #292]	@ (8000bac <fsm_autorun+0x1d8>)
 8000a88:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000a8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f001 fb36 	bl	8002100 <setTimer>
		}
		break;
 8000a94:	e074      	b.n	8000b80 <fsm_autorun+0x1ac>
	case RED_YELLOW:
		led_red_and_yellow();
 8000a96:	f000 fdcb 	bl	8001630 <led_red_and_yellow>
		if(flag_timer[2] == 1){
 8000a9a:	4b42      	ldr	r3, [pc, #264]	@ (8000ba4 <fsm_autorun+0x1d0>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d170      	bne.n	8000b84 <fsm_autorun+0x1b0>
			status_fsm = GREEN_RED;
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8000b98 <fsm_autorun+0x1c4>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*green_time);
 8000aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ba0 <fsm_autorun+0x1cc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ab0:	fb02 f303 	mul.w	r3, r2, r3
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 fb22 	bl	8002100 <setTimer>
			setTimer(2, 1000*red_time);
 8000abc:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <fsm_autorun+0x1c8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ac4:	fb02 f303 	mul.w	r3, r2, r3
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2002      	movs	r0, #2
 8000acc:	f001 fb18 	bl	8002100 <setTimer>

			lcd_green_time = green_time;
 8000ad0:	4b33      	ldr	r3, [pc, #204]	@ (8000ba0 <fsm_autorun+0x1cc>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a36      	ldr	r2, [pc, #216]	@ (8000bb0 <fsm_autorun+0x1dc>)
 8000ad6:	6013      	str	r3, [r2, #0]
			lcd_red_time = red_time;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <fsm_autorun+0x1c8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a35      	ldr	r2, [pc, #212]	@ (8000bb4 <fsm_autorun+0x1e0>)
 8000ade:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000ae0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f001 fb0b 	bl	8002100 <setTimer>
		}
		break;
 8000aea:	e04b      	b.n	8000b84 <fsm_autorun+0x1b0>
	case YELLOW_RED:
		led_yellow_and_red();
 8000aec:	f000 fe0c 	bl	8001708 <led_yellow_and_red>
		if(flag_timer[1] ==1){
 8000af0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba4 <fsm_autorun+0x1d0>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d147      	bne.n	8000b88 <fsm_autorun+0x1b4>
			status_fsm = RED_GREEN;
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <fsm_autorun+0x1c4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*red_time);
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <fsm_autorun+0x1c8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b06:	fb02 f303 	mul.w	r3, r2, r3
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	f001 faf7 	bl	8002100 <setTimer>
			setTimer(2,1000*green_time);
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <fsm_autorun+0x1cc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2002      	movs	r0, #2
 8000b22:	f001 faed 	bl	8002100 <setTimer>

			lcd_red_time = red_time;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <fsm_autorun+0x1c8>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a22      	ldr	r2, [pc, #136]	@ (8000bb4 <fsm_autorun+0x1e0>)
 8000b2c:	6013      	str	r3, [r2, #0]
			lcd_green_time = green_time;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <fsm_autorun+0x1cc>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb0 <fsm_autorun+0x1dc>)
 8000b34:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000b36:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f001 fae0 	bl	8002100 <setTimer>
		}
		break;
 8000b40:	e022      	b.n	8000b88 <fsm_autorun+0x1b4>
	case GREEN_RED:
		led_green_and_red();
 8000b42:	f000 fe17 	bl	8001774 <led_green_and_red>
		if(flag_timer[1] == 1){
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <fsm_autorun+0x1d0>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d11e      	bne.n	8000b8c <fsm_autorun+0x1b8>
			status_fsm = YELLOW_RED;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <fsm_autorun+0x1c4>)
 8000b50:	2203      	movs	r2, #3
 8000b52:	601a      	str	r2, [r3, #0]
			setTimer(1,1000*yellow_time);
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <fsm_autorun+0x1d4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 facc 	bl	8002100 <setTimer>

			lcd_yellow_time = yellow_time;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <fsm_autorun+0x1d4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <fsm_autorun+0x1d8>)
 8000b6e:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 8000b70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b74:	2003      	movs	r0, #3
 8000b76:	f001 fac3 	bl	8002100 <setTimer>
		}
		break;
 8000b7a:	e007      	b.n	8000b8c <fsm_autorun+0x1b8>
	default:
		break;
 8000b7c:	bf00      	nop
 8000b7e:	e006      	b.n	8000b8e <fsm_autorun+0x1ba>
		break;
 8000b80:	bf00      	nop
 8000b82:	e004      	b.n	8000b8e <fsm_autorun+0x1ba>
		break;
 8000b84:	bf00      	nop
 8000b86:	e002      	b.n	8000b8e <fsm_autorun+0x1ba>
		break;
 8000b88:	bf00      	nop
 8000b8a:	e000      	b.n	8000b8e <fsm_autorun+0x1ba>
		break;
 8000b8c:	bf00      	nop
	}
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000100 	.word	0x20000100
 8000b98:	20000024 	.word	0x20000024
 8000b9c:	2000002c 	.word	0x2000002c
 8000ba0:	20000034 	.word	0x20000034
 8000ba4:	20000700 	.word	0x20000700
 8000ba8:	20000030 	.word	0x20000030
 8000bac:	20000594 	.word	0x20000594
 8000bb0:	20000590 	.word	0x20000590
 8000bb4:	2000058c 	.word	0x2000058c

08000bb8 <fsm_manual>:
 *  Created on: Nov 1, 2024
 *      Author: ADMIN
 */
#include "global.h"
#include "fsm_manual.h"
void fsm_manual(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	if((button_flag[0]==1) && (status_fsm >= RED_GREEN_MANUAL) && (status_fsm <= YELLOW_RED_MANUAL)){
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <fsm_manual+0xc4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10f      	bne.n	8000be4 <fsm_manual+0x2c>
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c80 <fsm_manual+0xc8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	dd0b      	ble.n	8000be4 <fsm_manual+0x2c>
 8000bcc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c80 <fsm_manual+0xc8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b08      	cmp	r3, #8
 8000bd2:	dc07      	bgt.n	8000be4 <fsm_manual+0x2c>
		status_fsm = INIT_SETTING;
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <fsm_manual+0xc8>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
		button_flag[0] = 0;
 8000bda:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <fsm_manual+0xc4>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
		lcd_clear_display();
 8000be0:	f000 fa2b 	bl	800103a <lcd_clear_display>
	}
	switch(status_fsm){
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <fsm_manual+0xc8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b05      	subs	r3, #5
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d83a      	bhi.n	8000c64 <fsm_manual+0xac>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <fsm_manual+0x3c>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c05 	.word	0x08000c05
 8000bf8:	08000c1d 	.word	0x08000c1d
 8000bfc:	08000c35 	.word	0x08000c35
 8000c00:	08000c4d 	.word	0x08000c4d
	case RED_GREEN_MANUAL:
		led_red_and_green();
 8000c04:	f000 fd4a 	bl	800169c <led_red_and_green>
		if(isButtonPressed(1)){
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff faa7 	bl	800015c <isButtonPressed>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d029      	beq.n	8000c68 <fsm_manual+0xb0>
			status_fsm = RED_YELLOW_MANUAL;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <fsm_manual+0xc8>)
 8000c16:	2206      	movs	r2, #6
 8000c18:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c1a:	e025      	b.n	8000c68 <fsm_manual+0xb0>
	case RED_YELLOW_MANUAL:
		led_red_and_yellow();
 8000c1c:	f000 fd08 	bl	8001630 <led_red_and_yellow>
		if(isButtonPressed(1)){
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fa9b 	bl	800015c <isButtonPressed>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d01f      	beq.n	8000c6c <fsm_manual+0xb4>
			status_fsm = GREEN_RED_MANUAL;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <fsm_manual+0xc8>)
 8000c2e:	2207      	movs	r2, #7
 8000c30:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c32:	e01b      	b.n	8000c6c <fsm_manual+0xb4>
	case GREEN_RED_MANUAL:
		led_green_and_red();
 8000c34:	f000 fd9e 	bl	8001774 <led_green_and_red>
		if(isButtonPressed(1)){
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fa8f 	bl	800015c <isButtonPressed>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d015      	beq.n	8000c70 <fsm_manual+0xb8>
			status_fsm = YELLOW_RED_MANUAL;
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <fsm_manual+0xc8>)
 8000c46:	2208      	movs	r2, #8
 8000c48:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c4a:	e011      	b.n	8000c70 <fsm_manual+0xb8>
	case YELLOW_RED_MANUAL:
		led_yellow_and_red();
 8000c4c:	f000 fd5c 	bl	8001708 <led_yellow_and_red>
		if(isButtonPressed(1)){
 8000c50:	2001      	movs	r0, #1
 8000c52:	f7ff fa83 	bl	800015c <isButtonPressed>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d00b      	beq.n	8000c74 <fsm_manual+0xbc>
			status_fsm = RED_GREEN_MANUAL;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <fsm_manual+0xc8>)
 8000c5e:	2205      	movs	r2, #5
 8000c60:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c62:	e007      	b.n	8000c74 <fsm_manual+0xbc>
	default:
		break;
 8000c64:	bf00      	nop
 8000c66:	e006      	b.n	8000c76 <fsm_manual+0xbe>
		break;
 8000c68:	bf00      	nop
 8000c6a:	e004      	b.n	8000c76 <fsm_manual+0xbe>
		break;
 8000c6c:	bf00      	nop
 8000c6e:	e002      	b.n	8000c76 <fsm_manual+0xbe>
		break;
 8000c70:	bf00      	nop
 8000c72:	e000      	b.n	8000c76 <fsm_manual+0xbe>
		break;
 8000c74:	bf00      	nop
	}
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000024 	.word	0x20000024

08000c84 <fsm_setting>:
#include "global.h"
int status_ld = 1;
int red_time_increase = 0;
int green_time_increase = 0;
int yellow_time_increase = 0;
void fsm_setting(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	switch(status_fsm){
 8000c88:	4b90      	ldr	r3, [pc, #576]	@ (8000ecc <fsm_setting+0x248>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	f200 8112 	bhi.w	8000eb8 <fsm_setting+0x234>
 8000c94:	a201      	add	r2, pc, #4	@ (adr r2, 8000c9c <fsm_setting+0x18>)
 8000c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9a:	bf00      	nop
 8000c9c:	08000ce7 	.word	0x08000ce7
 8000ca0:	08000e23 	.word	0x08000e23
 8000ca4:	08000d89 	.word	0x08000d89
 8000ca8:	08000cad 	.word	0x08000cad
	case INIT_SETTING:
		red_time_increase = 0;
 8000cac:	4b88      	ldr	r3, [pc, #544]	@ (8000ed0 <fsm_setting+0x24c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
		green_time_increase = 0;
 8000cb2:	4b88      	ldr	r3, [pc, #544]	@ (8000ed4 <fsm_setting+0x250>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
		yellow_time_increase = 0;
 8000cb8:	4b87      	ldr	r3, [pc, #540]	@ (8000ed8 <fsm_setting+0x254>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

		status_fsm = RED_SETTING;
 8000cbe:	4b83      	ldr	r3, [pc, #524]	@ (8000ecc <fsm_setting+0x248>)
 8000cc0:	2209      	movs	r2, #9
 8000cc2:	601a      	str	r2, [r3, #0]

		setTimer(4,500);
 8000cc4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cc8:	2004      	movs	r0, #4
 8000cca:	f001 fa19 	bl	8002100 <setTimer>

		all_led_red_off();
 8000cce:	f000 fdbd 	bl	800184c <all_led_red_off>
		all_led_red_on();
 8000cd2:	f000 fd85 	bl	80017e0 <all_led_red_on>

		lcd_goto_XY(1, 0);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f000 f9b5 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("    SETTING    ");
 8000cde:	487f      	ldr	r0, [pc, #508]	@ (8000edc <fsm_setting+0x258>)
 8000ce0:	f000 f996 	bl	8001010 <lcd_send_string>
		break;
 8000ce4:	e0ef      	b.n	8000ec6 <fsm_setting+0x242>
	case RED_SETTING:
		if(isButtonPressed(0)){
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fa38 	bl	800015c <isButtonPressed>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d009      	beq.n	8000d06 <fsm_setting+0x82>
			status_fsm = GREEN_SETTING;
 8000cf2:	4b76      	ldr	r3, [pc, #472]	@ (8000ecc <fsm_setting+0x248>)
 8000cf4:	220b      	movs	r2, #11
 8000cf6:	601a      	str	r2, [r3, #0]

			all_led_red_off();
 8000cf8:	f000 fda8 	bl	800184c <all_led_red_off>
			all_led_green_on();
 8000cfc:	f000 fddc 	bl	80018b8 <all_led_green_on>
			status_ld = 1;
 8000d00:	4b77      	ldr	r3, [pc, #476]	@ (8000ee0 <fsm_setting+0x25c>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)){
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fa28 	bl	800015c <isButtonPressed>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d010      	beq.n	8000d34 <fsm_setting+0xb0>
			red_time_increase++;
 8000d12:	4b6f      	ldr	r3, [pc, #444]	@ (8000ed0 <fsm_setting+0x24c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a6d      	ldr	r2, [pc, #436]	@ (8000ed0 <fsm_setting+0x24c>)
 8000d1a:	6013      	str	r3, [r2, #0]
			if(red_time_increase + red_time > 99) {
 8000d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8000ed0 <fsm_setting+0x24c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b70      	ldr	r3, [pc, #448]	@ (8000ee4 <fsm_setting+0x260>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4413      	add	r3, r2
 8000d26:	2b63      	cmp	r3, #99	@ 0x63
 8000d28:	dd04      	ble.n	8000d34 <fsm_setting+0xb0>
				red_time_increase = 0 - red_time;
 8000d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee4 <fsm_setting+0x260>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	425b      	negs	r3, r3
 8000d30:	4a67      	ldr	r2, [pc, #412]	@ (8000ed0 <fsm_setting+0x24c>)
 8000d32:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff fa11 	bl	800015c <isButtonPressed>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d009      	beq.n	8000d54 <fsm_setting+0xd0>
			red_time += red_time_increase;
 8000d40:	4b68      	ldr	r3, [pc, #416]	@ (8000ee4 <fsm_setting+0x260>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b62      	ldr	r3, [pc, #392]	@ (8000ed0 <fsm_setting+0x24c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a66      	ldr	r2, [pc, #408]	@ (8000ee4 <fsm_setting+0x260>)
 8000d4c:	6013      	str	r3, [r2, #0]
			red_time_increase = 0;
 8000d4e:	4b60      	ldr	r3, [pc, #384]	@ (8000ed0 <fsm_setting+0x24c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
		}
		if(flag_timer[4] == 1){
 8000d54:	4b64      	ldr	r3, [pc, #400]	@ (8000ee8 <fsm_setting+0x264>)
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	f040 80af 	bne.w	8000ebc <fsm_setting+0x238>
			if(status_ld == 1){
 8000d5e:	4b60      	ldr	r3, [pc, #384]	@ (8000ee0 <fsm_setting+0x25c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d105      	bne.n	8000d72 <fsm_setting+0xee>
				all_led_red_off();
 8000d66:	f000 fd71 	bl	800184c <all_led_red_off>
				status_ld = 0;
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <fsm_setting+0x25c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	e004      	b.n	8000d7c <fsm_setting+0xf8>
			}
			else{
				all_led_red_on();
 8000d72:	f000 fd35 	bl	80017e0 <all_led_red_on>
				status_ld = 1;
 8000d76:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee0 <fsm_setting+0x25c>)
 8000d78:	2201      	movs	r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]
			}
			setTimer(4,500);
 8000d7c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d80:	2004      	movs	r0, #4
 8000d82:	f001 f9bd 	bl	8002100 <setTimer>
		}
		break;
 8000d86:	e099      	b.n	8000ebc <fsm_setting+0x238>
	case GREEN_SETTING:
		if(isButtonPressed(0)){
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff f9e7 	bl	800015c <isButtonPressed>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <fsm_setting+0x11e>
			status_fsm = YELLOW_SETTING;
 8000d94:	4b4d      	ldr	r3, [pc, #308]	@ (8000ecc <fsm_setting+0x248>)
 8000d96:	220a      	movs	r2, #10
 8000d98:	601a      	str	r2, [r3, #0]

			all_led_red_off();
 8000d9a:	f000 fd57 	bl	800184c <all_led_red_off>
			all_led_yellow_on();
 8000d9e:	f000 fdc1 	bl	8001924 <all_led_yellow_on>

		}
		if(isButtonPressed(1)){
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff f9da 	bl	800015c <isButtonPressed>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d010      	beq.n	8000dd0 <fsm_setting+0x14c>
			green_time_increase++;
 8000dae:	4b49      	ldr	r3, [pc, #292]	@ (8000ed4 <fsm_setting+0x250>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a47      	ldr	r2, [pc, #284]	@ (8000ed4 <fsm_setting+0x250>)
 8000db6:	6013      	str	r3, [r2, #0]
			if(green_time_increase + green_time > 99) {
 8000db8:	4b46      	ldr	r3, [pc, #280]	@ (8000ed4 <fsm_setting+0x250>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8000eec <fsm_setting+0x268>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	2b63      	cmp	r3, #99	@ 0x63
 8000dc4:	dd04      	ble.n	8000dd0 <fsm_setting+0x14c>
				green_time_increase = 0 - green_time;
 8000dc6:	4b49      	ldr	r3, [pc, #292]	@ (8000eec <fsm_setting+0x268>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	425b      	negs	r3, r3
 8000dcc:	4a41      	ldr	r2, [pc, #260]	@ (8000ed4 <fsm_setting+0x250>)
 8000dce:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f7ff f9c3 	bl	800015c <isButtonPressed>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d009      	beq.n	8000df0 <fsm_setting+0x16c>
			green_time += green_time_increase;
 8000ddc:	4b43      	ldr	r3, [pc, #268]	@ (8000eec <fsm_setting+0x268>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed4 <fsm_setting+0x250>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a41      	ldr	r2, [pc, #260]	@ (8000eec <fsm_setting+0x268>)
 8000de8:	6013      	str	r3, [r2, #0]
			green_time_increase = 0;
 8000dea:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <fsm_setting+0x250>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
		}
		if(flag_timer[4] == 1){
 8000df0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee8 <fsm_setting+0x264>)
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d163      	bne.n	8000ec0 <fsm_setting+0x23c>
			if(status_ld == 1){
 8000df8:	4b39      	ldr	r3, [pc, #228]	@ (8000ee0 <fsm_setting+0x25c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <fsm_setting+0x188>
				all_led_red_off();
 8000e00:	f000 fd24 	bl	800184c <all_led_red_off>
				//all_led_green_off();
				status_ld = 0;
 8000e04:	4b36      	ldr	r3, [pc, #216]	@ (8000ee0 <fsm_setting+0x25c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e004      	b.n	8000e16 <fsm_setting+0x192>
			}
			else{
				all_led_green_on();
 8000e0c:	f000 fd54 	bl	80018b8 <all_led_green_on>
				status_ld = 1;
 8000e10:	4b33      	ldr	r3, [pc, #204]	@ (8000ee0 <fsm_setting+0x25c>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
			}
			setTimer(4,500);
 8000e16:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000e1a:	2004      	movs	r0, #4
 8000e1c:	f001 f970 	bl	8002100 <setTimer>
		}
		break;
 8000e20:	e04e      	b.n	8000ec0 <fsm_setting+0x23c>
	case YELLOW_SETTING:
		if(isButtonPressed(0)){
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff f99a 	bl	800015c <isButtonPressed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <fsm_setting+0x1b4>
			all_led_red_off();
 8000e2e:	f000 fd0d 	bl	800184c <all_led_red_off>
			status_fsm = INIT;
 8000e32:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <fsm_setting+0x248>)
 8000e34:	2204      	movs	r2, #4
 8000e36:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1)){
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff f98f 	bl	800015c <isButtonPressed>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d010      	beq.n	8000e66 <fsm_setting+0x1e2>
			yellow_time_increase++;
 8000e44:	4b24      	ldr	r3, [pc, #144]	@ (8000ed8 <fsm_setting+0x254>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ed8 <fsm_setting+0x254>)
 8000e4c:	6013      	str	r3, [r2, #0]
			if(yellow_time_increase + yellow_time > 99) {
 8000e4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <fsm_setting+0x254>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <fsm_setting+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	2b63      	cmp	r3, #99	@ 0x63
 8000e5a:	dd04      	ble.n	8000e66 <fsm_setting+0x1e2>
				yellow_time_increase = 0 - yellow_time;
 8000e5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ef0 <fsm_setting+0x26c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	425b      	negs	r3, r3
 8000e62:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed8 <fsm_setting+0x254>)
 8000e64:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 8000e66:	2002      	movs	r0, #2
 8000e68:	f7ff f978 	bl	800015c <isButtonPressed>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d009      	beq.n	8000e86 <fsm_setting+0x202>
			yellow_time += yellow_time_increase;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <fsm_setting+0x26c>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <fsm_setting+0x254>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef0 <fsm_setting+0x26c>)
 8000e7e:	6013      	str	r3, [r2, #0]
			yellow_time_increase = 0;
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <fsm_setting+0x254>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]

		}
		if(flag_timer[4] == 1){
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <fsm_setting+0x264>)
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d11a      	bne.n	8000ec4 <fsm_setting+0x240>
			if(status_ld == 1){
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <fsm_setting+0x25c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d105      	bne.n	8000ea2 <fsm_setting+0x21e>
				all_led_red_off();
 8000e96:	f000 fcd9 	bl	800184c <all_led_red_off>
				//all_led_yellow_off();
				status_ld = 0;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <fsm_setting+0x25c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e004      	b.n	8000eac <fsm_setting+0x228>
			}
			else{
				all_led_yellow_on();
 8000ea2:	f000 fd3f 	bl	8001924 <all_led_yellow_on>
				status_ld = 1;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <fsm_setting+0x25c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
			}
			setTimer(4,500);
 8000eac:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f001 f925 	bl	8002100 <setTimer>
		}
		break;
 8000eb6:	e005      	b.n	8000ec4 <fsm_setting+0x240>
	default:
		break;
 8000eb8:	bf00      	nop
 8000eba:	e004      	b.n	8000ec6 <fsm_setting+0x242>
		break;
 8000ebc:	bf00      	nop
 8000ebe:	e002      	b.n	8000ec6 <fsm_setting+0x242>
		break;
 8000ec0:	bf00      	nop
 8000ec2:	e000      	b.n	8000ec6 <fsm_setting+0x242>
		break;
 8000ec4:	bf00      	nop
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000024 	.word	0x20000024
 8000ed0:	20000580 	.word	0x20000580
 8000ed4:	20000584 	.word	0x20000584
 8000ed8:	20000588 	.word	0x20000588
 8000edc:	080064d8 	.word	0x080064d8
 8000ee0:	20000028 	.word	0x20000028
 8000ee4:	2000002c 	.word	0x2000002c
 8000ee8:	20000700 	.word	0x20000700
 8000eec:	20000034 	.word	0x20000034
 8000ef0:	20000030 	.word	0x20000030

08000ef4 <lcd_send_cmd>:
//int lcd_red_time = 0;
//int lcd_green_time = 0;
//int lcd_yellow_time = 0;
char lcd_buf[16];
void lcd_send_cmd (char cmd)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd&0xf0);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f023 030f 	bic.w	r3, r3, #15
 8000f04:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd<<4)&0xf0);
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	f043 030c 	orr.w	r3, r3, #12
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	f043 030c 	orr.w	r3, r3, #12
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f34:	f107 0208 	add.w	r2, r7, #8
 8000f38:	2364      	movs	r3, #100	@ 0x64
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	214e      	movs	r1, #78	@ 0x4e
 8000f40:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <lcd_send_cmd+0x5c>)
 8000f42:	f001 feb3 	bl	8002cac <HAL_I2C_Master_Transmit>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200005a8 	.word	0x200005a8

08000f54 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data&0xf0);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	73fb      	strb	r3, [r7, #15]
    data_l = ((data<<4)&0xf0);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f043 030d 	orr.w	r3, r3, #13
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0309 	orr.w	r3, r3, #9
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	f043 030d 	orr.w	r3, r3, #13
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f043 0309 	orr.w	r3, r3, #9
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f94:	f107 0208 	add.w	r2, r7, #8
 8000f98:	2364      	movs	r3, #100	@ 0x64
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	214e      	movs	r1, #78	@ 0x4e
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <lcd_send_data+0x5c>)
 8000fa2:	f001 fe83 	bl	8002cac <HAL_I2C_Master_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200005a8 	.word	0x200005a8

08000fb4 <lcd_init>:

void lcd_init (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
    lcd_send_cmd (0x33); /* set 4-bits interface */
 8000fb8:	2033      	movs	r0, #51	@ 0x33
 8000fba:	f7ff ff9b 	bl	8000ef4 <lcd_send_cmd>
    lcd_send_cmd (0x32);
 8000fbe:	2032      	movs	r0, #50	@ 0x32
 8000fc0:	f7ff ff98 	bl	8000ef4 <lcd_send_cmd>
    HAL_Delay(50);
 8000fc4:	2032      	movs	r0, #50	@ 0x32
 8000fc6:	f001 f973 	bl	80022b0 <HAL_Delay>
    lcd_send_cmd (0x28); /* start to set LCD function */
 8000fca:	2028      	movs	r0, #40	@ 0x28
 8000fcc:	f7ff ff92 	bl	8000ef4 <lcd_send_cmd>
    HAL_Delay(50);
 8000fd0:	2032      	movs	r0, #50	@ 0x32
 8000fd2:	f001 f96d 	bl	80022b0 <HAL_Delay>
    lcd_send_cmd (0x01); /* clear display */
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff ff8c 	bl	8000ef4 <lcd_send_cmd>
    HAL_Delay(50);
 8000fdc:	2032      	movs	r0, #50	@ 0x32
 8000fde:	f001 f967 	bl	80022b0 <HAL_Delay>
    lcd_send_cmd (0x06); /* set entry mode */
 8000fe2:	2006      	movs	r0, #6
 8000fe4:	f7ff ff86 	bl	8000ef4 <lcd_send_cmd>
    HAL_Delay(50);
 8000fe8:	2032      	movs	r0, #50	@ 0x32
 8000fea:	f001 f961 	bl	80022b0 <HAL_Delay>
    lcd_send_cmd (0x0c); /* set display to on */
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f7ff ff80 	bl	8000ef4 <lcd_send_cmd>
    HAL_Delay(50);
 8000ff4:	2032      	movs	r0, #50	@ 0x32
 8000ff6:	f001 f95b 	bl	80022b0 <HAL_Delay>
    lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	f7ff ff7a 	bl	8000ef4 <lcd_send_cmd>
    HAL_Delay(50);
 8001000:	2032      	movs	r0, #50	@ 0x32
 8001002:	f001 f955 	bl	80022b0 <HAL_Delay>
    lcd_send_cmd (0x80);
 8001006:	2080      	movs	r0, #128	@ 0x80
 8001008:	f7ff ff74 	bl	8000ef4 <lcd_send_cmd>
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data (*str++);
 8001018:	e006      	b.n	8001028 <lcd_send_string+0x18>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff96 	bl	8000f54 <lcd_send_data>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d1f4      	bne.n	800101a <lcd_send_string+0xa>
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <lcd_clear_display>:

void lcd_clear_display (void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
    lcd_send_cmd (0x01); //clear display
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ff58 	bl	8000ef4 <lcd_send_cmd>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    uint8_t pos_Addr;
    if(row == 1)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d108      	bne.n	800106a <lcd_goto_XY+0x22>
    {
        pos_Addr = 0x80 + row - 1 + col;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	b2db      	uxtb	r3, r3
 8001064:	337f      	adds	r3, #127	@ 0x7f
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	e008      	b.n	800107c <lcd_goto_XY+0x34>
    }
    else
    {
        pos_Addr = 0x80 | (0x40 + col);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	3340      	adds	r3, #64	@ 0x40
 8001070:	b2db      	uxtb	r3, r3
 8001072:	b25b      	sxtb	r3, r3
 8001074:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001078:	b25b      	sxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
    }
    lcd_send_cmd(pos_Addr);
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ff38 	bl	8000ef4 <lcd_send_cmd>
}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <lcd_run>:
void lcd_run(){
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	if(button_flag[0] && status_fsm < INIT){
 8001090:	4b94      	ldr	r3, [pc, #592]	@ (80012e4 <lcd_run+0x258>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <lcd_run+0x1a>
 8001098:	4b93      	ldr	r3, [pc, #588]	@ (80012e8 <lcd_run+0x25c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	dc02      	bgt.n	80010a6 <lcd_run+0x1a>
				lcd_clear_display();
 80010a0:	f7ff ffcb 	bl	800103a <lcd_clear_display>
				return;
 80010a4:	e299      	b.n	80015da <lcd_run+0x54e>
	}
	switch(status_fsm){
 80010a6:	4b90      	ldr	r3, [pc, #576]	@ (80012e8 <lcd_run+0x25c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	f200 828c 	bhi.w	80015c8 <lcd_run+0x53c>
 80010b0:	a201      	add	r2, pc, #4	@ (adr r2, 80010b8 <lcd_run+0x2c>)
 80010b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b6:	bf00      	nop
 80010b8:	08001127 	.word	0x08001127
 80010bc:	08001205 	.word	0x08001205
 80010c0:	08001315 	.word	0x08001315
 80010c4:	080013f3 	.word	0x080013f3
 80010c8:	080010ed 	.word	0x080010ed
 80010cc:	080014d1 	.word	0x080014d1
 80010d0:	080014ef 	.word	0x080014ef
 80010d4:	0800150d 	.word	0x0800150d
 80010d8:	0800152b 	.word	0x0800152b
 80010dc:	0800155d 	.word	0x0800155d
 80010e0:	08001581 	.word	0x08001581
 80010e4:	080015a5 	.word	0x080015a5
 80010e8:	08001549 	.word	0x08001549
	case INIT:
		lcd_red_time = red_time;
 80010ec:	4b7f      	ldr	r3, [pc, #508]	@ (80012ec <lcd_run+0x260>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a7f      	ldr	r2, [pc, #508]	@ (80012f0 <lcd_run+0x264>)
 80010f2:	6013      	str	r3, [r2, #0]
		lcd_yellow_time = yellow_time;
 80010f4:	4b7f      	ldr	r3, [pc, #508]	@ (80012f4 <lcd_run+0x268>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a7f      	ldr	r2, [pc, #508]	@ (80012f8 <lcd_run+0x26c>)
 80010fa:	6013      	str	r3, [r2, #0]
		lcd_green_time = green_time;
 80010fc:	4b7f      	ldr	r3, [pc, #508]	@ (80012fc <lcd_run+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a7f      	ldr	r2, [pc, #508]	@ (8001300 <lcd_run+0x274>)
 8001102:	6013      	str	r3, [r2, #0]
		//setTimer(5,1000);
		lcd_init();
 8001104:	f7ff ff56 	bl	8000fb4 <lcd_init>

		lcd_goto_XY(1,0);
 8001108:	2100      	movs	r1, #0
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff ff9c 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("TIME 01:");
 8001110:	487c      	ldr	r0, [pc, #496]	@ (8001304 <lcd_run+0x278>)
 8001112:	f7ff ff7d 	bl	8001010 <lcd_send_string>
		lcd_goto_XY(2,0);
 8001116:	2100      	movs	r1, #0
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff ff95 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("TIME 02:");
 800111e:	487a      	ldr	r0, [pc, #488]	@ (8001308 <lcd_run+0x27c>)
 8001120:	f7ff ff76 	bl	8001010 <lcd_send_string>
		break;
 8001124:	e259      	b.n	80015da <lcd_run+0x54e>
	case RED_GREEN:
		lcd_goto_XY(1,8);
 8001126:	2108      	movs	r1, #8
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ff8d 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 800112e:	4b70      	ldr	r3, [pc, #448]	@ (80012f0 <lcd_run+0x264>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a76      	ldr	r2, [pc, #472]	@ (800130c <lcd_run+0x280>)
 8001134:	fb82 1203 	smull	r1, r2, r2, r3
 8001138:	1092      	asrs	r2, r2, #2
 800113a:	17db      	asrs	r3, r3, #31
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3330      	adds	r3, #48	@ 0x30
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff05 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(1,9);
 800114a:	2109      	movs	r1, #9
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff7b 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 8001152:	4b67      	ldr	r3, [pc, #412]	@ (80012f0 <lcd_run+0x264>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	4b6d      	ldr	r3, [pc, #436]	@ (800130c <lcd_run+0x280>)
 8001158:	fb83 1302 	smull	r1, r3, r3, r2
 800115c:	1099      	asrs	r1, r3, #2
 800115e:	17d3      	asrs	r3, r2, #31
 8001160:	1ac9      	subs	r1, r1, r3
 8001162:	460b      	mov	r3, r1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	440b      	add	r3, r1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	1ad1      	subs	r1, r2, r3
 800116c:	b2cb      	uxtb	r3, r1
 800116e:	3330      	adds	r3, #48	@ 0x30
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff feee 	bl	8000f54 <lcd_send_data>

		lcd_goto_XY(2,8);
 8001178:	2108      	movs	r1, #8
 800117a:	2002      	movs	r0, #2
 800117c:	f7ff ff64 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_green_time/10 + 48);
 8001180:	4b5f      	ldr	r3, [pc, #380]	@ (8001300 <lcd_run+0x274>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a61      	ldr	r2, [pc, #388]	@ (800130c <lcd_run+0x280>)
 8001186:	fb82 1203 	smull	r1, r2, r2, r3
 800118a:	1092      	asrs	r2, r2, #2
 800118c:	17db      	asrs	r3, r3, #31
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	b2db      	uxtb	r3, r3
 8001192:	3330      	adds	r3, #48	@ 0x30
 8001194:	b2db      	uxtb	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fedc 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(2,9);
 800119c:	2109      	movs	r1, #9
 800119e:	2002      	movs	r0, #2
 80011a0:	f7ff ff52 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_green_time%10 + 48);
 80011a4:	4b56      	ldr	r3, [pc, #344]	@ (8001300 <lcd_run+0x274>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b58      	ldr	r3, [pc, #352]	@ (800130c <lcd_run+0x280>)
 80011aa:	fb83 1302 	smull	r1, r3, r3, r2
 80011ae:	1099      	asrs	r1, r3, #2
 80011b0:	17d3      	asrs	r3, r2, #31
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	460b      	mov	r3, r1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	1ad1      	subs	r1, r2, r3
 80011be:	b2cb      	uxtb	r3, r1
 80011c0:	3330      	adds	r3, #48	@ 0x30
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fec5 	bl	8000f54 <lcd_send_data>
		if(flag_timer[3] == 1){
 80011ca:	4b51      	ldr	r3, [pc, #324]	@ (8001310 <lcd_run+0x284>)
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	f040 81fc 	bne.w	80015cc <lcd_run+0x540>
			if(lcd_red_time > 0) lcd_red_time--;
 80011d4:	4b46      	ldr	r3, [pc, #280]	@ (80012f0 <lcd_run+0x264>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	dd04      	ble.n	80011e6 <lcd_run+0x15a>
 80011dc:	4b44      	ldr	r3, [pc, #272]	@ (80012f0 <lcd_run+0x264>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	4a43      	ldr	r2, [pc, #268]	@ (80012f0 <lcd_run+0x264>)
 80011e4:	6013      	str	r3, [r2, #0]
			if(lcd_green_time >0) lcd_green_time--;
 80011e6:	4b46      	ldr	r3, [pc, #280]	@ (8001300 <lcd_run+0x274>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dd04      	ble.n	80011f8 <lcd_run+0x16c>
 80011ee:	4b44      	ldr	r3, [pc, #272]	@ (8001300 <lcd_run+0x274>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	4a42      	ldr	r2, [pc, #264]	@ (8001300 <lcd_run+0x274>)
 80011f6:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 80011f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 ff7f 	bl	8002100 <setTimer>
		}
		break;
 8001202:	e1e3      	b.n	80015cc <lcd_run+0x540>
	case RED_YELLOW:
		lcd_goto_XY(1,8);
 8001204:	2108      	movs	r1, #8
 8001206:	2001      	movs	r0, #1
 8001208:	f7ff ff1e 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 800120c:	4b38      	ldr	r3, [pc, #224]	@ (80012f0 <lcd_run+0x264>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a3e      	ldr	r2, [pc, #248]	@ (800130c <lcd_run+0x280>)
 8001212:	fb82 1203 	smull	r1, r2, r2, r3
 8001216:	1092      	asrs	r2, r2, #2
 8001218:	17db      	asrs	r3, r3, #31
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	3330      	adds	r3, #48	@ 0x30
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe96 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(1,9);
 8001228:	2109      	movs	r1, #9
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff ff0c 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 8001230:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <lcd_run+0x264>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b35      	ldr	r3, [pc, #212]	@ (800130c <lcd_run+0x280>)
 8001236:	fb83 1302 	smull	r1, r3, r3, r2
 800123a:	1099      	asrs	r1, r3, #2
 800123c:	17d3      	asrs	r3, r2, #31
 800123e:	1ac9      	subs	r1, r1, r3
 8001240:	460b      	mov	r3, r1
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	1ad1      	subs	r1, r2, r3
 800124a:	b2cb      	uxtb	r3, r1
 800124c:	3330      	adds	r3, #48	@ 0x30
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe7f 	bl	8000f54 <lcd_send_data>

		lcd_goto_XY(2,8);
 8001256:	2108      	movs	r1, #8
 8001258:	2002      	movs	r0, #2
 800125a:	f7ff fef5 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time/10 + 48);
 800125e:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <lcd_run+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2a      	ldr	r2, [pc, #168]	@ (800130c <lcd_run+0x280>)
 8001264:	fb82 1203 	smull	r1, r2, r2, r3
 8001268:	1092      	asrs	r2, r2, #2
 800126a:	17db      	asrs	r3, r3, #31
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3330      	adds	r3, #48	@ 0x30
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe6d 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(2,9);
 800127a:	2109      	movs	r1, #9
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff fee3 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time%10 + 48);
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <lcd_run+0x26c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <lcd_run+0x280>)
 8001288:	fb83 1302 	smull	r1, r3, r3, r2
 800128c:	1099      	asrs	r1, r3, #2
 800128e:	17d3      	asrs	r3, r2, #31
 8001290:	1ac9      	subs	r1, r1, r3
 8001292:	460b      	mov	r3, r1
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	1ad1      	subs	r1, r2, r3
 800129c:	b2cb      	uxtb	r3, r1
 800129e:	3330      	adds	r3, #48	@ 0x30
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fe56 	bl	8000f54 <lcd_send_data>

		if(flag_timer[3] == 1){
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <lcd_run+0x284>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	f040 818f 	bne.w	80015d0 <lcd_run+0x544>
			if(lcd_red_time > 0) lcd_red_time--;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <lcd_run+0x264>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	dd04      	ble.n	80012c4 <lcd_run+0x238>
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <lcd_run+0x264>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <lcd_run+0x264>)
 80012c2:	6013      	str	r3, [r2, #0]
			if(lcd_yellow_time >0) lcd_yellow_time--;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <lcd_run+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dd04      	ble.n	80012d6 <lcd_run+0x24a>
 80012cc:	4b0a      	ldr	r3, [pc, #40]	@ (80012f8 <lcd_run+0x26c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	4a09      	ldr	r2, [pc, #36]	@ (80012f8 <lcd_run+0x26c>)
 80012d4:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 80012d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 ff10 	bl	8002100 <setTimer>
		}
		break;
 80012e0:	e176      	b.n	80015d0 <lcd_run+0x544>
 80012e2:	bf00      	nop
 80012e4:	20000100 	.word	0x20000100
 80012e8:	20000024 	.word	0x20000024
 80012ec:	2000002c 	.word	0x2000002c
 80012f0:	2000058c 	.word	0x2000058c
 80012f4:	20000030 	.word	0x20000030
 80012f8:	20000594 	.word	0x20000594
 80012fc:	20000034 	.word	0x20000034
 8001300:	20000590 	.word	0x20000590
 8001304:	080064e8 	.word	0x080064e8
 8001308:	080064f4 	.word	0x080064f4
 800130c:	66666667 	.word	0x66666667
 8001310:	20000700 	.word	0x20000700
	case GREEN_RED:
		lcd_goto_XY(1,8);
 8001314:	2108      	movs	r1, #8
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff fe96 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_green_time/10 + 48);
 800131c:	4baf      	ldr	r3, [pc, #700]	@ (80015dc <lcd_run+0x550>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4aaf      	ldr	r2, [pc, #700]	@ (80015e0 <lcd_run+0x554>)
 8001322:	fb82 1203 	smull	r1, r2, r2, r3
 8001326:	1092      	asrs	r2, r2, #2
 8001328:	17db      	asrs	r3, r3, #31
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	b2db      	uxtb	r3, r3
 800132e:	3330      	adds	r3, #48	@ 0x30
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe0e 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(1,9);
 8001338:	2109      	movs	r1, #9
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fe84 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_green_time%10 + 48);
 8001340:	4ba6      	ldr	r3, [pc, #664]	@ (80015dc <lcd_run+0x550>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4ba6      	ldr	r3, [pc, #664]	@ (80015e0 <lcd_run+0x554>)
 8001346:	fb83 1302 	smull	r1, r3, r3, r2
 800134a:	1099      	asrs	r1, r3, #2
 800134c:	17d3      	asrs	r3, r2, #31
 800134e:	1ac9      	subs	r1, r1, r3
 8001350:	460b      	mov	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	1ad1      	subs	r1, r2, r3
 800135a:	b2cb      	uxtb	r3, r1
 800135c:	3330      	adds	r3, #48	@ 0x30
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fdf7 	bl	8000f54 <lcd_send_data>

		lcd_goto_XY(2,8);
 8001366:	2108      	movs	r1, #8
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff fe6d 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 800136e:	4b9d      	ldr	r3, [pc, #628]	@ (80015e4 <lcd_run+0x558>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a9b      	ldr	r2, [pc, #620]	@ (80015e0 <lcd_run+0x554>)
 8001374:	fb82 1203 	smull	r1, r2, r2, r3
 8001378:	1092      	asrs	r2, r2, #2
 800137a:	17db      	asrs	r3, r3, #31
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3330      	adds	r3, #48	@ 0x30
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fde5 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(2,9);
 800138a:	2109      	movs	r1, #9
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fe5b 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 8001392:	4b94      	ldr	r3, [pc, #592]	@ (80015e4 <lcd_run+0x558>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b92      	ldr	r3, [pc, #584]	@ (80015e0 <lcd_run+0x554>)
 8001398:	fb83 1302 	smull	r1, r3, r3, r2
 800139c:	1099      	asrs	r1, r3, #2
 800139e:	17d3      	asrs	r3, r2, #31
 80013a0:	1ac9      	subs	r1, r1, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	1ad1      	subs	r1, r2, r3
 80013ac:	b2cb      	uxtb	r3, r1
 80013ae:	3330      	adds	r3, #48	@ 0x30
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fdce 	bl	8000f54 <lcd_send_data>

		if(flag_timer[3] == 1){
 80013b8:	4b8b      	ldr	r3, [pc, #556]	@ (80015e8 <lcd_run+0x55c>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	f040 8109 	bne.w	80015d4 <lcd_run+0x548>
			if(lcd_red_time > 0) lcd_red_time--;
 80013c2:	4b88      	ldr	r3, [pc, #544]	@ (80015e4 <lcd_run+0x558>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	dd04      	ble.n	80013d4 <lcd_run+0x348>
 80013ca:	4b86      	ldr	r3, [pc, #536]	@ (80015e4 <lcd_run+0x558>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a84      	ldr	r2, [pc, #528]	@ (80015e4 <lcd_run+0x558>)
 80013d2:	6013      	str	r3, [r2, #0]
			if(lcd_green_time >0) lcd_green_time--;
 80013d4:	4b81      	ldr	r3, [pc, #516]	@ (80015dc <lcd_run+0x550>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dd04      	ble.n	80013e6 <lcd_run+0x35a>
 80013dc:	4b7f      	ldr	r3, [pc, #508]	@ (80015dc <lcd_run+0x550>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	4a7e      	ldr	r2, [pc, #504]	@ (80015dc <lcd_run+0x550>)
 80013e4:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 80013e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 fe88 	bl	8002100 <setTimer>
		}
		break;
 80013f0:	e0f0      	b.n	80015d4 <lcd_run+0x548>
	case YELLOW_RED:
		lcd_goto_XY(1,8);
 80013f2:	2108      	movs	r1, #8
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fe27 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time/10 + 48);
 80013fa:	4b7c      	ldr	r3, [pc, #496]	@ (80015ec <lcd_run+0x560>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a78      	ldr	r2, [pc, #480]	@ (80015e0 <lcd_run+0x554>)
 8001400:	fb82 1203 	smull	r1, r2, r2, r3
 8001404:	1092      	asrs	r2, r2, #2
 8001406:	17db      	asrs	r3, r3, #31
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	3330      	adds	r3, #48	@ 0x30
 800140e:	b2db      	uxtb	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd9f 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(1,9);
 8001416:	2109      	movs	r1, #9
 8001418:	2001      	movs	r0, #1
 800141a:	f7ff fe15 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_yellow_time%10 + 48);
 800141e:	4b73      	ldr	r3, [pc, #460]	@ (80015ec <lcd_run+0x560>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b6f      	ldr	r3, [pc, #444]	@ (80015e0 <lcd_run+0x554>)
 8001424:	fb83 1302 	smull	r1, r3, r3, r2
 8001428:	1099      	asrs	r1, r3, #2
 800142a:	17d3      	asrs	r3, r2, #31
 800142c:	1ac9      	subs	r1, r1, r3
 800142e:	460b      	mov	r3, r1
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	1ad1      	subs	r1, r2, r3
 8001438:	b2cb      	uxtb	r3, r1
 800143a:	3330      	adds	r3, #48	@ 0x30
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fd88 	bl	8000f54 <lcd_send_data>

		lcd_goto_XY(2,8);
 8001444:	2108      	movs	r1, #8
 8001446:	2002      	movs	r0, #2
 8001448:	f7ff fdfe 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time/10 + 48);
 800144c:	4b65      	ldr	r3, [pc, #404]	@ (80015e4 <lcd_run+0x558>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a63      	ldr	r2, [pc, #396]	@ (80015e0 <lcd_run+0x554>)
 8001452:	fb82 1203 	smull	r1, r2, r2, r3
 8001456:	1092      	asrs	r2, r2, #2
 8001458:	17db      	asrs	r3, r3, #31
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3330      	adds	r3, #48	@ 0x30
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fd76 	bl	8000f54 <lcd_send_data>
		lcd_goto_XY(2,9);
 8001468:	2109      	movs	r1, #9
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff fdec 	bl	8001048 <lcd_goto_XY>
		lcd_send_data(lcd_red_time%10 + 48);
 8001470:	4b5c      	ldr	r3, [pc, #368]	@ (80015e4 <lcd_run+0x558>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <lcd_run+0x554>)
 8001476:	fb83 1302 	smull	r1, r3, r3, r2
 800147a:	1099      	asrs	r1, r3, #2
 800147c:	17d3      	asrs	r3, r2, #31
 800147e:	1ac9      	subs	r1, r1, r3
 8001480:	460b      	mov	r3, r1
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	1ad1      	subs	r1, r2, r3
 800148a:	b2cb      	uxtb	r3, r1
 800148c:	3330      	adds	r3, #48	@ 0x30
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd5f 	bl	8000f54 <lcd_send_data>
		if(flag_timer[3] == 1){
 8001496:	4b54      	ldr	r3, [pc, #336]	@ (80015e8 <lcd_run+0x55c>)
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b01      	cmp	r3, #1
 800149c:	f040 809c 	bne.w	80015d8 <lcd_run+0x54c>
			if(lcd_red_time > 0) lcd_red_time--;
 80014a0:	4b50      	ldr	r3, [pc, #320]	@ (80015e4 <lcd_run+0x558>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	dd04      	ble.n	80014b2 <lcd_run+0x426>
 80014a8:	4b4e      	ldr	r3, [pc, #312]	@ (80015e4 <lcd_run+0x558>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4a4d      	ldr	r2, [pc, #308]	@ (80015e4 <lcd_run+0x558>)
 80014b0:	6013      	str	r3, [r2, #0]
			if(lcd_yellow_time >0) lcd_yellow_time--;
 80014b2:	4b4e      	ldr	r3, [pc, #312]	@ (80015ec <lcd_run+0x560>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dd04      	ble.n	80014c4 <lcd_run+0x438>
 80014ba:	4b4c      	ldr	r3, [pc, #304]	@ (80015ec <lcd_run+0x560>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a4a      	ldr	r2, [pc, #296]	@ (80015ec <lcd_run+0x560>)
 80014c2:	6013      	str	r3, [r2, #0]
			setTimer(3,1000);
 80014c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 fe19 	bl	8002100 <setTimer>
		}
		break;
 80014ce:	e083      	b.n	80015d8 <lcd_run+0x54c>
	case RED_GREEN_MANUAL:
		lcd_goto_XY(1,0);
 80014d0:	2100      	movs	r1, #0
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff fdb8 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("    RED GREEN   ");
 80014d8:	4845      	ldr	r0, [pc, #276]	@ (80015f0 <lcd_run+0x564>)
 80014da:	f7ff fd99 	bl	8001010 <lcd_send_string>
		lcd_goto_XY(2,0);
 80014de:	2100      	movs	r1, #0
 80014e0:	2002      	movs	r0, #2
 80014e2:	f7ff fdb1 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("                ");
 80014e6:	4843      	ldr	r0, [pc, #268]	@ (80015f4 <lcd_run+0x568>)
 80014e8:	f7ff fd92 	bl	8001010 <lcd_send_string>
		break;
 80014ec:	e075      	b.n	80015da <lcd_run+0x54e>
	case RED_YELLOW_MANUAL:
		lcd_goto_XY(1,0);
 80014ee:	2100      	movs	r1, #0
 80014f0:	2001      	movs	r0, #1
 80014f2:	f7ff fda9 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("    RED YELLOW  ");
 80014f6:	4840      	ldr	r0, [pc, #256]	@ (80015f8 <lcd_run+0x56c>)
 80014f8:	f7ff fd8a 	bl	8001010 <lcd_send_string>
		lcd_goto_XY(2,0);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fda2 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("                ");
 8001504:	483b      	ldr	r0, [pc, #236]	@ (80015f4 <lcd_run+0x568>)
 8001506:	f7ff fd83 	bl	8001010 <lcd_send_string>
		break;
 800150a:	e066      	b.n	80015da <lcd_run+0x54e>
	case GREEN_RED_MANUAL:
		lcd_goto_XY(1,0);
 800150c:	2100      	movs	r1, #0
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff fd9a 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("    GREEN RED   ");
 8001514:	4839      	ldr	r0, [pc, #228]	@ (80015fc <lcd_run+0x570>)
 8001516:	f7ff fd7b 	bl	8001010 <lcd_send_string>
		lcd_goto_XY(2,0);
 800151a:	2100      	movs	r1, #0
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fd93 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("                ");
 8001522:	4834      	ldr	r0, [pc, #208]	@ (80015f4 <lcd_run+0x568>)
 8001524:	f7ff fd74 	bl	8001010 <lcd_send_string>
		break;
 8001528:	e057      	b.n	80015da <lcd_run+0x54e>
	case YELLOW_RED_MANUAL:
		lcd_goto_XY(1,0);
 800152a:	2100      	movs	r1, #0
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fd8b 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("    YELLOW RED  ");
 8001532:	4833      	ldr	r0, [pc, #204]	@ (8001600 <lcd_run+0x574>)
 8001534:	f7ff fd6c 	bl	8001010 <lcd_send_string>
		lcd_goto_XY(2,0);
 8001538:	2100      	movs	r1, #0
 800153a:	2002      	movs	r0, #2
 800153c:	f7ff fd84 	bl	8001048 <lcd_goto_XY>
		lcd_send_string("                ");
 8001540:	482c      	ldr	r0, [pc, #176]	@ (80015f4 <lcd_run+0x568>)
 8001542:	f7ff fd65 	bl	8001010 <lcd_send_string>
		break;
 8001546:	e048      	b.n	80015da <lcd_run+0x54e>
	case INIT_SETTING:
		lcd_clear_display();
 8001548:	f7ff fd77 	bl	800103a <lcd_clear_display>
		lcd_goto_XY(1,0);
 800154c:	2100      	movs	r1, #0
 800154e:	2001      	movs	r0, #1
 8001550:	f7ff fd7a 	bl	8001048 <lcd_goto_XY>
		lcd_send_string(" TRAFFIC SETTING");
 8001554:	482b      	ldr	r0, [pc, #172]	@ (8001604 <lcd_run+0x578>)
 8001556:	f7ff fd5b 	bl	8001010 <lcd_send_string>
		break;
 800155a:	e03e      	b.n	80015da <lcd_run+0x54e>
	case RED_SETTING:
		lcd_goto_XY(2,0);
 800155c:	2100      	movs	r1, #0
 800155e:	2002      	movs	r0, #2
 8001560:	f7ff fd72 	bl	8001048 <lcd_goto_XY>
		sprintf(lcd_buf,"   TIME RED: %d ",red_time+red_time_increase);
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <lcd_run+0x57c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <lcd_run+0x580>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	461a      	mov	r2, r3
 8001570:	4927      	ldr	r1, [pc, #156]	@ (8001610 <lcd_run+0x584>)
 8001572:	4828      	ldr	r0, [pc, #160]	@ (8001614 <lcd_run+0x588>)
 8001574:	f003 fd5e 	bl	8005034 <siprintf>
		lcd_send_string(lcd_buf);
 8001578:	4826      	ldr	r0, [pc, #152]	@ (8001614 <lcd_run+0x588>)
 800157a:	f7ff fd49 	bl	8001010 <lcd_send_string>
		break;
 800157e:	e02c      	b.n	80015da <lcd_run+0x54e>
	case YELLOW_SETTING:
		lcd_goto_XY(2,0);
 8001580:	2100      	movs	r1, #0
 8001582:	2002      	movs	r0, #2
 8001584:	f7ff fd60 	bl	8001048 <lcd_goto_XY>
		sprintf(lcd_buf,"TIME YELLOW: %d ",yellow_time+yellow_time_increase);
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <lcd_run+0x58c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b23      	ldr	r3, [pc, #140]	@ (800161c <lcd_run+0x590>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4413      	add	r3, r2
 8001592:	461a      	mov	r2, r3
 8001594:	4922      	ldr	r1, [pc, #136]	@ (8001620 <lcd_run+0x594>)
 8001596:	481f      	ldr	r0, [pc, #124]	@ (8001614 <lcd_run+0x588>)
 8001598:	f003 fd4c 	bl	8005034 <siprintf>
		lcd_send_string(lcd_buf);
 800159c:	481d      	ldr	r0, [pc, #116]	@ (8001614 <lcd_run+0x588>)
 800159e:	f7ff fd37 	bl	8001010 <lcd_send_string>
		break;
 80015a2:	e01a      	b.n	80015da <lcd_run+0x54e>
	case GREEN_SETTING:
		lcd_goto_XY(2,0);
 80015a4:	2100      	movs	r1, #0
 80015a6:	2002      	movs	r0, #2
 80015a8:	f7ff fd4e 	bl	8001048 <lcd_goto_XY>
		sprintf(lcd_buf," TIME GREEN: %d ",green_time+green_time_increase);
 80015ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001624 <lcd_run+0x598>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <lcd_run+0x59c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4413      	add	r3, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	491c      	ldr	r1, [pc, #112]	@ (800162c <lcd_run+0x5a0>)
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <lcd_run+0x588>)
 80015bc:	f003 fd3a 	bl	8005034 <siprintf>
		lcd_send_string(lcd_buf);
 80015c0:	4814      	ldr	r0, [pc, #80]	@ (8001614 <lcd_run+0x588>)
 80015c2:	f7ff fd25 	bl	8001010 <lcd_send_string>
		break;
 80015c6:	e008      	b.n	80015da <lcd_run+0x54e>
	default:
		break;
 80015c8:	bf00      	nop
 80015ca:	e006      	b.n	80015da <lcd_run+0x54e>
		break;
 80015cc:	bf00      	nop
 80015ce:	e004      	b.n	80015da <lcd_run+0x54e>
		break;
 80015d0:	bf00      	nop
 80015d2:	e002      	b.n	80015da <lcd_run+0x54e>
		break;
 80015d4:	bf00      	nop
 80015d6:	e000      	b.n	80015da <lcd_run+0x54e>
		break;
 80015d8:	bf00      	nop
	}
}
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000590 	.word	0x20000590
 80015e0:	66666667 	.word	0x66666667
 80015e4:	2000058c 	.word	0x2000058c
 80015e8:	20000700 	.word	0x20000700
 80015ec:	20000594 	.word	0x20000594
 80015f0:	08006500 	.word	0x08006500
 80015f4:	08006514 	.word	0x08006514
 80015f8:	08006528 	.word	0x08006528
 80015fc:	0800653c 	.word	0x0800653c
 8001600:	08006550 	.word	0x08006550
 8001604:	08006564 	.word	0x08006564
 8001608:	2000002c 	.word	0x2000002c
 800160c:	20000580 	.word	0x20000580
 8001610:	08006578 	.word	0x08006578
 8001614:	20000598 	.word	0x20000598
 8001618:	20000030 	.word	0x20000030
 800161c:	20000588 	.word	0x20000588
 8001620:	0800658c 	.word	0x0800658c
 8001624:	20000034 	.word	0x20000034
 8001628:	20000584 	.word	0x20000584
 800162c:	080065a0 	.word	0x080065a0

08001630 <led_red_and_yellow>:
 *      Author: ADMIN
 */
#include "main.h"
#include "light_traffic.h"

void led_red_and_yellow(){
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	4815      	ldr	r0, [pc, #84]	@ (8001690 <led_red_and_yellow+0x60>)
 800163a:	f001 f9b8 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4813      	ldr	r0, [pc, #76]	@ (8001690 <led_red_and_yellow+0x60>)
 8001644:	f001 f9b3 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2110      	movs	r1, #16
 800164c:	4810      	ldr	r0, [pc, #64]	@ (8001690 <led_red_and_yellow+0x60>)
 800164e:	f001 f9ae 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001658:	480d      	ldr	r0, [pc, #52]	@ (8001690 <led_red_and_yellow+0x60>)
 800165a:	f001 f9a8 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001664:	480b      	ldr	r0, [pc, #44]	@ (8001694 <led_red_and_yellow+0x64>)
 8001666:	f001 f9a2 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001670:	4808      	ldr	r0, [pc, #32]	@ (8001694 <led_red_and_yellow+0x64>)
 8001672:	f001 f99c 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,RESET);
 8001676:	2200      	movs	r2, #0
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	4807      	ldr	r0, [pc, #28]	@ (8001698 <led_red_and_yellow+0x68>)
 800167c:	f001 f997 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001680:	2201      	movs	r2, #1
 8001682:	2140      	movs	r1, #64	@ 0x40
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <led_red_and_yellow+0x60>)
 8001686:	f001 f992 	bl	80029ae <HAL_GPIO_WritePin>
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40010c00 	.word	0x40010c00
 8001694:	40010800 	.word	0x40010800
 8001698:	40011000 	.word	0x40011000

0800169c <led_red_and_green>:
void led_red_and_green(){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2108      	movs	r1, #8
 80016a4:	4815      	ldr	r0, [pc, #84]	@ (80016fc <led_red_and_green+0x60>)
 80016a6:	f001 f982 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 80016aa:	2201      	movs	r2, #1
 80016ac:	2120      	movs	r1, #32
 80016ae:	4813      	ldr	r0, [pc, #76]	@ (80016fc <led_red_and_green+0x60>)
 80016b0:	f001 f97d 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	2110      	movs	r1, #16
 80016b8:	4810      	ldr	r0, [pc, #64]	@ (80016fc <led_red_and_green+0x60>)
 80016ba:	f001 f978 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016c4:	480d      	ldr	r0, [pc, #52]	@ (80016fc <led_red_and_green+0x60>)
 80016c6:	f001 f972 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <led_red_and_green+0x64>)
 80016d2:	f001 f96c 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016dc:	4808      	ldr	r0, [pc, #32]	@ (8001700 <led_red_and_green+0x64>)
 80016de:	f001 f966 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2180      	movs	r1, #128	@ 0x80
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <led_red_and_green+0x68>)
 80016e8:	f001 f961 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2140      	movs	r1, #64	@ 0x40
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <led_red_and_green+0x60>)
 80016f2:	f001 f95c 	bl	80029ae <HAL_GPIO_WritePin>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40010c00 	.word	0x40010c00
 8001700:	40010800 	.word	0x40010800
 8001704:	40011000 	.word	0x40011000

08001708 <led_yellow_and_red>:
void led_yellow_and_red(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2108      	movs	r1, #8
 8001710:	4815      	ldr	r0, [pc, #84]	@ (8001768 <led_yellow_and_red+0x60>)
 8001712:	f001 f94c 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001716:	2201      	movs	r2, #1
 8001718:	2120      	movs	r1, #32
 800171a:	4813      	ldr	r0, [pc, #76]	@ (8001768 <led_yellow_and_red+0x60>)
 800171c:	f001 f947 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2110      	movs	r1, #16
 8001724:	4810      	ldr	r0, [pc, #64]	@ (8001768 <led_yellow_and_red+0x60>)
 8001726:	f001 f942 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 800172a:	2201      	movs	r2, #1
 800172c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001730:	480d      	ldr	r0, [pc, #52]	@ (8001768 <led_yellow_and_red+0x60>)
 8001732:	f001 f93c 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800173c:	480b      	ldr	r0, [pc, #44]	@ (800176c <led_yellow_and_red+0x64>)
 800173e:	f001 f936 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 8001742:	2201      	movs	r2, #1
 8001744:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001748:	4808      	ldr	r0, [pc, #32]	@ (800176c <led_yellow_and_red+0x64>)
 800174a:	f001 f930 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2180      	movs	r1, #128	@ 0x80
 8001752:	4807      	ldr	r0, [pc, #28]	@ (8001770 <led_yellow_and_red+0x68>)
 8001754:	f001 f92b 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2140      	movs	r1, #64	@ 0x40
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <led_yellow_and_red+0x60>)
 800175e:	f001 f926 	bl	80029ae <HAL_GPIO_WritePin>
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40010c00 	.word	0x40010c00
 800176c:	40010800 	.word	0x40010800
 8001770:	40011000 	.word	0x40011000

08001774 <led_green_and_red>:
void led_green_and_red(){
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2108      	movs	r1, #8
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <led_green_and_red+0x60>)
 800177e:	f001 f916 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	4813      	ldr	r0, [pc, #76]	@ (80017d4 <led_green_and_red+0x60>)
 8001788:	f001 f911 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2110      	movs	r1, #16
 8001790:	4810      	ldr	r0, [pc, #64]	@ (80017d4 <led_green_and_red+0x60>)
 8001792:	f001 f90c 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800179c:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <led_green_and_red+0x60>)
 800179e:	f001 f906 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <led_green_and_red+0x64>)
 80017aa:	f001 f900 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017b4:	4808      	ldr	r0, [pc, #32]	@ (80017d8 <led_green_and_red+0x64>)
 80017b6:	f001 f8fa 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 80017ba:	2201      	movs	r2, #1
 80017bc:	2180      	movs	r1, #128	@ 0x80
 80017be:	4807      	ldr	r0, [pc, #28]	@ (80017dc <led_green_and_red+0x68>)
 80017c0:	f001 f8f5 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 80017c4:	2201      	movs	r2, #1
 80017c6:	2140      	movs	r1, #64	@ 0x40
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <led_green_and_red+0x60>)
 80017ca:	f001 f8f0 	bl	80029ae <HAL_GPIO_WritePin>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010c00 	.word	0x40010c00
 80017d8:	40010800 	.word	0x40010800
 80017dc:	40011000 	.word	0x40011000

080017e0 <all_led_red_on>:
void all_led_red_on(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 80017e4:	2201      	movs	r2, #1
 80017e6:	2108      	movs	r1, #8
 80017e8:	4815      	ldr	r0, [pc, #84]	@ (8001840 <all_led_red_on+0x60>)
 80017ea:	f001 f8e0 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2120      	movs	r1, #32
 80017f2:	4813      	ldr	r0, [pc, #76]	@ (8001840 <all_led_red_on+0x60>)
 80017f4:	f001 f8db 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80017f8:	2201      	movs	r2, #1
 80017fa:	2110      	movs	r1, #16
 80017fc:	4810      	ldr	r0, [pc, #64]	@ (8001840 <all_led_red_on+0x60>)
 80017fe:	f001 f8d6 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001802:	2201      	movs	r2, #1
 8001804:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001808:	480d      	ldr	r0, [pc, #52]	@ (8001840 <all_led_red_on+0x60>)
 800180a:	f001 f8d0 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001814:	480b      	ldr	r0, [pc, #44]	@ (8001844 <all_led_red_on+0x64>)
 8001816:	f001 f8ca 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800181a:	2201      	movs	r2, #1
 800181c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <all_led_red_on+0x64>)
 8001822:	f001 f8c4 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2180      	movs	r1, #128	@ 0x80
 800182a:	4807      	ldr	r0, [pc, #28]	@ (8001848 <all_led_red_on+0x68>)
 800182c:	f001 f8bf 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001830:	2201      	movs	r2, #1
 8001832:	2140      	movs	r1, #64	@ 0x40
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <all_led_red_on+0x60>)
 8001836:	f001 f8ba 	bl	80029ae <HAL_GPIO_WritePin>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40010c00 	.word	0x40010c00
 8001844:	40010800 	.word	0x40010800
 8001848:	40011000 	.word	0x40011000

0800184c <all_led_red_off>:
void all_led_red_off(){
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2108      	movs	r1, #8
 8001854:	4815      	ldr	r0, [pc, #84]	@ (80018ac <all_led_red_off+0x60>)
 8001856:	f001 f8aa 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	4813      	ldr	r0, [pc, #76]	@ (80018ac <all_led_red_off+0x60>)
 8001860:	f001 f8a5 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2110      	movs	r1, #16
 8001868:	4810      	ldr	r0, [pc, #64]	@ (80018ac <all_led_red_off+0x60>)
 800186a:	f001 f8a0 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001874:	480d      	ldr	r0, [pc, #52]	@ (80018ac <all_led_red_off+0x60>)
 8001876:	f001 f89a 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001880:	480b      	ldr	r0, [pc, #44]	@ (80018b0 <all_led_red_off+0x64>)
 8001882:	f001 f894 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800188c:	4808      	ldr	r0, [pc, #32]	@ (80018b0 <all_led_red_off+0x64>)
 800188e:	f001 f88e 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2180      	movs	r1, #128	@ 0x80
 8001896:	4807      	ldr	r0, [pc, #28]	@ (80018b4 <all_led_red_off+0x68>)
 8001898:	f001 f889 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	2140      	movs	r1, #64	@ 0x40
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <all_led_red_off+0x60>)
 80018a2:	f001 f884 	bl	80029ae <HAL_GPIO_WritePin>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	40010800 	.word	0x40010800
 80018b4:	40011000 	.word	0x40011000

080018b8 <all_led_green_on>:
void all_led_green_on(){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,SET);
 80018bc:	2201      	movs	r2, #1
 80018be:	2108      	movs	r1, #8
 80018c0:	4815      	ldr	r0, [pc, #84]	@ (8001918 <all_led_green_on+0x60>)
 80018c2:	f001 f874 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2120      	movs	r1, #32
 80018ca:	4813      	ldr	r0, [pc, #76]	@ (8001918 <all_led_green_on+0x60>)
 80018cc:	f001 f86f 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2110      	movs	r1, #16
 80018d4:	4810      	ldr	r0, [pc, #64]	@ (8001918 <all_led_green_on+0x60>)
 80018d6:	f001 f86a 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e0:	480d      	ldr	r0, [pc, #52]	@ (8001918 <all_led_green_on+0x60>)
 80018e2:	f001 f864 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 80018e6:	2201      	movs	r2, #1
 80018e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018ec:	480b      	ldr	r0, [pc, #44]	@ (800191c <all_led_green_on+0x64>)
 80018ee:	f001 f85e 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <all_led_green_on+0x64>)
 80018fa:	f001 f858 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,SET);
 80018fe:	2201      	movs	r2, #1
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	4807      	ldr	r0, [pc, #28]	@ (8001920 <all_led_green_on+0x68>)
 8001904:	f001 f853 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	@ 0x40
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <all_led_green_on+0x60>)
 800190e:	f001 f84e 	bl	80029ae <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40010800 	.word	0x40010800
 8001920:	40011000 	.word	0x40011000

08001924 <all_led_yellow_on>:
void all_led_yellow_on(){
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D3_GPIO_Port,D3_Pin,RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2108      	movs	r1, #8
 800192c:	4815      	ldr	r0, [pc, #84]	@ (8001984 <all_led_yellow_on+0x60>)
 800192e:	f001 f83e 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port,D4_Pin,SET);
 8001932:	2201      	movs	r2, #1
 8001934:	2120      	movs	r1, #32
 8001936:	4813      	ldr	r0, [pc, #76]	@ (8001984 <all_led_yellow_on+0x60>)
 8001938:	f001 f839 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	2110      	movs	r1, #16
 8001940:	4810      	ldr	r0, [pc, #64]	@ (8001984 <all_led_yellow_on+0x60>)
 8001942:	f001 f834 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port,D6_Pin,SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194c:	480d      	ldr	r0, [pc, #52]	@ (8001984 <all_led_yellow_on+0x60>)
 800194e:	f001 f82e 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001958:	480b      	ldr	r0, [pc, #44]	@ (8001988 <all_led_yellow_on+0x64>)
 800195a:	f001 f828 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D8_GPIO_Port, D8_Pin, SET);
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001964:	4808      	ldr	r0, [pc, #32]	@ (8001988 <all_led_yellow_on+0x64>)
 8001966:	f001 f822 	bl	80029ae <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(D9_GPIO_Port,D9_Pin,RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	4807      	ldr	r0, [pc, #28]	@ (800198c <all_led_yellow_on+0x68>)
 8001970:	f001 f81d 	bl	80029ae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_GPIO_Port,D10_Pin,SET);
 8001974:	2201      	movs	r2, #1
 8001976:	2140      	movs	r1, #64	@ 0x40
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <all_led_yellow_on+0x60>)
 800197a:	f001 f818 	bl	80029ae <HAL_GPIO_WritePin>
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40010c00 	.word	0x40010c00
 8001988:	40010800 	.word	0x40010800
 800198c:	40011000 	.word	0x40011000

08001990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001994:	f000 fc2a 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001998:	f000 f81e 	bl	80019d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f000 f92c 	bl	8001bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019a0:	f000 f8d6 	bl	8001b50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019a4:	f000 f85a 	bl	8001a5c <MX_I2C1_Init>
  MX_TIM2_Init();
 80019a8:	f000 f886 	bl	8001ab8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80019ac:	f000 f8fa 	bl	8001ba4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80019b0:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <main+0x44>)
 80019b2:	f002 f933 	bl	8003c1c <HAL_TIM_Base_Start_IT>
  ESP_INIT();
 80019b6:	f7fe fd69 	bl	800048c <ESP_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lcd_run();
 80019ba:	f7ff fb67 	bl	800108c <lcd_run>
	  fsm_autorun();
 80019be:	f7ff f809 	bl	80009d4 <fsm_autorun>
	  fsm_manual();
 80019c2:	f7ff f8f9 	bl	8000bb8 <fsm_manual>
	  fsm_setting();
 80019c6:	f7ff f95d 	bl	8000c84 <fsm_setting>
	  server_on();
 80019ca:	f7fe fe65 	bl	8000698 <server_on>
	  lcd_run();
 80019ce:	bf00      	nop
 80019d0:	e7f3      	b.n	80019ba <main+0x2a>
 80019d2:	bf00      	nop
 80019d4:	200005fc 	.word	0x200005fc

080019d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b090      	sub	sp, #64	@ 0x40
 80019dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	2228      	movs	r2, #40	@ 0x28
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fb44 	bl	8005074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a02:	2310      	movs	r3, #16
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a06:	2302      	movs	r3, #2
 8001a08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a0e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f001 fc9f 	bl	800335c <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a24:	f000 f9a6 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001a34:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2102      	movs	r1, #2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 ff0c 	bl	8003860 <HAL_RCC_ClockConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a4e:	f000 f991 	bl	8001d74 <Error_Handler>
  }
}
 8001a52:	bf00      	nop
 8001a54:	3740      	adds	r7, #64	@ 0x40
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a62:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <MX_I2C1_Init+0x54>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a68:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <MX_I2C1_Init+0x58>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <MX_I2C1_Init+0x50>)
 8001a9a:	f000 ffc3 	bl	8002a24 <HAL_I2C_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001aa4:	f000 f966 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200005a8 	.word	0x200005a8
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	000186a0 	.word	0x000186a0

08001ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001ad6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001ade:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8001ae2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae4:	4b19      	ldr	r3, [pc, #100]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001aec:	2209      	movs	r2, #9
 8001aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001afc:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001afe:	f002 f83d 	bl	8003b7c <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b08:	f000 f934 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001b1a:	f002 f9c1 	bl	8003ea0 <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b24:	f000 f926 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b30:	463b      	mov	r3, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_TIM2_Init+0x94>)
 8001b36:	f002 fba3 	bl	8004280 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b40:	f000 f918 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200005fc 	.word	0x200005fc

08001b50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b54:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b56:	4a12      	ldr	r2, [pc, #72]	@ (8001ba0 <MX_USART2_UART_Init+0x50>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b08      	ldr	r3, [pc, #32]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_USART2_UART_Init+0x4c>)
 8001b88:	f002 fbea 	bl	8004360 <HAL_UART_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b92:	f000 f8ef 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000644 	.word	0x20000644
 8001ba0:	40004400 	.word	0x40004400

08001ba4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <MX_USART3_UART_Init+0x50>)
 8001bac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_USART3_UART_Init+0x4c>)
 8001bdc:	f002 fbc0 	bl	8004360 <HAL_UART_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001be6:	f000 f8c5 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000068c 	.word	0x2000068c
 8001bf4:	40004800 	.word	0x40004800

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a4d      	ldr	r2, [pc, #308]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b4b      	ldr	r3, [pc, #300]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c24:	4b48      	ldr	r3, [pc, #288]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a47      	ldr	r2, [pc, #284]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c2a:	f043 0320 	orr.w	r3, r3, #32
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b45      	ldr	r3, [pc, #276]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0320 	and.w	r3, r3, #32
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b42      	ldr	r3, [pc, #264]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a41      	ldr	r2, [pc, #260]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b3f      	ldr	r3, [pc, #252]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c5a:	f043 0308 	orr.w	r3, r3, #8
 8001c5e:	6193      	str	r3, [r2, #24]
 8001c60:	4b39      	ldr	r3, [pc, #228]	@ (8001d48 <MX_GPIO_Init+0x150>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001c72:	4836      	ldr	r0, [pc, #216]	@ (8001d4c <MX_GPIO_Init+0x154>)
 8001c74:	f000 fe9b 	bl	80029ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f44f 618f 	mov.w	r1, #1144	@ 0x478
 8001c7e:	4834      	ldr	r0, [pc, #208]	@ (8001d50 <MX_GPIO_Init+0x158>)
 8001c80:	f000 fe95 	bl	80029ae <HAL_GPIO_WritePin>
                          |D10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	4832      	ldr	r0, [pc, #200]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001c8a:	f000 fe90 	bl	80029ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c94:	4b30      	ldr	r3, [pc, #192]	@ (8001d58 <MX_GPIO_Init+0x160>)
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	482c      	ldr	r0, [pc, #176]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001ca4:	f000 fce8 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8001ca8:	2313      	movs	r3, #19
 8001caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4824      	ldr	r0, [pc, #144]	@ (8001d4c <MX_GPIO_Init+0x154>)
 8001cbc:	f000 fcdc 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D7_Pin|D8_Pin;
 8001cc0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0310 	add.w	r3, r7, #16
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	481c      	ldr	r0, [pc, #112]	@ (8001d4c <MX_GPIO_Init+0x154>)
 8001cda:	f000 fccd 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4817      	ldr	r0, [pc, #92]	@ (8001d50 <MX_GPIO_Init+0x158>)
 8001cf2:	f000 fcc1 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin
                           D10_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin
 8001cf6:	f44f 638f 	mov.w	r3, #1144	@ 0x478
 8001cfa:	613b      	str	r3, [r7, #16]
                          |D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4810      	ldr	r0, [pc, #64]	@ (8001d50 <MX_GPIO_Init+0x158>)
 8001d10:	f000 fcb2 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <MX_GPIO_Init+0x15c>)
 8001d2c:	f000 fca4 	bl	8002678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	2028      	movs	r0, #40	@ 0x28
 8001d36:	f000 fbb6 	bl	80024a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d3a:	2028      	movs	r0, #40	@ 0x28
 8001d3c:	f000 fbcf 	bl	80024de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d40:	bf00      	nop
 8001d42:	3720      	adds	r7, #32
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40010800 	.word	0x40010800
 8001d50:	40010c00 	.word	0x40010c00
 8001d54:	40011000 	.word	0x40011000
 8001d58:	10110000 	.word	0x10110000

08001d5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	timerRun();
 8001d64:	f000 f9ec 	bl	8002140 <timerRun>
	getKeyInput();
 8001d68:	f7fe fa12 	bl	8000190 <getKeyInput>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_MspInit+0x5c>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_MspInit+0x5c>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6193      	str	r3, [r2, #24]
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_MspInit+0x5c>)
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <HAL_MspInit+0x5c>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a0e      	ldr	r2, [pc, #56]	@ (8001ddc <HAL_MspInit+0x5c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <HAL_MspInit+0x5c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_MspInit+0x60>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <HAL_MspInit+0x60>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08a      	sub	sp, #40	@ 0x28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_I2C_MspInit+0x90>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d132      	bne.n	8001e6a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e04:	4b1c      	ldr	r3, [pc, #112]	@ (8001e78 <HAL_I2C_MspInit+0x94>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a1b      	ldr	r2, [pc, #108]	@ (8001e78 <HAL_I2C_MspInit+0x94>)
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_I2C_MspInit+0x94>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e1c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e22:	2312      	movs	r3, #18
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4812      	ldr	r0, [pc, #72]	@ (8001e7c <HAL_I2C_MspInit+0x98>)
 8001e32:	f000 fc21 	bl	8002678 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_I2C_MspInit+0x9c>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e80 <HAL_I2C_MspInit+0x9c>)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <HAL_I2C_MspInit+0x94>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a08      	ldr	r2, [pc, #32]	@ (8001e78 <HAL_I2C_MspInit+0x94>)
 8001e58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e5c:	61d3      	str	r3, [r2, #28]
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_I2C_MspInit+0x94>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	@ 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40005400 	.word	0x40005400
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010c00 	.word	0x40010c00
 8001e80:	40010000 	.word	0x40010000

08001e84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e94:	d113      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e96:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x44>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x44>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	61d3      	str	r3, [r2, #28]
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x44>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	201c      	movs	r0, #28
 8001eb4:	f000 faf7 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eb8:	201c      	movs	r0, #28
 8001eba:	f000 fb10 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	@ 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe0 <HAL_UART_MspInit+0x114>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d124      	bne.n	8001f36 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eec:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ef6:	61d3      	str	r3, [r2, #28]
 8001ef8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f00:	61bb      	str	r3, [r7, #24]
 8001f02:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	4b37      	ldr	r3, [pc, #220]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a36      	ldr	r2, [pc, #216]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f20:	2302      	movs	r3, #2
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f24:	2302      	movs	r3, #2
 8001f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482e      	ldr	r0, [pc, #184]	@ (8001fe8 <HAL_UART_MspInit+0x11c>)
 8001f30:	f000 fba2 	bl	8002678 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f34:	e050      	b.n	8001fd8 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fec <HAL_UART_MspInit+0x120>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d14b      	bne.n	8001fd8 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f40:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	4a27      	ldr	r2, [pc, #156]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f4a:	61d3      	str	r3, [r2, #28]
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_UART_MspInit+0x118>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f76:	2302      	movs	r3, #2
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	481a      	ldr	r0, [pc, #104]	@ (8001ff0 <HAL_UART_MspInit+0x124>)
 8001f86:	f000 fb77 	bl	8002678 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f8a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4814      	ldr	r0, [pc, #80]	@ (8001ff0 <HAL_UART_MspInit+0x124>)
 8001fa0:	f000 fb6a 	bl	8002678 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <HAL_UART_MspInit+0x128>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fac:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbc:	f043 0310 	orr.w	r3, r3, #16
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_UART_MspInit+0x128>)
 8001fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2027      	movs	r0, #39	@ 0x27
 8001fce:	f000 fa6a 	bl	80024a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fd2:	2027      	movs	r0, #39	@ 0x27
 8001fd4:	f000 fa83 	bl	80024de <HAL_NVIC_EnableIRQ>
}
 8001fd8:	bf00      	nop
 8001fda:	3730      	adds	r7, #48	@ 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	40004800 	.word	0x40004800
 8001ff0:	40011000 	.word	0x40011000
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002048:	f000 f916 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <TIM2_IRQHandler+0x10>)
 8002056:	f001 fe33 	bl	8003cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200005fc 	.word	0x200005fc

08002064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <USART3_IRQHandler+0x10>)
 800206a:	f002 fa79 	bl	8004560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000068c 	.word	0x2000068c

08002078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800207c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002080:	f000 fcae 	bl	80029e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f002 fffa 	bl	80050b0 <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20005000 	.word	0x20005000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	200006d4 	.word	0x200006d4
 80020f0:	20000878 	.word	0x20000878

080020f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <setTimer>:


#include "timer.h"
int software_timer[10] = {0};
int flag_timer[10] = {0};
void setTimer(int index,int duration){
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
	software_timer[index] = duration/TICK;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <setTimer+0x34>)
 800210e:	fb82 1203 	smull	r1, r2, r2, r3
 8002112:	1092      	asrs	r2, r2, #2
 8002114:	17db      	asrs	r3, r3, #31
 8002116:	1ad2      	subs	r2, r2, r3
 8002118:	4907      	ldr	r1, [pc, #28]	@ (8002138 <setTimer+0x38>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	flag_timer[index] = 0;
 8002120:	4a06      	ldr	r2, [pc, #24]	@ (800213c <setTimer+0x3c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2100      	movs	r1, #0
 8002126:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	66666667 	.word	0x66666667
 8002138:	200006d8 	.word	0x200006d8
 800213c:	20000700 	.word	0x20000700

08002140 <timerRun>:
void timerRun(){
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++){
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	e01b      	b.n	8002184 <timerRun+0x44>
		software_timer[i]--;
 800214c:	4a12      	ldr	r2, [pc, #72]	@ (8002198 <timerRun+0x58>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	1e5a      	subs	r2, r3, #1
 8002156:	4910      	ldr	r1, [pc, #64]	@ (8002198 <timerRun+0x58>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(software_timer[i] <= 0){
 800215e:	4a0e      	ldr	r2, [pc, #56]	@ (8002198 <timerRun+0x58>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002166:	2b00      	cmp	r3, #0
 8002168:	dc09      	bgt.n	800217e <timerRun+0x3e>
			software_timer[i] = 0;
 800216a:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <timerRun+0x58>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2100      	movs	r1, #0
 8002170:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			flag_timer[i] = 1;
 8002174:	4a09      	ldr	r2, [pc, #36]	@ (800219c <timerRun+0x5c>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2101      	movs	r1, #1
 800217a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<10;i++){
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3301      	adds	r3, #1
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b09      	cmp	r3, #9
 8002188:	dde0      	ble.n	800214c <timerRun+0xc>
		}
	}
}
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	200006d8 	.word	0x200006d8
 800219c:	20000700 	.word	0x20000700

080021a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021a0:	f7ff ffa8 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a4:	480b      	ldr	r0, [pc, #44]	@ (80021d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021a6:	490c      	ldr	r1, [pc, #48]	@ (80021d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021a8:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021bc:	4c09      	ldr	r4, [pc, #36]	@ (80021e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ca:	f002 ff77 	bl	80050bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021ce:	f7ff fbdf 	bl	8001990 <main>
  bx lr
 80021d2:	4770      	bx	lr
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80021dc:	08006624 	.word	0x08006624
  ldr r2, =_sbss
 80021e0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80021e4:	20000874 	.word	0x20000874

080021e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_2_IRQHandler>
	...

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <HAL_Init+0x28>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	@ (8002214 <HAL_Init+0x28>)
 80021f6:	f043 0310 	orr.w	r3, r3, #16
 80021fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f947 	bl	8002490 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	2000      	movs	r0, #0
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fdba 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f95f 	bl	80024fa <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 f927 	bl	80024a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000038 	.word	0x20000038
 8002270:	20000040 	.word	0x20000040
 8002274:	2000003c 	.word	0x2000003c

08002278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_IncTick+0x1c>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_IncTick+0x20>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a03      	ldr	r2, [pc, #12]	@ (8002298 <HAL_IncTick+0x20>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000040 	.word	0x20000040
 8002298:	20000728 	.word	0x20000728

0800229c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b02      	ldr	r3, [pc, #8]	@ (80022ac <HAL_GetTick+0x10>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000728 	.word	0x20000728

080022b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff fff0 	bl	800229c <HAL_GetTick>
 80022bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d005      	beq.n	80022d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <HAL_Delay+0x44>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022d6:	bf00      	nop
 80022d8:	f7ff ffe0 	bl	800229c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8f7      	bhi.n	80022d8 <HAL_Delay+0x28>
  {
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000040 	.word	0x20000040

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232a:	4a04      	ldr	r2, [pc, #16]	@ (800233c <__NVIC_SetPriorityGrouping+0x44>)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60d3      	str	r3, [r2, #12]
}
 8002330:	bf00      	nop
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4906      	ldr	r1, [pc, #24]	@ (8002390 <__NVIC_EnableIRQ+0x34>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	@ (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	@ (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	@ 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3b01      	subs	r3, #1
 8002458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800245c:	d301      	bcc.n	8002462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800245e:	2301      	movs	r3, #1
 8002460:	e00f      	b.n	8002482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002462:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <SysTick_Config+0x40>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246a:	210f      	movs	r1, #15
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f7ff ff90 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <SysTick_Config+0x40>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247a:	4b04      	ldr	r3, [pc, #16]	@ (800248c <SysTick_Config+0x40>)
 800247c:	2207      	movs	r2, #7
 800247e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	e000e010 	.word	0xe000e010

08002490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ff2d 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	60b9      	str	r1, [r7, #8]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff42 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff90 	bl	80023e8 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5f 	bl	8002394 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff35 	bl	800235c <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa2 	bl	800244c <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d008      	beq.n	800253c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e020      	b.n	800257e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 020e 	bic.w	r2, r2, #14
 800254a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002564:	2101      	movs	r1, #1
 8002566:	fa01 f202 	lsl.w	r2, r1, r2
 800256a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d005      	beq.n	80025ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2204      	movs	r2, #4
 80025a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e051      	b.n	8002650 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 020e 	bic.w	r2, r2, #14
 80025ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a22      	ldr	r2, [pc, #136]	@ (800265c <HAL_DMA_Abort_IT+0xd4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d029      	beq.n	800262a <HAL_DMA_Abort_IT+0xa2>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	@ (8002660 <HAL_DMA_Abort_IT+0xd8>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d022      	beq.n	8002626 <HAL_DMA_Abort_IT+0x9e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002664 <HAL_DMA_Abort_IT+0xdc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d01a      	beq.n	8002620 <HAL_DMA_Abort_IT+0x98>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002668 <HAL_DMA_Abort_IT+0xe0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d012      	beq.n	800261a <HAL_DMA_Abort_IT+0x92>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1c      	ldr	r2, [pc, #112]	@ (800266c <HAL_DMA_Abort_IT+0xe4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00a      	beq.n	8002614 <HAL_DMA_Abort_IT+0x8c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1b      	ldr	r2, [pc, #108]	@ (8002670 <HAL_DMA_Abort_IT+0xe8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d102      	bne.n	800260e <HAL_DMA_Abort_IT+0x86>
 8002608:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800260c:	e00e      	b.n	800262c <HAL_DMA_Abort_IT+0xa4>
 800260e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002612:	e00b      	b.n	800262c <HAL_DMA_Abort_IT+0xa4>
 8002614:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002618:	e008      	b.n	800262c <HAL_DMA_Abort_IT+0xa4>
 800261a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800261e:	e005      	b.n	800262c <HAL_DMA_Abort_IT+0xa4>
 8002620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002624:	e002      	b.n	800262c <HAL_DMA_Abort_IT+0xa4>
 8002626:	2310      	movs	r3, #16
 8002628:	e000      	b.n	800262c <HAL_DMA_Abort_IT+0xa4>
 800262a:	2301      	movs	r3, #1
 800262c:	4a11      	ldr	r2, [pc, #68]	@ (8002674 <HAL_DMA_Abort_IT+0xec>)
 800262e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	4798      	blx	r3
    } 
  }
  return status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40020008 	.word	0x40020008
 8002660:	4002001c 	.word	0x4002001c
 8002664:	40020030 	.word	0x40020030
 8002668:	40020044 	.word	0x40020044
 800266c:	40020058 	.word	0x40020058
 8002670:	4002006c 	.word	0x4002006c
 8002674:	40020000 	.word	0x40020000

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b08b      	sub	sp, #44	@ 0x2c
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e169      	b.n	8002960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800268c:	2201      	movs	r2, #1
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	f040 8158 	bne.w	800295a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a9a      	ldr	r2, [pc, #616]	@ (8002918 <HAL_GPIO_Init+0x2a0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d05e      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026b4:	4a98      	ldr	r2, [pc, #608]	@ (8002918 <HAL_GPIO_Init+0x2a0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d875      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ba:	4a98      	ldr	r2, [pc, #608]	@ (800291c <HAL_GPIO_Init+0x2a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d058      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026c0:	4a96      	ldr	r2, [pc, #600]	@ (800291c <HAL_GPIO_Init+0x2a4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d86f      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026c6:	4a96      	ldr	r2, [pc, #600]	@ (8002920 <HAL_GPIO_Init+0x2a8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d052      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026cc:	4a94      	ldr	r2, [pc, #592]	@ (8002920 <HAL_GPIO_Init+0x2a8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d869      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026d2:	4a94      	ldr	r2, [pc, #592]	@ (8002924 <HAL_GPIO_Init+0x2ac>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d04c      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026d8:	4a92      	ldr	r2, [pc, #584]	@ (8002924 <HAL_GPIO_Init+0x2ac>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d863      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026de:	4a92      	ldr	r2, [pc, #584]	@ (8002928 <HAL_GPIO_Init+0x2b0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d046      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
 80026e4:	4a90      	ldr	r2, [pc, #576]	@ (8002928 <HAL_GPIO_Init+0x2b0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d85d      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026ea:	2b12      	cmp	r3, #18
 80026ec:	d82a      	bhi.n	8002744 <HAL_GPIO_Init+0xcc>
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d859      	bhi.n	80027a6 <HAL_GPIO_Init+0x12e>
 80026f2:	a201      	add	r2, pc, #4	@ (adr r2, 80026f8 <HAL_GPIO_Init+0x80>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	08002773 	.word	0x08002773
 80026fc:	0800274d 	.word	0x0800274d
 8002700:	0800275f 	.word	0x0800275f
 8002704:	080027a1 	.word	0x080027a1
 8002708:	080027a7 	.word	0x080027a7
 800270c:	080027a7 	.word	0x080027a7
 8002710:	080027a7 	.word	0x080027a7
 8002714:	080027a7 	.word	0x080027a7
 8002718:	080027a7 	.word	0x080027a7
 800271c:	080027a7 	.word	0x080027a7
 8002720:	080027a7 	.word	0x080027a7
 8002724:	080027a7 	.word	0x080027a7
 8002728:	080027a7 	.word	0x080027a7
 800272c:	080027a7 	.word	0x080027a7
 8002730:	080027a7 	.word	0x080027a7
 8002734:	080027a7 	.word	0x080027a7
 8002738:	080027a7 	.word	0x080027a7
 800273c:	08002755 	.word	0x08002755
 8002740:	08002769 	.word	0x08002769
 8002744:	4a79      	ldr	r2, [pc, #484]	@ (800292c <HAL_GPIO_Init+0x2b4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800274a:	e02c      	b.n	80027a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e029      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	3304      	adds	r3, #4
 800275a:	623b      	str	r3, [r7, #32]
          break;
 800275c:	e024      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	3308      	adds	r3, #8
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e01f      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	330c      	adds	r3, #12
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e01a      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277a:	2304      	movs	r3, #4
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e013      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002788:	2308      	movs	r3, #8
 800278a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	611a      	str	r2, [r3, #16]
          break;
 8002792:	e009      	b.n	80027a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002794:	2308      	movs	r3, #8
 8002796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	615a      	str	r2, [r3, #20]
          break;
 800279e:	e003      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x130>
          break;
 80027a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2bff      	cmp	r3, #255	@ 0xff
 80027ac:	d801      	bhi.n	80027b2 <HAL_GPIO_Init+0x13a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	e001      	b.n	80027b6 <HAL_GPIO_Init+0x13e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	2bff      	cmp	r3, #255	@ 0xff
 80027bc:	d802      	bhi.n	80027c4 <HAL_GPIO_Init+0x14c>
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	e002      	b.n	80027ca <HAL_GPIO_Init+0x152>
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	3b08      	subs	r3, #8
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	210f      	movs	r1, #15
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	6a39      	ldr	r1, [r7, #32]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	431a      	orrs	r2, r3
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80b1 	beq.w	800295a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002930 <HAL_GPIO_Init+0x2b8>)
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002930 <HAL_GPIO_Init+0x2b8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6193      	str	r3, [r2, #24]
 8002804:	4b4a      	ldr	r3, [pc, #296]	@ (8002930 <HAL_GPIO_Init+0x2b8>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002810:	4a48      	ldr	r2, [pc, #288]	@ (8002934 <HAL_GPIO_Init+0x2bc>)
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a40      	ldr	r2, [pc, #256]	@ (8002938 <HAL_GPIO_Init+0x2c0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_GPIO_Init+0x1ec>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3f      	ldr	r2, [pc, #252]	@ (800293c <HAL_GPIO_Init+0x2c4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00d      	beq.n	8002860 <HAL_GPIO_Init+0x1e8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3e      	ldr	r2, [pc, #248]	@ (8002940 <HAL_GPIO_Init+0x2c8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d007      	beq.n	800285c <HAL_GPIO_Init+0x1e4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3d      	ldr	r2, [pc, #244]	@ (8002944 <HAL_GPIO_Init+0x2cc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d101      	bne.n	8002858 <HAL_GPIO_Init+0x1e0>
 8002854:	2303      	movs	r3, #3
 8002856:	e006      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002858:	2304      	movs	r3, #4
 800285a:	e004      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 800285c:	2302      	movs	r3, #2
 800285e:	e002      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <HAL_GPIO_Init+0x1ee>
 8002864:	2300      	movs	r3, #0
 8002866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002868:	f002 0203 	and.w	r2, r2, #3
 800286c:	0092      	lsls	r2, r2, #2
 800286e:	4093      	lsls	r3, r2
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002876:	492f      	ldr	r1, [pc, #188]	@ (8002934 <HAL_GPIO_Init+0x2bc>)
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	492c      	ldr	r1, [pc, #176]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
 800289c:	e006      	b.n	80028ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	4928      	ldr	r1, [pc, #160]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b8:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4922      	ldr	r1, [pc, #136]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60cb      	str	r3, [r1, #12]
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028c6:	4b20      	ldr	r3, [pc, #128]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	491e      	ldr	r1, [pc, #120]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	4918      	ldr	r1, [pc, #96]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ee:	4b16      	ldr	r3, [pc, #88]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4914      	ldr	r1, [pc, #80]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d021      	beq.n	800294c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002908:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	490e      	ldr	r1, [pc, #56]	@ (8002948 <HAL_GPIO_Init+0x2d0>)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e021      	b.n	800295a <HAL_GPIO_Init+0x2e2>
 8002916:	bf00      	nop
 8002918:	10320000 	.word	0x10320000
 800291c:	10310000 	.word	0x10310000
 8002920:	10220000 	.word	0x10220000
 8002924:	10210000 	.word	0x10210000
 8002928:	10120000 	.word	0x10120000
 800292c:	10110000 	.word	0x10110000
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	40010800 	.word	0x40010800
 800293c:	40010c00 	.word	0x40010c00
 8002940:	40011000 	.word	0x40011000
 8002944:	40011400 	.word	0x40011400
 8002948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800294c:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <HAL_GPIO_Init+0x304>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	43db      	mvns	r3, r3
 8002954:	4909      	ldr	r1, [pc, #36]	@ (800297c <HAL_GPIO_Init+0x304>)
 8002956:	4013      	ands	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800295a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295c:	3301      	adds	r3, #1
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	f47f ae8e 	bne.w	800268c <HAL_GPIO_Init+0x14>
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	372c      	adds	r7, #44	@ 0x2c
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	40010400 	.word	0x40010400

08002980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e001      	b.n	80029a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	807b      	strh	r3, [r7, #2]
 80029ba:	4613      	mov	r3, r2
 80029bc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029be:	787b      	ldrb	r3, [r7, #1]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c4:	887a      	ldrh	r2, [r7, #2]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029ca:	e003      	b.n	80029d4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	041a      	lsls	r2, r3, #16
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ea:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029ec:	695a      	ldr	r2, [r3, #20]
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f806 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e12b      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff f9ca 	bl	8001de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	@ 0x24
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a88:	f001 f832 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4a81      	ldr	r2, [pc, #516]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d807      	bhi.n	8002aa8 <HAL_I2C_Init+0x84>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a80      	ldr	r2, [pc, #512]	@ (8002c9c <HAL_I2C_Init+0x278>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	bf94      	ite	ls
 8002aa0:	2301      	movls	r3, #1
 8002aa2:	2300      	movhi	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e006      	b.n	8002ab6 <HAL_I2C_Init+0x92>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ca0 <HAL_I2C_Init+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bf94      	ite	ls
 8002ab0:	2301      	movls	r3, #1
 8002ab2:	2300      	movhi	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0e7      	b.n	8002c8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a78      	ldr	r2, [pc, #480]	@ (8002ca4 <HAL_I2C_Init+0x280>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0c9b      	lsrs	r3, r3, #18
 8002ac8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d802      	bhi.n	8002af8 <HAL_I2C_Init+0xd4>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	3301      	adds	r3, #1
 8002af6:	e009      	b.n	8002b0c <HAL_I2C_Init+0xe8>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	4a69      	ldr	r2, [pc, #420]	@ (8002ca8 <HAL_I2C_Init+0x284>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	495c      	ldr	r1, [pc, #368]	@ (8002c98 <HAL_I2C_Init+0x274>)
 8002b28:	428b      	cmp	r3, r1
 8002b2a:	d819      	bhi.n	8002b60 <HAL_I2C_Init+0x13c>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e59      	subs	r1, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3a:	1c59      	adds	r1, r3, #1
 8002b3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b40:	400b      	ands	r3, r1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_I2C_Init+0x138>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1e59      	subs	r1, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	e051      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	e04f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d111      	bne.n	8002b8c <HAL_I2C_Init+0x168>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e012      	b.n	8002bb2 <HAL_I2C_Init+0x18e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1e58      	subs	r0, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6859      	ldr	r1, [r3, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	0099      	lsls	r1, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Init+0x196>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e022      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10e      	bne.n	8002be0 <HAL_I2C_Init+0x1bc>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1e58      	subs	r0, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bde:	e00f      	b.n	8002c00 <HAL_I2C_Init+0x1dc>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e58      	subs	r0, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	0099      	lsls	r1, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6809      	ldr	r1, [r1, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6911      	ldr	r1, [r2, #16]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68d2      	ldr	r2, [r2, #12]
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	000186a0 	.word	0x000186a0
 8002c9c:	001e847f 	.word	0x001e847f
 8002ca0:	003d08ff 	.word	0x003d08ff
 8002ca4:	431bde83 	.word	0x431bde83
 8002ca8:	10624dd3 	.word	0x10624dd3

08002cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af02      	add	r7, sp, #8
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	460b      	mov	r3, r1
 8002cba:	817b      	strh	r3, [r7, #10]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cc0:	f7ff faec 	bl	800229c <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	f040 80e0 	bne.w	8002e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2319      	movs	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4970      	ldr	r1, [pc, #448]	@ (8002ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f964 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0d3      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_I2C_Master_Transmit+0x50>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e0cc      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d007      	beq.n	8002d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2221      	movs	r2, #33	@ 0x21
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	893a      	ldrh	r2, [r7, #8]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4a50      	ldr	r2, [pc, #320]	@ (8002ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d64:	8979      	ldrh	r1, [r7, #10]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f89c 	bl	8002ea8 <I2C_MasterRequestWrite>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e08d      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d90:	e066      	b.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	6a39      	ldr	r1, [r7, #32]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fa22 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e06b      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d11b      	bne.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d017      	beq.n	8002e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	781a      	ldrb	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 fa19 	bl	8003270 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01a      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d194      	bne.n	8002d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e94:	2302      	movs	r3, #2
  }
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	00100002 	.word	0x00100002
 8002ea4:	ffff0000 	.word	0xffff0000

08002ea8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d006      	beq.n	8002ed2 <I2C_MasterRequestWrite+0x2a>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d003      	beq.n	8002ed2 <I2C_MasterRequestWrite+0x2a>
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ed0:	d108      	bne.n	8002ee4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e00b      	b.n	8002efc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	2b12      	cmp	r3, #18
 8002eea:	d107      	bne.n	8002efc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f84f 	bl	8002fac <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00d      	beq.n	8002f30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f22:	d103      	bne.n	8002f2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e035      	b.n	8002f9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f38:	d108      	bne.n	8002f4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	e01b      	b.n	8002f84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f4c:	897b      	ldrh	r3, [r7, #10]
 8002f4e:	11db      	asrs	r3, r3, #7
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 0306 	and.w	r3, r3, #6
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f063 030f 	orn	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	490e      	ldr	r1, [pc, #56]	@ (8002fa4 <I2C_MasterRequestWrite+0xfc>)
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f898 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e010      	b.n	8002f9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f7a:	897b      	ldrh	r3, [r7, #10]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4907      	ldr	r1, [pc, #28]	@ (8002fa8 <I2C_MasterRequestWrite+0x100>)
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 f888 	bl	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00010008 	.word	0x00010008
 8002fa8:	00010002 	.word	0x00010002

08002fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbc:	e048      	b.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d044      	beq.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc6:	f7ff f969 	bl	800229c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d302      	bcc.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d139      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10d      	bne.n	8003002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	e00c      	b.n	800301c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	43da      	mvns	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4013      	ands	r3, r2
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	429a      	cmp	r2, r3
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e023      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	0c1b      	lsrs	r3, r3, #16
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d10d      	bne.n	8003076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	43da      	mvns	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	b29b      	uxth	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	e00c      	b.n	8003090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	429a      	cmp	r2, r3
 8003094:	d093      	beq.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ae:	e071      	b.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030be:	d123      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f043 0204 	orr.w	r2, r3, #4
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e067      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d041      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003110:	f7ff f8c4 	bl	800229c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d302      	bcc.n	8003126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d136      	bne.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10c      	bne.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf14      	ite	ne
 8003142:	2301      	movne	r3, #1
 8003144:	2300      	moveq	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	e00b      	b.n	8003162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d016      	beq.n	8003194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e021      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10c      	bne.n	80031b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e00b      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	43da      	mvns	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4013      	ands	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af6d 	bne.w	80030b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	e034      	b.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f886 	bl	8003300 <I2C_IsAcknowledgeFailed>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e034      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d028      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7ff f849 	bl	800229c <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11d      	bne.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003226:	2b80      	cmp	r3, #128	@ 0x80
 8003228:	d016      	beq.n	8003258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003262:	2b80      	cmp	r3, #128	@ 0x80
 8003264:	d1c3      	bne.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	e034      	b.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f83e 	bl	8003300 <I2C_IsAcknowledgeFailed>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e034      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d028      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003296:	f7ff f801 	bl	800229c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d302      	bcc.n	80032ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11d      	bne.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d016      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e007      	b.n	80032f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d1c3      	bne.n	800327e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003316:	d11b      	bne.n	8003350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	f043 0204 	orr.w	r2, r3, #4
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e272      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 8087 	beq.w	800348a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800337c:	4b92      	ldr	r3, [pc, #584]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b04      	cmp	r3, #4
 8003386:	d00c      	beq.n	80033a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003388:	4b8f      	ldr	r3, [pc, #572]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 030c 	and.w	r3, r3, #12
 8003390:	2b08      	cmp	r3, #8
 8003392:	d112      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
 8003394:	4b8c      	ldr	r3, [pc, #560]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800339c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a0:	d10b      	bne.n	80033ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a2:	4b89      	ldr	r3, [pc, #548]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d06c      	beq.n	8003488 <HAL_RCC_OscConfig+0x12c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d168      	bne.n	8003488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e24c      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x76>
 80033c4:	4b80      	ldr	r3, [pc, #512]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a7f      	ldr	r2, [pc, #508]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e02e      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <HAL_RCC_OscConfig+0x98>
 80033da:	4b7b      	ldr	r3, [pc, #492]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a7a      	ldr	r2, [pc, #488]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	4b78      	ldr	r3, [pc, #480]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a77      	ldr	r2, [pc, #476]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0xbc>
 80033fe:	4b72      	ldr	r3, [pc, #456]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a71      	ldr	r2, [pc, #452]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6f      	ldr	r3, [pc, #444]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6e      	ldr	r2, [pc, #440]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xd4>
 8003418:	4b6b      	ldr	r3, [pc, #428]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6a      	ldr	r2, [pc, #424]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b68      	ldr	r3, [pc, #416]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a67      	ldr	r2, [pc, #412]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fe ff30 	bl	800229c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe ff2c 	bl	800229c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e200      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b5d      	ldr	r3, [pc, #372]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xe4>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe ff1c 	bl	800229c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe ff18 	bl	800229c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e1ec      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x10c>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d063      	beq.n	800355e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003496:	4b4c      	ldr	r3, [pc, #304]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034a2:	4b49      	ldr	r3, [pc, #292]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d11c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
 80034ae:	4b46      	ldr	r3, [pc, #280]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d116      	bne.n	80034e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	4b43      	ldr	r3, [pc, #268]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d001      	beq.n	80034d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1c0      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d2:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	4939      	ldr	r1, [pc, #228]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	e03a      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f0:	4b36      	ldr	r3, [pc, #216]	@ (80035cc <HAL_RCC_OscConfig+0x270>)
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f6:	f7fe fed1 	bl	800229c <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe fecd 	bl	800229c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1a1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003510:	4b2d      	ldr	r3, [pc, #180]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b2a      	ldr	r3, [pc, #168]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4927      	ldr	r1, [pc, #156]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 800352c:	4313      	orrs	r3, r2
 800352e:	600b      	str	r3, [r1, #0]
 8003530:	e015      	b.n	800355e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003532:	4b26      	ldr	r3, [pc, #152]	@ (80035cc <HAL_RCC_OscConfig+0x270>)
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003538:	f7fe feb0 	bl	800229c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003540:	f7fe feac 	bl	800229c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e180      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003552:	4b1d      	ldr	r3, [pc, #116]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03a      	beq.n	80035e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d019      	beq.n	80035a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003572:	4b17      	ldr	r3, [pc, #92]	@ (80035d0 <HAL_RCC_OscConfig+0x274>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003578:	f7fe fe90 	bl	800229c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003580:	f7fe fe8c 	bl	800229c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e160      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003592:	4b0d      	ldr	r3, [pc, #52]	@ (80035c8 <HAL_RCC_OscConfig+0x26c>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f000 face 	bl	8003b40 <RCC_Delay>
 80035a4:	e01c      	b.n	80035e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_RCC_OscConfig+0x274>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ac:	f7fe fe76 	bl	800229c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b2:	e00f      	b.n	80035d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe fe72 	bl	800229c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d908      	bls.n	80035d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e146      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	42420000 	.word	0x42420000
 80035d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	4b92      	ldr	r3, [pc, #584]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e9      	bne.n	80035b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a6 	beq.w	800373a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10d      	bne.n	800361a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fe:	4b88      	ldr	r3, [pc, #544]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4a87      	ldr	r2, [pc, #540]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003608:	61d3      	str	r3, [r2, #28]
 800360a:	4b85      	ldr	r3, [pc, #532]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b82      	ldr	r3, [pc, #520]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b7f      	ldr	r3, [pc, #508]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a7e      	ldr	r2, [pc, #504]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fe fe33 	bl	800229c <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe fe2f 	bl	800229c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	@ 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e103      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b75      	ldr	r3, [pc, #468]	@ (8003824 <HAL_RCC_OscConfig+0x4c8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x312>
 8003660:	4b6f      	ldr	r3, [pc, #444]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a6e      	ldr	r2, [pc, #440]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e02d      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x334>
 8003676:	4b6a      	ldr	r3, [pc, #424]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a69      	ldr	r2, [pc, #420]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0301 	bic.w	r3, r3, #1
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4b67      	ldr	r3, [pc, #412]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a66      	ldr	r2, [pc, #408]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	e01c      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d10c      	bne.n	80036b2 <HAL_RCC_OscConfig+0x356>
 8003698:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a60      	ldr	r2, [pc, #384]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	f043 0304 	orr.w	r3, r3, #4
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	e00b      	b.n	80036ca <HAL_RCC_OscConfig+0x36e>
 80036b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a5a      	ldr	r2, [pc, #360]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b58      	ldr	r3, [pc, #352]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a57      	ldr	r2, [pc, #348]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d015      	beq.n	80036fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fde3 	bl	800229c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe fddf 	bl	800229c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0b1      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0ee      	beq.n	80036da <HAL_RCC_OscConfig+0x37e>
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fe fdcd 	bl	800229c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fe fdc9 	bl	800229c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e09b      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371c:	4b40      	ldr	r3, [pc, #256]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ee      	bne.n	8003706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372e:	4b3c      	ldr	r3, [pc, #240]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a3b      	ldr	r2, [pc, #236]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8087 	beq.w	8003852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 030c 	and.w	r3, r3, #12
 800374c:	2b08      	cmp	r3, #8
 800374e:	d061      	beq.n	8003814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d146      	bne.n	80037e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003758:	4b33      	ldr	r3, [pc, #204]	@ (8003828 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375e:	f7fe fd9d 	bl	800229c <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003766:	f7fe fd99 	bl	800229c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e06d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003778:	4b29      	ldr	r3, [pc, #164]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f0      	bne.n	8003766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800378e:	4b24      	ldr	r3, [pc, #144]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	4921      	ldr	r1, [pc, #132]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a19      	ldr	r1, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b0:	430b      	orrs	r3, r1
 80037b2:	491b      	ldr	r1, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037be:	f7fe fd6d 	bl	800229c <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c6:	f7fe fd69 	bl	800229c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d8:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x46a>
 80037e4:	e035      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e6:	4b10      	ldr	r3, [pc, #64]	@ (8003828 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fe fd56 	bl	800229c <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f4:	f7fe fd52 	bl	800229c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e026      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x498>
 8003812:	e01e      	b.n	8003852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d107      	bne.n	800382c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e019      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
 8003820:	40021000 	.word	0x40021000
 8003824:	40007000 	.word	0x40007000
 8003828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_OscConfig+0x500>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d106      	bne.n	800384e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 0207 	bic.w	r2, r3, #7
 800388a:	4965      	ldr	r1, [pc, #404]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a58      	ldr	r2, [pc, #352]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a52      	ldr	r2, [pc, #328]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe fca4 	bl	800229c <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe fca0 	bl	800229c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 0207 	bic.w	r2, r3, #7
 8003996:	4922      	ldr	r1, [pc, #136]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1cc>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <HAL_RCC_ClockConfig+0x1d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fc02 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40022000 	.word	0x40022000
 8003a24:	40021000 	.word	0x40021000
 8003a28:	080065b4 	.word	0x080065b4
 8003a2c:	20000038 	.word	0x20000038
 8003a30:	2000003c 	.word	0x2000003c

08003a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x30>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x36>
 8003a62:	e027      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a66:	613b      	str	r3, [r7, #16]
      break;
 8003a68:	e027      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0c9b      	lsrs	r3, r3, #18
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a74:	5cd3      	ldrb	r3, [r2, r3]
 8003a76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0c5b      	lsrs	r3, r3, #17
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	4a11      	ldr	r2, [pc, #68]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003a96:	fb03 f202 	mul.w	r2, r3, r2
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e004      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	613b      	str	r3, [r7, #16]
      break;
 8003ab2:	e002      	b.n	8003aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ab6:	613b      	str	r3, [r7, #16]
      break;
 8003ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aba:	693b      	ldr	r3, [r7, #16]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	080065cc 	.word	0x080065cc
 8003ad4:	080065dc 	.word	0x080065dc
 8003ad8:	003d0900 	.word	0x003d0900

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b02      	ldr	r3, [pc, #8]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20000038 	.word	0x20000038

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	@ (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	@ (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	080065c4 	.word	0x080065c4

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	@ (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	080065c4 	.word	0x080065c4

08003b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b48:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <RCC_Delay+0x34>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <RCC_Delay+0x38>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b5c:	bf00      	nop
  }
  while (Delay --);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	60fa      	str	r2, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f9      	bne.n	8003b5c <RCC_Delay+0x1c>
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	20000038 	.word	0x20000038
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e041      	b.n	8003c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe f96e 	bl	8001e84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fa5c 	bl	8004078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e03a      	b.n	8003caa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a18      	ldr	r2, [pc, #96]	@ (8003cb4 <HAL_TIM_Base_Start_IT+0x98>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x58>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5e:	d009      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x58>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a14      	ldr	r2, [pc, #80]	@ (8003cb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x58>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a13      	ldr	r2, [pc, #76]	@ (8003cbc <HAL_TIM_Base_Start_IT+0xa0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d111      	bne.n	8003c98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d010      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	e007      	b.n	8003ca8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800

08003cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d020      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01b      	beq.n	8003d24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0202 	mvn.w	r2, #2
 8003cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f998 	bl	8004040 <HAL_TIM_IC_CaptureCallback>
 8003d10:	e005      	b.n	8003d1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f98b 	bl	800402e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f99a 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d020      	beq.n	8003d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01b      	beq.n	8003d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f06f 0204 	mvn.w	r2, #4
 8003d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2202      	movs	r2, #2
 8003d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f972 	bl	8004040 <HAL_TIM_IC_CaptureCallback>
 8003d5c:	e005      	b.n	8003d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f965 	bl	800402e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f974 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d020      	beq.n	8003dbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01b      	beq.n	8003dbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0208 	mvn.w	r2, #8
 8003d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	69db      	ldr	r3, [r3, #28]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d003      	beq.n	8003daa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f94c 	bl	8004040 <HAL_TIM_IC_CaptureCallback>
 8003da8:	e005      	b.n	8003db6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f93f 	bl	800402e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f94e 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d020      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01b      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0210 	mvn.w	r2, #16
 8003dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f926 	bl	8004040 <HAL_TIM_IC_CaptureCallback>
 8003df4:	e005      	b.n	8003e02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f919 	bl	800402e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f928 	bl	8004052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0201 	mvn.w	r2, #1
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd ff98 	bl	8001d5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00c      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa7f 	bl	800434e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00c      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d007      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f8f8 	bl	8004064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00c      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d007      	beq.n	8003e98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0220 	mvn.w	r2, #32
 8003e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fa52 	bl	800433c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <HAL_TIM_ConfigClockSource+0x1c>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	e0b4      	b.n	8004026 <HAL_TIM_ConfigClockSource+0x186>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ee2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ef4:	d03e      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xd4>
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003efa:	f200 8087 	bhi.w	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	f000 8086 	beq.w	8004012 <HAL_TIM_ConfigClockSource+0x172>
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0a:	d87f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b70      	cmp	r3, #112	@ 0x70
 8003f0e:	d01a      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0xa6>
 8003f10:	2b70      	cmp	r3, #112	@ 0x70
 8003f12:	d87b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	2b60      	cmp	r3, #96	@ 0x60
 8003f16:	d050      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x11a>
 8003f18:	2b60      	cmp	r3, #96	@ 0x60
 8003f1a:	d877      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f1c:	2b50      	cmp	r3, #80	@ 0x50
 8003f1e:	d03c      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xfa>
 8003f20:	2b50      	cmp	r3, #80	@ 0x50
 8003f22:	d873      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f24:	2b40      	cmp	r3, #64	@ 0x40
 8003f26:	d058      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x13a>
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d86f      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f2c:	2b30      	cmp	r3, #48	@ 0x30
 8003f2e:	d064      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f30:	2b30      	cmp	r3, #48	@ 0x30
 8003f32:	d86b      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d060      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d867      	bhi.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d05c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d05a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x15a>
 8003f44:	e062      	b.n	800400c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f56:	f000 f974 	bl	8004242 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
      break;
 8003f72:	e04f      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	f000 f95d 	bl	8004242 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e03c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 f8d4 	bl	8004154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2150      	movs	r1, #80	@ 0x50
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f92b 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e02c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 f8f2 	bl	80041b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2160      	movs	r1, #96	@ 0x60
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f91b 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e01c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 f8b4 	bl	8004154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2140      	movs	r1, #64	@ 0x40
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f90b 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e00c      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 f902 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 800400a:	e003      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	73fb      	strb	r3, [r7, #15]
      break;
 8004010:	e000      	b.n	8004014 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800405a:	bf00      	nop
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	bc80      	pop	{r7}
 8004074:	4770      	bx	lr
	...

08004078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2f      	ldr	r2, [pc, #188]	@ (8004148 <TIM_Base_SetConfig+0xd0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <TIM_Base_SetConfig+0x30>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004096:	d007      	beq.n	80040a8 <TIM_Base_SetConfig+0x30>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a2c      	ldr	r2, [pc, #176]	@ (800414c <TIM_Base_SetConfig+0xd4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_Base_SetConfig+0x30>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a2b      	ldr	r2, [pc, #172]	@ (8004150 <TIM_Base_SetConfig+0xd8>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d108      	bne.n	80040ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a22      	ldr	r2, [pc, #136]	@ (8004148 <TIM_Base_SetConfig+0xd0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <TIM_Base_SetConfig+0x62>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c8:	d007      	beq.n	80040da <TIM_Base_SetConfig+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <TIM_Base_SetConfig+0xd4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_Base_SetConfig+0x62>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <TIM_Base_SetConfig+0xd8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d108      	bne.n	80040ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a0d      	ldr	r2, [pc, #52]	@ (8004148 <TIM_Base_SetConfig+0xd0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d103      	bne.n	8004120 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	611a      	str	r2, [r3, #16]
  }
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800

08004154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800417e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 030a 	bic.w	r3, r3, #10
 8004190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	031b      	lsls	r3, r3, #12
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	621a      	str	r2, [r3, #32]
}
 8004204:	bf00      	nop
 8004206:	371c      	adds	r7, #28
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr

08004242 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004242:	b480      	push	{r7}
 8004244:	b087      	sub	sp, #28
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	60b9      	str	r1, [r7, #8]
 800424c:	607a      	str	r2, [r7, #4]
 800424e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800425c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	431a      	orrs	r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004294:	2302      	movs	r3, #2
 8004296:	e046      	b.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	@ (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e4:	d009      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a12      	ldr	r2, [pc, #72]	@ (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a10      	ldr	r2, [pc, #64]	@ (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10c      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004300:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	4313      	orrs	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr
 8004330:	40012c00 	.word	0x40012c00
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800

0800433c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	bc80      	pop	{r7}
 800435e:	4770      	bx	lr

08004360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e042      	b.n	80043f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd fda0 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	@ 0x24
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fdb7 	bl	8004f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b20      	cmp	r3, #32
 800441e:	d175      	bne.n	800450c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_UART_Transmit+0x2c>
 8004426:	88fb      	ldrh	r3, [r7, #6]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e06e      	b.n	800450e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2221      	movs	r2, #33	@ 0x21
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443e:	f7fd ff2d 	bl	800229c <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004458:	d108      	bne.n	800446c <HAL_UART_Transmit+0x6c>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e003      	b.n	8004474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004474:	e02e      	b.n	80044d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	@ 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fb1c 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e03a      	b.n	800450e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10b      	bne.n	80044b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	3302      	adds	r3, #2
 80044b2:	61bb      	str	r3, [r7, #24]
 80044b4:	e007      	b.n	80044c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	781a      	ldrb	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	3301      	adds	r3, #1
 80044c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1cb      	bne.n	8004476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2140      	movs	r1, #64	@ 0x40
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fae8 	bl	8004abe <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e006      	b.n	800450e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b20      	cmp	r3, #32
 800452e:	d112      	bne.n	8004556 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <HAL_UART_Receive_IT+0x26>
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e00b      	b.n	8004558 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004546:	88fb      	ldrh	r3, [r7, #6]
 8004548:	461a      	mov	r2, r3
 800454a:	68b9      	ldr	r1, [r7, #8]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fb0f 	bl	8004b70 <UART_Start_Receive_IT>
 8004552:	4603      	mov	r3, r0
 8004554:	e000      	b.n	8004558 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004556:	2302      	movs	r3, #2
  }
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b0ba      	sub	sp, #232	@ 0xe8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004586:	2300      	movs	r3, #0
 8004588:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800458c:	2300      	movs	r3, #0
 800458e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800459e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <HAL_UART_IRQHandler+0x66>
 80045b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fbec 	bl	8004d9c <UART_Receive_IT>
      return;
 80045c4:	e25b      	b.n	8004a7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 80de 	beq.w	800478c <HAL_UART_IRQHandler+0x22c>
 80045d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d106      	bne.n	80045ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80d1 	beq.w	800478c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_UART_IRQHandler+0xae>
 80045f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004606:	f043 0201 	orr.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_UART_IRQHandler+0xd2>
 800461a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	f043 0202 	orr.w	r2, r3, #2
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <HAL_UART_IRQHandler+0xf6>
 800463e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d011      	beq.n	8004686 <HAL_UART_IRQHandler+0x126>
 8004662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800466e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d005      	beq.n	8004686 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467e:	f043 0208 	orr.w	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 81f2 	beq.w	8004a74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_UART_IRQHandler+0x14e>
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 fb77 	bl	8004d9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d103      	bne.n	80046da <HAL_UART_IRQHandler+0x17a>
 80046d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d04f      	beq.n	800477a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fa81 	bl	8004be2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d041      	beq.n	8004772 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3314      	adds	r3, #20
 80046f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004704:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800470c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3314      	adds	r3, #20
 8004716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800471a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800471e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1d9      	bne.n	80046ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d013      	beq.n	800476a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004746:	4a7e      	ldr	r2, [pc, #504]	@ (8004940 <HAL_UART_IRQHandler+0x3e0>)
 8004748:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474e:	4618      	mov	r0, r3
 8004750:	f7fd ff1a 	bl	8002588 <HAL_DMA_Abort_IT>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d016      	beq.n	8004788 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004764:	4610      	mov	r0, r2
 8004766:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	e00e      	b.n	8004788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f993 	bl	8004a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004770:	e00a      	b.n	8004788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f98f 	bl	8004a96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	e006      	b.n	8004788 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f98b 	bl	8004a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004786:	e175      	b.n	8004a74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	bf00      	nop
    return;
 800478a:	e173      	b.n	8004a74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004790:	2b01      	cmp	r3, #1
 8004792:	f040 814f 	bne.w	8004a34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8148 	beq.w	8004a34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8141 	beq.w	8004a34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f000 80b6 	beq.w	8004944 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8145 	beq.w	8004a78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047f6:	429a      	cmp	r2, r3
 80047f8:	f080 813e 	bcs.w	8004a78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004802:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b20      	cmp	r3, #32
 800480c:	f000 8088 	beq.w	8004920 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004826:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800482a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800482e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800483c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004840:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004848:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1d9      	bne.n	8004810 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800486c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004880:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004884:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004888:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004892:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e1      	bne.n	800485c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3314      	adds	r3, #20
 800489e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048bc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e3      	bne.n	8004898 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f0:	f023 0310 	bic.w	r3, r3, #16
 80048f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004902:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004904:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004908:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e3      	bne.n	80048de <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491a:	4618      	mov	r0, r3
 800491c:	f7fd fdf9 	bl	8002512 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800492e:	b29b      	uxth	r3, r3
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	b29b      	uxth	r3, r3
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f8b6 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800493c:	e09c      	b.n	8004a78 <HAL_UART_IRQHandler+0x518>
 800493e:	bf00      	nop
 8004940:	08004ca7 	.word	0x08004ca7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800494c:	b29b      	uxth	r3, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 808e 	beq.w	8004a7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8089 	beq.w	8004a7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800497a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004980:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	330c      	adds	r3, #12
 800498a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800498e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004990:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004994:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800499c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e3      	bne.n	800496a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3314      	adds	r3, #20
 80049a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	623b      	str	r3, [r7, #32]
   return(result);
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80049c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	330c      	adds	r3, #12
 80049ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a0c:	61fa      	str	r2, [r7, #28]
 8004a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	69b9      	ldr	r1, [r7, #24]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e3      	bne.n	80049e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f83b 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a32:	e023      	b.n	8004a7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_UART_IRQHandler+0x4f4>
 8004a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f93e 	bl	8004cce <UART_Transmit_IT>
    return;
 8004a52:	e014      	b.n	8004a7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00e      	beq.n	8004a7e <HAL_UART_IRQHandler+0x51e>
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f97d 	bl	8004d6c <UART_EndTransmit_IT>
    return;
 8004a72:	e004      	b.n	8004a7e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a74:	bf00      	nop
 8004a76:	e002      	b.n	8004a7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a78:	bf00      	nop
 8004a7a:	e000      	b.n	8004a7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a7c:	bf00      	nop
  }
}
 8004a7e:	37e8      	adds	r7, #232	@ 0xe8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	603b      	str	r3, [r7, #0]
 8004aca:	4613      	mov	r3, r2
 8004acc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ace:	e03b      	b.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad6:	d037      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad8:	f7fd fbe0 	bl	800229c <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	6a3a      	ldr	r2, [r7, #32]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae8:	6a3b      	ldr	r3, [r7, #32]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e03a      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d023      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b80      	cmp	r3, #128	@ 0x80
 8004b04:	d020      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b40      	cmp	r3, #64	@ 0x40
 8004b0a:	d01d      	beq.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d116      	bne.n	8004b48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f000 f856 	bl	8004be2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e00f      	b.n	8004b68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4013      	ands	r3, r2
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d0b4      	beq.n	8004ad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2222      	movs	r2, #34	@ 0x22
 8004b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0220 	orr.w	r2, r2, #32
 8004bd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bc80      	pop	{r7}
 8004be0:	4770      	bx	lr

08004be2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b095      	sub	sp, #84	@ 0x54
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	330c      	adds	r3, #12
 8004c08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e5      	bne.n	8004bea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3314      	adds	r3, #20
 8004c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	e853 3f00 	ldrex	r3, [r3]
 8004c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f023 0301 	bic.w	r3, r3, #1
 8004c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3314      	adds	r3, #20
 8004c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c46:	e841 2300 	strex	r3, r2, [r1]
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1e5      	bne.n	8004c1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d119      	bne.n	8004c8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 0310 	bic.w	r3, r3, #16
 8004c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c7a:	61ba      	str	r2, [r7, #24]
 8004c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	613b      	str	r3, [r7, #16]
   return(result);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c9c:	bf00      	nop
 8004c9e:	3754      	adds	r7, #84	@ 0x54
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fee8 	bl	8004a96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b21      	cmp	r3, #33	@ 0x21
 8004ce0:	d13e      	bne.n	8004d60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	d114      	bne.n	8004d16 <UART_Transmit_IT+0x48>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d110      	bne.n	8004d16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	1c9a      	adds	r2, r3, #2
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]
 8004d14:	e008      	b.n	8004d28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6211      	str	r1, [r2, #32]
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4619      	mov	r1, r3
 8004d36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10f      	bne.n	8004d5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr

08004d6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff fe79 	bl	8004a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08c      	sub	sp, #48	@ 0x30
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b22      	cmp	r3, #34	@ 0x22
 8004dae:	f040 80ae 	bne.w	8004f0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	d117      	bne.n	8004dec <UART_Receive_IT+0x50>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d113      	bne.n	8004dec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	1c9a      	adds	r2, r3, #2
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004dea:	e026      	b.n	8004e3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfe:	d007      	beq.n	8004e10 <UART_Receive_IT+0x74>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <UART_Receive_IT+0x82>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	e008      	b.n	8004e30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4619      	mov	r1, r3
 8004e48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d15d      	bne.n	8004f0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0220 	bic.w	r2, r2, #32
 8004e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0201 	bic.w	r2, r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d135      	bne.n	8004f00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f023 0310 	bic.w	r3, r3, #16
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eba:	623a      	str	r2, [r7, #32]
 8004ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	69f9      	ldr	r1, [r7, #28]
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e5      	bne.n	8004e9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b10      	cmp	r3, #16
 8004eda:	d10a      	bne.n	8004ef2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fdd5 	bl	8004aa8 <HAL_UARTEx_RxEventCallback>
 8004efe:	e002      	b.n	8004f06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fb fa81 	bl	8000408 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e002      	b.n	8004f10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e000      	b.n	8004f10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f0e:	2302      	movs	r3, #2
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3730      	adds	r7, #48	@ 0x30
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f52:	f023 030c 	bic.w	r3, r3, #12
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800502c <UART_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d103      	bne.n	8004f88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004f80:	f7fe fdca 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	e002      	b.n	8004f8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004f88:	f7fe fdb2 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8004f8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009a      	lsls	r2, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa4:	4a22      	ldr	r2, [pc, #136]	@ (8005030 <UART_SetConfig+0x118>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	0119      	lsls	r1, r3, #4
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009a      	lsls	r2, r3, #2
 8004fb8:	441a      	add	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8005030 <UART_SetConfig+0x118>)
 8004fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2064      	movs	r0, #100	@ 0x64
 8004fce:	fb00 f303 	mul.w	r3, r0, r3
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	@ 0x32
 8004fd8:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <UART_SetConfig+0x118>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe4:	4419      	add	r1, r3
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	009a      	lsls	r2, r3, #2
 8004ff0:	441a      	add	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <UART_SetConfig+0x118>)
 8004ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2064      	movs	r0, #100	@ 0x64
 8005006:	fb00 f303 	mul.w	r3, r0, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	3332      	adds	r3, #50	@ 0x32
 8005010:	4a07      	ldr	r2, [pc, #28]	@ (8005030 <UART_SetConfig+0x118>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	440a      	add	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40013800 	.word	0x40013800
 8005030:	51eb851f 	.word	0x51eb851f

08005034 <siprintf>:
 8005034:	b40e      	push	{r1, r2, r3}
 8005036:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800503a:	b500      	push	{lr}
 800503c:	b09c      	sub	sp, #112	@ 0x70
 800503e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005040:	9002      	str	r0, [sp, #8]
 8005042:	9006      	str	r0, [sp, #24]
 8005044:	9107      	str	r1, [sp, #28]
 8005046:	9104      	str	r1, [sp, #16]
 8005048:	4808      	ldr	r0, [pc, #32]	@ (800506c <siprintf+0x38>)
 800504a:	4909      	ldr	r1, [pc, #36]	@ (8005070 <siprintf+0x3c>)
 800504c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005050:	9105      	str	r1, [sp, #20]
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	a902      	add	r1, sp, #8
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	f000 f9a8 	bl	80053ac <_svfiprintf_r>
 800505c:	2200      	movs	r2, #0
 800505e:	9b02      	ldr	r3, [sp, #8]
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	b01c      	add	sp, #112	@ 0x70
 8005064:	f85d eb04 	ldr.w	lr, [sp], #4
 8005068:	b003      	add	sp, #12
 800506a:	4770      	bx	lr
 800506c:	20000044 	.word	0x20000044
 8005070:	ffff0208 	.word	0xffff0208

08005074 <memset>:
 8005074:	4603      	mov	r3, r0
 8005076:	4402      	add	r2, r0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <memset+0xa>
 800507c:	4770      	bx	lr
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <memset+0x4>

08005084 <strstr>:
 8005084:	780a      	ldrb	r2, [r1, #0]
 8005086:	b570      	push	{r4, r5, r6, lr}
 8005088:	b96a      	cbnz	r2, 80050a6 <strstr+0x22>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	429a      	cmp	r2, r3
 800508e:	d109      	bne.n	80050a4 <strstr+0x20>
 8005090:	460c      	mov	r4, r1
 8005092:	4605      	mov	r5, r0
 8005094:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f6      	beq.n	800508a <strstr+0x6>
 800509c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80050a0:	429e      	cmp	r6, r3
 80050a2:	d0f7      	beq.n	8005094 <strstr+0x10>
 80050a4:	3001      	adds	r0, #1
 80050a6:	7803      	ldrb	r3, [r0, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1ef      	bne.n	800508c <strstr+0x8>
 80050ac:	4618      	mov	r0, r3
 80050ae:	e7ec      	b.n	800508a <strstr+0x6>

080050b0 <__errno>:
 80050b0:	4b01      	ldr	r3, [pc, #4]	@ (80050b8 <__errno+0x8>)
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000044 	.word	0x20000044

080050bc <__libc_init_array>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	2600      	movs	r6, #0
 80050c0:	4d0c      	ldr	r5, [pc, #48]	@ (80050f4 <__libc_init_array+0x38>)
 80050c2:	4c0d      	ldr	r4, [pc, #52]	@ (80050f8 <__libc_init_array+0x3c>)
 80050c4:	1b64      	subs	r4, r4, r5
 80050c6:	10a4      	asrs	r4, r4, #2
 80050c8:	42a6      	cmp	r6, r4
 80050ca:	d109      	bne.n	80050e0 <__libc_init_array+0x24>
 80050cc:	f000 fc78 	bl	80059c0 <_init>
 80050d0:	2600      	movs	r6, #0
 80050d2:	4d0a      	ldr	r5, [pc, #40]	@ (80050fc <__libc_init_array+0x40>)
 80050d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005100 <__libc_init_array+0x44>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	42a6      	cmp	r6, r4
 80050dc:	d105      	bne.n	80050ea <__libc_init_array+0x2e>
 80050de:	bd70      	pop	{r4, r5, r6, pc}
 80050e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e4:	4798      	blx	r3
 80050e6:	3601      	adds	r6, #1
 80050e8:	e7ee      	b.n	80050c8 <__libc_init_array+0xc>
 80050ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ee:	4798      	blx	r3
 80050f0:	3601      	adds	r6, #1
 80050f2:	e7f2      	b.n	80050da <__libc_init_array+0x1e>
 80050f4:	0800661c 	.word	0x0800661c
 80050f8:	0800661c 	.word	0x0800661c
 80050fc:	0800661c 	.word	0x0800661c
 8005100:	08006620 	.word	0x08006620

08005104 <__retarget_lock_acquire_recursive>:
 8005104:	4770      	bx	lr

08005106 <__retarget_lock_release_recursive>:
 8005106:	4770      	bx	lr

08005108 <_free_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4605      	mov	r5, r0
 800510c:	2900      	cmp	r1, #0
 800510e:	d040      	beq.n	8005192 <_free_r+0x8a>
 8005110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005114:	1f0c      	subs	r4, r1, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	18e4      	addlt	r4, r4, r3
 800511c:	f000 f8de 	bl	80052dc <__malloc_lock>
 8005120:	4a1c      	ldr	r2, [pc, #112]	@ (8005194 <_free_r+0x8c>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	b933      	cbnz	r3, 8005134 <_free_r+0x2c>
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	6014      	str	r4, [r2, #0]
 800512a:	4628      	mov	r0, r5
 800512c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005130:	f000 b8da 	b.w	80052e8 <__malloc_unlock>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d908      	bls.n	800514a <_free_r+0x42>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	1821      	adds	r1, r4, r0
 800513c:	428b      	cmp	r3, r1
 800513e:	bf01      	itttt	eq
 8005140:	6819      	ldreq	r1, [r3, #0]
 8005142:	685b      	ldreq	r3, [r3, #4]
 8005144:	1809      	addeq	r1, r1, r0
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	e7ed      	b.n	8005126 <_free_r+0x1e>
 800514a:	461a      	mov	r2, r3
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b10b      	cbz	r3, 8005154 <_free_r+0x4c>
 8005150:	42a3      	cmp	r3, r4
 8005152:	d9fa      	bls.n	800514a <_free_r+0x42>
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	1850      	adds	r0, r2, r1
 8005158:	42a0      	cmp	r0, r4
 800515a:	d10b      	bne.n	8005174 <_free_r+0x6c>
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	4401      	add	r1, r0
 8005160:	1850      	adds	r0, r2, r1
 8005162:	4283      	cmp	r3, r0
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	d1e0      	bne.n	800512a <_free_r+0x22>
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4408      	add	r0, r1
 800516e:	6010      	str	r0, [r2, #0]
 8005170:	6053      	str	r3, [r2, #4]
 8005172:	e7da      	b.n	800512a <_free_r+0x22>
 8005174:	d902      	bls.n	800517c <_free_r+0x74>
 8005176:	230c      	movs	r3, #12
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	e7d6      	b.n	800512a <_free_r+0x22>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	1821      	adds	r1, r4, r0
 8005180:	428b      	cmp	r3, r1
 8005182:	bf01      	itttt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	1809      	addeq	r1, r1, r0
 800518a:	6021      	streq	r1, [r4, #0]
 800518c:	6063      	str	r3, [r4, #4]
 800518e:	6054      	str	r4, [r2, #4]
 8005190:	e7cb      	b.n	800512a <_free_r+0x22>
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000870 	.word	0x20000870

08005198 <sbrk_aligned>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4e0f      	ldr	r6, [pc, #60]	@ (80051d8 <sbrk_aligned+0x40>)
 800519c:	460c      	mov	r4, r1
 800519e:	6831      	ldr	r1, [r6, #0]
 80051a0:	4605      	mov	r5, r0
 80051a2:	b911      	cbnz	r1, 80051aa <sbrk_aligned+0x12>
 80051a4:	f000 fbaa 	bl	80058fc <_sbrk_r>
 80051a8:	6030      	str	r0, [r6, #0]
 80051aa:	4621      	mov	r1, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 fba5 	bl	80058fc <_sbrk_r>
 80051b2:	1c43      	adds	r3, r0, #1
 80051b4:	d103      	bne.n	80051be <sbrk_aligned+0x26>
 80051b6:	f04f 34ff 	mov.w	r4, #4294967295
 80051ba:	4620      	mov	r0, r4
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	1cc4      	adds	r4, r0, #3
 80051c0:	f024 0403 	bic.w	r4, r4, #3
 80051c4:	42a0      	cmp	r0, r4
 80051c6:	d0f8      	beq.n	80051ba <sbrk_aligned+0x22>
 80051c8:	1a21      	subs	r1, r4, r0
 80051ca:	4628      	mov	r0, r5
 80051cc:	f000 fb96 	bl	80058fc <_sbrk_r>
 80051d0:	3001      	adds	r0, #1
 80051d2:	d1f2      	bne.n	80051ba <sbrk_aligned+0x22>
 80051d4:	e7ef      	b.n	80051b6 <sbrk_aligned+0x1e>
 80051d6:	bf00      	nop
 80051d8:	2000086c 	.word	0x2000086c

080051dc <_malloc_r>:
 80051dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e0:	1ccd      	adds	r5, r1, #3
 80051e2:	f025 0503 	bic.w	r5, r5, #3
 80051e6:	3508      	adds	r5, #8
 80051e8:	2d0c      	cmp	r5, #12
 80051ea:	bf38      	it	cc
 80051ec:	250c      	movcc	r5, #12
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	4606      	mov	r6, r0
 80051f2:	db01      	blt.n	80051f8 <_malloc_r+0x1c>
 80051f4:	42a9      	cmp	r1, r5
 80051f6:	d904      	bls.n	8005202 <_malloc_r+0x26>
 80051f8:	230c      	movs	r3, #12
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	2000      	movs	r0, #0
 80051fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052d8 <_malloc_r+0xfc>
 8005206:	f000 f869 	bl	80052dc <__malloc_lock>
 800520a:	f8d8 3000 	ldr.w	r3, [r8]
 800520e:	461c      	mov	r4, r3
 8005210:	bb44      	cbnz	r4, 8005264 <_malloc_r+0x88>
 8005212:	4629      	mov	r1, r5
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff ffbf 	bl	8005198 <sbrk_aligned>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	4604      	mov	r4, r0
 800521e:	d158      	bne.n	80052d2 <_malloc_r+0xf6>
 8005220:	f8d8 4000 	ldr.w	r4, [r8]
 8005224:	4627      	mov	r7, r4
 8005226:	2f00      	cmp	r7, #0
 8005228:	d143      	bne.n	80052b2 <_malloc_r+0xd6>
 800522a:	2c00      	cmp	r4, #0
 800522c:	d04b      	beq.n	80052c6 <_malloc_r+0xea>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	4639      	mov	r1, r7
 8005232:	4630      	mov	r0, r6
 8005234:	eb04 0903 	add.w	r9, r4, r3
 8005238:	f000 fb60 	bl	80058fc <_sbrk_r>
 800523c:	4581      	cmp	r9, r0
 800523e:	d142      	bne.n	80052c6 <_malloc_r+0xea>
 8005240:	6821      	ldr	r1, [r4, #0]
 8005242:	4630      	mov	r0, r6
 8005244:	1a6d      	subs	r5, r5, r1
 8005246:	4629      	mov	r1, r5
 8005248:	f7ff ffa6 	bl	8005198 <sbrk_aligned>
 800524c:	3001      	adds	r0, #1
 800524e:	d03a      	beq.n	80052c6 <_malloc_r+0xea>
 8005250:	6823      	ldr	r3, [r4, #0]
 8005252:	442b      	add	r3, r5
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	f8d8 3000 	ldr.w	r3, [r8]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	bb62      	cbnz	r2, 80052b8 <_malloc_r+0xdc>
 800525e:	f8c8 7000 	str.w	r7, [r8]
 8005262:	e00f      	b.n	8005284 <_malloc_r+0xa8>
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	1b52      	subs	r2, r2, r5
 8005268:	d420      	bmi.n	80052ac <_malloc_r+0xd0>
 800526a:	2a0b      	cmp	r2, #11
 800526c:	d917      	bls.n	800529e <_malloc_r+0xc2>
 800526e:	1961      	adds	r1, r4, r5
 8005270:	42a3      	cmp	r3, r4
 8005272:	6025      	str	r5, [r4, #0]
 8005274:	bf18      	it	ne
 8005276:	6059      	strne	r1, [r3, #4]
 8005278:	6863      	ldr	r3, [r4, #4]
 800527a:	bf08      	it	eq
 800527c:	f8c8 1000 	streq.w	r1, [r8]
 8005280:	5162      	str	r2, [r4, r5]
 8005282:	604b      	str	r3, [r1, #4]
 8005284:	4630      	mov	r0, r6
 8005286:	f000 f82f 	bl	80052e8 <__malloc_unlock>
 800528a:	f104 000b 	add.w	r0, r4, #11
 800528e:	1d23      	adds	r3, r4, #4
 8005290:	f020 0007 	bic.w	r0, r0, #7
 8005294:	1ac2      	subs	r2, r0, r3
 8005296:	bf1c      	itt	ne
 8005298:	1a1b      	subne	r3, r3, r0
 800529a:	50a3      	strne	r3, [r4, r2]
 800529c:	e7af      	b.n	80051fe <_malloc_r+0x22>
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	42a3      	cmp	r3, r4
 80052a2:	bf0c      	ite	eq
 80052a4:	f8c8 2000 	streq.w	r2, [r8]
 80052a8:	605a      	strne	r2, [r3, #4]
 80052aa:	e7eb      	b.n	8005284 <_malloc_r+0xa8>
 80052ac:	4623      	mov	r3, r4
 80052ae:	6864      	ldr	r4, [r4, #4]
 80052b0:	e7ae      	b.n	8005210 <_malloc_r+0x34>
 80052b2:	463c      	mov	r4, r7
 80052b4:	687f      	ldr	r7, [r7, #4]
 80052b6:	e7b6      	b.n	8005226 <_malloc_r+0x4a>
 80052b8:	461a      	mov	r2, r3
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	42a3      	cmp	r3, r4
 80052be:	d1fb      	bne.n	80052b8 <_malloc_r+0xdc>
 80052c0:	2300      	movs	r3, #0
 80052c2:	6053      	str	r3, [r2, #4]
 80052c4:	e7de      	b.n	8005284 <_malloc_r+0xa8>
 80052c6:	230c      	movs	r3, #12
 80052c8:	4630      	mov	r0, r6
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	f000 f80c 	bl	80052e8 <__malloc_unlock>
 80052d0:	e794      	b.n	80051fc <_malloc_r+0x20>
 80052d2:	6005      	str	r5, [r0, #0]
 80052d4:	e7d6      	b.n	8005284 <_malloc_r+0xa8>
 80052d6:	bf00      	nop
 80052d8:	20000870 	.word	0x20000870

080052dc <__malloc_lock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	@ (80052e4 <__malloc_lock+0x8>)
 80052de:	f7ff bf11 	b.w	8005104 <__retarget_lock_acquire_recursive>
 80052e2:	bf00      	nop
 80052e4:	20000868 	.word	0x20000868

080052e8 <__malloc_unlock>:
 80052e8:	4801      	ldr	r0, [pc, #4]	@ (80052f0 <__malloc_unlock+0x8>)
 80052ea:	f7ff bf0c 	b.w	8005106 <__retarget_lock_release_recursive>
 80052ee:	bf00      	nop
 80052f0:	20000868 	.word	0x20000868

080052f4 <__ssputs_r>:
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	461f      	mov	r7, r3
 80052fa:	688e      	ldr	r6, [r1, #8]
 80052fc:	4682      	mov	sl, r0
 80052fe:	42be      	cmp	r6, r7
 8005300:	460c      	mov	r4, r1
 8005302:	4690      	mov	r8, r2
 8005304:	680b      	ldr	r3, [r1, #0]
 8005306:	d82d      	bhi.n	8005364 <__ssputs_r+0x70>
 8005308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800530c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005310:	d026      	beq.n	8005360 <__ssputs_r+0x6c>
 8005312:	6965      	ldr	r5, [r4, #20]
 8005314:	6909      	ldr	r1, [r1, #16]
 8005316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800531a:	eba3 0901 	sub.w	r9, r3, r1
 800531e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005322:	1c7b      	adds	r3, r7, #1
 8005324:	444b      	add	r3, r9
 8005326:	106d      	asrs	r5, r5, #1
 8005328:	429d      	cmp	r5, r3
 800532a:	bf38      	it	cc
 800532c:	461d      	movcc	r5, r3
 800532e:	0553      	lsls	r3, r2, #21
 8005330:	d527      	bpl.n	8005382 <__ssputs_r+0x8e>
 8005332:	4629      	mov	r1, r5
 8005334:	f7ff ff52 	bl	80051dc <_malloc_r>
 8005338:	4606      	mov	r6, r0
 800533a:	b360      	cbz	r0, 8005396 <__ssputs_r+0xa2>
 800533c:	464a      	mov	r2, r9
 800533e:	6921      	ldr	r1, [r4, #16]
 8005340:	f000 fafa 	bl	8005938 <memcpy>
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800534a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534e:	81a3      	strh	r3, [r4, #12]
 8005350:	6126      	str	r6, [r4, #16]
 8005352:	444e      	add	r6, r9
 8005354:	6026      	str	r6, [r4, #0]
 8005356:	463e      	mov	r6, r7
 8005358:	6165      	str	r5, [r4, #20]
 800535a:	eba5 0509 	sub.w	r5, r5, r9
 800535e:	60a5      	str	r5, [r4, #8]
 8005360:	42be      	cmp	r6, r7
 8005362:	d900      	bls.n	8005366 <__ssputs_r+0x72>
 8005364:	463e      	mov	r6, r7
 8005366:	4632      	mov	r2, r6
 8005368:	4641      	mov	r1, r8
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	f000 faac 	bl	80058c8 <memmove>
 8005370:	2000      	movs	r0, #0
 8005372:	68a3      	ldr	r3, [r4, #8]
 8005374:	1b9b      	subs	r3, r3, r6
 8005376:	60a3      	str	r3, [r4, #8]
 8005378:	6823      	ldr	r3, [r4, #0]
 800537a:	4433      	add	r3, r6
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005382:	462a      	mov	r2, r5
 8005384:	f000 fae6 	bl	8005954 <_realloc_r>
 8005388:	4606      	mov	r6, r0
 800538a:	2800      	cmp	r0, #0
 800538c:	d1e0      	bne.n	8005350 <__ssputs_r+0x5c>
 800538e:	4650      	mov	r0, sl
 8005390:	6921      	ldr	r1, [r4, #16]
 8005392:	f7ff feb9 	bl	8005108 <_free_r>
 8005396:	230c      	movs	r3, #12
 8005398:	f8ca 3000 	str.w	r3, [sl]
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f04f 30ff 	mov.w	r0, #4294967295
 80053a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	e7e9      	b.n	800537e <__ssputs_r+0x8a>
	...

080053ac <_svfiprintf_r>:
 80053ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b0:	4698      	mov	r8, r3
 80053b2:	898b      	ldrh	r3, [r1, #12]
 80053b4:	4607      	mov	r7, r0
 80053b6:	061b      	lsls	r3, r3, #24
 80053b8:	460d      	mov	r5, r1
 80053ba:	4614      	mov	r4, r2
 80053bc:	b09d      	sub	sp, #116	@ 0x74
 80053be:	d510      	bpl.n	80053e2 <_svfiprintf_r+0x36>
 80053c0:	690b      	ldr	r3, [r1, #16]
 80053c2:	b973      	cbnz	r3, 80053e2 <_svfiprintf_r+0x36>
 80053c4:	2140      	movs	r1, #64	@ 0x40
 80053c6:	f7ff ff09 	bl	80051dc <_malloc_r>
 80053ca:	6028      	str	r0, [r5, #0]
 80053cc:	6128      	str	r0, [r5, #16]
 80053ce:	b930      	cbnz	r0, 80053de <_svfiprintf_r+0x32>
 80053d0:	230c      	movs	r3, #12
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	f04f 30ff 	mov.w	r0, #4294967295
 80053d8:	b01d      	add	sp, #116	@ 0x74
 80053da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053de:	2340      	movs	r3, #64	@ 0x40
 80053e0:	616b      	str	r3, [r5, #20]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053e6:	2320      	movs	r3, #32
 80053e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053ec:	2330      	movs	r3, #48	@ 0x30
 80053ee:	f04f 0901 	mov.w	r9, #1
 80053f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80053f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005590 <_svfiprintf_r+0x1e4>
 80053fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053fe:	4623      	mov	r3, r4
 8005400:	469a      	mov	sl, r3
 8005402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005406:	b10a      	cbz	r2, 800540c <_svfiprintf_r+0x60>
 8005408:	2a25      	cmp	r2, #37	@ 0x25
 800540a:	d1f9      	bne.n	8005400 <_svfiprintf_r+0x54>
 800540c:	ebba 0b04 	subs.w	fp, sl, r4
 8005410:	d00b      	beq.n	800542a <_svfiprintf_r+0x7e>
 8005412:	465b      	mov	r3, fp
 8005414:	4622      	mov	r2, r4
 8005416:	4629      	mov	r1, r5
 8005418:	4638      	mov	r0, r7
 800541a:	f7ff ff6b 	bl	80052f4 <__ssputs_r>
 800541e:	3001      	adds	r0, #1
 8005420:	f000 80a7 	beq.w	8005572 <_svfiprintf_r+0x1c6>
 8005424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005426:	445a      	add	r2, fp
 8005428:	9209      	str	r2, [sp, #36]	@ 0x24
 800542a:	f89a 3000 	ldrb.w	r3, [sl]
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 809f 	beq.w	8005572 <_svfiprintf_r+0x1c6>
 8005434:	2300      	movs	r3, #0
 8005436:	f04f 32ff 	mov.w	r2, #4294967295
 800543a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800543e:	f10a 0a01 	add.w	sl, sl, #1
 8005442:	9304      	str	r3, [sp, #16]
 8005444:	9307      	str	r3, [sp, #28]
 8005446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800544a:	931a      	str	r3, [sp, #104]	@ 0x68
 800544c:	4654      	mov	r4, sl
 800544e:	2205      	movs	r2, #5
 8005450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005454:	484e      	ldr	r0, [pc, #312]	@ (8005590 <_svfiprintf_r+0x1e4>)
 8005456:	f000 fa61 	bl	800591c <memchr>
 800545a:	9a04      	ldr	r2, [sp, #16]
 800545c:	b9d8      	cbnz	r0, 8005496 <_svfiprintf_r+0xea>
 800545e:	06d0      	lsls	r0, r2, #27
 8005460:	bf44      	itt	mi
 8005462:	2320      	movmi	r3, #32
 8005464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005468:	0711      	lsls	r1, r2, #28
 800546a:	bf44      	itt	mi
 800546c:	232b      	movmi	r3, #43	@ 0x2b
 800546e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005472:	f89a 3000 	ldrb.w	r3, [sl]
 8005476:	2b2a      	cmp	r3, #42	@ 0x2a
 8005478:	d015      	beq.n	80054a6 <_svfiprintf_r+0xfa>
 800547a:	4654      	mov	r4, sl
 800547c:	2000      	movs	r0, #0
 800547e:	f04f 0c0a 	mov.w	ip, #10
 8005482:	9a07      	ldr	r2, [sp, #28]
 8005484:	4621      	mov	r1, r4
 8005486:	f811 3b01 	ldrb.w	r3, [r1], #1
 800548a:	3b30      	subs	r3, #48	@ 0x30
 800548c:	2b09      	cmp	r3, #9
 800548e:	d94b      	bls.n	8005528 <_svfiprintf_r+0x17c>
 8005490:	b1b0      	cbz	r0, 80054c0 <_svfiprintf_r+0x114>
 8005492:	9207      	str	r2, [sp, #28]
 8005494:	e014      	b.n	80054c0 <_svfiprintf_r+0x114>
 8005496:	eba0 0308 	sub.w	r3, r0, r8
 800549a:	fa09 f303 	lsl.w	r3, r9, r3
 800549e:	4313      	orrs	r3, r2
 80054a0:	46a2      	mov	sl, r4
 80054a2:	9304      	str	r3, [sp, #16]
 80054a4:	e7d2      	b.n	800544c <_svfiprintf_r+0xa0>
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	1d19      	adds	r1, r3, #4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	9103      	str	r1, [sp, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bfbb      	ittet	lt
 80054b2:	425b      	neglt	r3, r3
 80054b4:	f042 0202 	orrlt.w	r2, r2, #2
 80054b8:	9307      	strge	r3, [sp, #28]
 80054ba:	9307      	strlt	r3, [sp, #28]
 80054bc:	bfb8      	it	lt
 80054be:	9204      	strlt	r2, [sp, #16]
 80054c0:	7823      	ldrb	r3, [r4, #0]
 80054c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80054c4:	d10a      	bne.n	80054dc <_svfiprintf_r+0x130>
 80054c6:	7863      	ldrb	r3, [r4, #1]
 80054c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ca:	d132      	bne.n	8005532 <_svfiprintf_r+0x186>
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	3402      	adds	r4, #2
 80054d0:	1d1a      	adds	r2, r3, #4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	9203      	str	r2, [sp, #12]
 80054d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054da:	9305      	str	r3, [sp, #20]
 80054dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005594 <_svfiprintf_r+0x1e8>
 80054e0:	2203      	movs	r2, #3
 80054e2:	4650      	mov	r0, sl
 80054e4:	7821      	ldrb	r1, [r4, #0]
 80054e6:	f000 fa19 	bl	800591c <memchr>
 80054ea:	b138      	cbz	r0, 80054fc <_svfiprintf_r+0x150>
 80054ec:	2240      	movs	r2, #64	@ 0x40
 80054ee:	9b04      	ldr	r3, [sp, #16]
 80054f0:	eba0 000a 	sub.w	r0, r0, sl
 80054f4:	4082      	lsls	r2, r0
 80054f6:	4313      	orrs	r3, r2
 80054f8:	3401      	adds	r4, #1
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	2206      	movs	r2, #6
 8005502:	4825      	ldr	r0, [pc, #148]	@ (8005598 <_svfiprintf_r+0x1ec>)
 8005504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005508:	f000 fa08 	bl	800591c <memchr>
 800550c:	2800      	cmp	r0, #0
 800550e:	d036      	beq.n	800557e <_svfiprintf_r+0x1d2>
 8005510:	4b22      	ldr	r3, [pc, #136]	@ (800559c <_svfiprintf_r+0x1f0>)
 8005512:	bb1b      	cbnz	r3, 800555c <_svfiprintf_r+0x1b0>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	3307      	adds	r3, #7
 8005518:	f023 0307 	bic.w	r3, r3, #7
 800551c:	3308      	adds	r3, #8
 800551e:	9303      	str	r3, [sp, #12]
 8005520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005522:	4433      	add	r3, r6
 8005524:	9309      	str	r3, [sp, #36]	@ 0x24
 8005526:	e76a      	b.n	80053fe <_svfiprintf_r+0x52>
 8005528:	460c      	mov	r4, r1
 800552a:	2001      	movs	r0, #1
 800552c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005530:	e7a8      	b.n	8005484 <_svfiprintf_r+0xd8>
 8005532:	2300      	movs	r3, #0
 8005534:	f04f 0c0a 	mov.w	ip, #10
 8005538:	4619      	mov	r1, r3
 800553a:	3401      	adds	r4, #1
 800553c:	9305      	str	r3, [sp, #20]
 800553e:	4620      	mov	r0, r4
 8005540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005544:	3a30      	subs	r2, #48	@ 0x30
 8005546:	2a09      	cmp	r2, #9
 8005548:	d903      	bls.n	8005552 <_svfiprintf_r+0x1a6>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0c6      	beq.n	80054dc <_svfiprintf_r+0x130>
 800554e:	9105      	str	r1, [sp, #20]
 8005550:	e7c4      	b.n	80054dc <_svfiprintf_r+0x130>
 8005552:	4604      	mov	r4, r0
 8005554:	2301      	movs	r3, #1
 8005556:	fb0c 2101 	mla	r1, ip, r1, r2
 800555a:	e7f0      	b.n	800553e <_svfiprintf_r+0x192>
 800555c:	ab03      	add	r3, sp, #12
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	462a      	mov	r2, r5
 8005562:	4638      	mov	r0, r7
 8005564:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <_svfiprintf_r+0x1f4>)
 8005566:	a904      	add	r1, sp, #16
 8005568:	f3af 8000 	nop.w
 800556c:	1c42      	adds	r2, r0, #1
 800556e:	4606      	mov	r6, r0
 8005570:	d1d6      	bne.n	8005520 <_svfiprintf_r+0x174>
 8005572:	89ab      	ldrh	r3, [r5, #12]
 8005574:	065b      	lsls	r3, r3, #25
 8005576:	f53f af2d 	bmi.w	80053d4 <_svfiprintf_r+0x28>
 800557a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800557c:	e72c      	b.n	80053d8 <_svfiprintf_r+0x2c>
 800557e:	ab03      	add	r3, sp, #12
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	462a      	mov	r2, r5
 8005584:	4638      	mov	r0, r7
 8005586:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <_svfiprintf_r+0x1f4>)
 8005588:	a904      	add	r1, sp, #16
 800558a:	f000 f87d 	bl	8005688 <_printf_i>
 800558e:	e7ed      	b.n	800556c <_svfiprintf_r+0x1c0>
 8005590:	080065de 	.word	0x080065de
 8005594:	080065e4 	.word	0x080065e4
 8005598:	080065e8 	.word	0x080065e8
 800559c:	00000000 	.word	0x00000000
 80055a0:	080052f5 	.word	0x080052f5

080055a4 <_printf_common>:
 80055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	4616      	mov	r6, r2
 80055aa:	4698      	mov	r8, r3
 80055ac:	688a      	ldr	r2, [r1, #8]
 80055ae:	690b      	ldr	r3, [r1, #16]
 80055b0:	4607      	mov	r7, r0
 80055b2:	4293      	cmp	r3, r2
 80055b4:	bfb8      	it	lt
 80055b6:	4613      	movlt	r3, r2
 80055b8:	6033      	str	r3, [r6, #0]
 80055ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055be:	460c      	mov	r4, r1
 80055c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055c4:	b10a      	cbz	r2, 80055ca <_printf_common+0x26>
 80055c6:	3301      	adds	r3, #1
 80055c8:	6033      	str	r3, [r6, #0]
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	0699      	lsls	r1, r3, #26
 80055ce:	bf42      	ittt	mi
 80055d0:	6833      	ldrmi	r3, [r6, #0]
 80055d2:	3302      	addmi	r3, #2
 80055d4:	6033      	strmi	r3, [r6, #0]
 80055d6:	6825      	ldr	r5, [r4, #0]
 80055d8:	f015 0506 	ands.w	r5, r5, #6
 80055dc:	d106      	bne.n	80055ec <_printf_common+0x48>
 80055de:	f104 0a19 	add.w	sl, r4, #25
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	6832      	ldr	r2, [r6, #0]
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dc2b      	bgt.n	8005644 <_printf_common+0xa0>
 80055ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	3b00      	subs	r3, #0
 80055f4:	bf18      	it	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	0692      	lsls	r2, r2, #26
 80055fa:	d430      	bmi.n	800565e <_printf_common+0xba>
 80055fc:	4641      	mov	r1, r8
 80055fe:	4638      	mov	r0, r7
 8005600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005604:	47c8      	blx	r9
 8005606:	3001      	adds	r0, #1
 8005608:	d023      	beq.n	8005652 <_printf_common+0xae>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	6922      	ldr	r2, [r4, #16]
 800560e:	f003 0306 	and.w	r3, r3, #6
 8005612:	2b04      	cmp	r3, #4
 8005614:	bf14      	ite	ne
 8005616:	2500      	movne	r5, #0
 8005618:	6833      	ldreq	r3, [r6, #0]
 800561a:	f04f 0600 	mov.w	r6, #0
 800561e:	bf08      	it	eq
 8005620:	68e5      	ldreq	r5, [r4, #12]
 8005622:	f104 041a 	add.w	r4, r4, #26
 8005626:	bf08      	it	eq
 8005628:	1aed      	subeq	r5, r5, r3
 800562a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800562e:	bf08      	it	eq
 8005630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005634:	4293      	cmp	r3, r2
 8005636:	bfc4      	itt	gt
 8005638:	1a9b      	subgt	r3, r3, r2
 800563a:	18ed      	addgt	r5, r5, r3
 800563c:	42b5      	cmp	r5, r6
 800563e:	d11a      	bne.n	8005676 <_printf_common+0xd2>
 8005640:	2000      	movs	r0, #0
 8005642:	e008      	b.n	8005656 <_printf_common+0xb2>
 8005644:	2301      	movs	r3, #1
 8005646:	4652      	mov	r2, sl
 8005648:	4641      	mov	r1, r8
 800564a:	4638      	mov	r0, r7
 800564c:	47c8      	blx	r9
 800564e:	3001      	adds	r0, #1
 8005650:	d103      	bne.n	800565a <_printf_common+0xb6>
 8005652:	f04f 30ff 	mov.w	r0, #4294967295
 8005656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800565a:	3501      	adds	r5, #1
 800565c:	e7c1      	b.n	80055e2 <_printf_common+0x3e>
 800565e:	2030      	movs	r0, #48	@ 0x30
 8005660:	18e1      	adds	r1, r4, r3
 8005662:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800566c:	4422      	add	r2, r4
 800566e:	3302      	adds	r3, #2
 8005670:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005674:	e7c2      	b.n	80055fc <_printf_common+0x58>
 8005676:	2301      	movs	r3, #1
 8005678:	4622      	mov	r2, r4
 800567a:	4641      	mov	r1, r8
 800567c:	4638      	mov	r0, r7
 800567e:	47c8      	blx	r9
 8005680:	3001      	adds	r0, #1
 8005682:	d0e6      	beq.n	8005652 <_printf_common+0xae>
 8005684:	3601      	adds	r6, #1
 8005686:	e7d9      	b.n	800563c <_printf_common+0x98>

08005688 <_printf_i>:
 8005688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	7e0f      	ldrb	r7, [r1, #24]
 800568e:	4691      	mov	r9, r2
 8005690:	2f78      	cmp	r7, #120	@ 0x78
 8005692:	4680      	mov	r8, r0
 8005694:	460c      	mov	r4, r1
 8005696:	469a      	mov	sl, r3
 8005698:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800569a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800569e:	d807      	bhi.n	80056b0 <_printf_i+0x28>
 80056a0:	2f62      	cmp	r7, #98	@ 0x62
 80056a2:	d80a      	bhi.n	80056ba <_printf_i+0x32>
 80056a4:	2f00      	cmp	r7, #0
 80056a6:	f000 80d3 	beq.w	8005850 <_printf_i+0x1c8>
 80056aa:	2f58      	cmp	r7, #88	@ 0x58
 80056ac:	f000 80ba 	beq.w	8005824 <_printf_i+0x19c>
 80056b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056b8:	e03a      	b.n	8005730 <_printf_i+0xa8>
 80056ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056be:	2b15      	cmp	r3, #21
 80056c0:	d8f6      	bhi.n	80056b0 <_printf_i+0x28>
 80056c2:	a101      	add	r1, pc, #4	@ (adr r1, 80056c8 <_printf_i+0x40>)
 80056c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c8:	08005721 	.word	0x08005721
 80056cc:	08005735 	.word	0x08005735
 80056d0:	080056b1 	.word	0x080056b1
 80056d4:	080056b1 	.word	0x080056b1
 80056d8:	080056b1 	.word	0x080056b1
 80056dc:	080056b1 	.word	0x080056b1
 80056e0:	08005735 	.word	0x08005735
 80056e4:	080056b1 	.word	0x080056b1
 80056e8:	080056b1 	.word	0x080056b1
 80056ec:	080056b1 	.word	0x080056b1
 80056f0:	080056b1 	.word	0x080056b1
 80056f4:	08005837 	.word	0x08005837
 80056f8:	0800575f 	.word	0x0800575f
 80056fc:	080057f1 	.word	0x080057f1
 8005700:	080056b1 	.word	0x080056b1
 8005704:	080056b1 	.word	0x080056b1
 8005708:	08005859 	.word	0x08005859
 800570c:	080056b1 	.word	0x080056b1
 8005710:	0800575f 	.word	0x0800575f
 8005714:	080056b1 	.word	0x080056b1
 8005718:	080056b1 	.word	0x080056b1
 800571c:	080057f9 	.word	0x080057f9
 8005720:	6833      	ldr	r3, [r6, #0]
 8005722:	1d1a      	adds	r2, r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6032      	str	r2, [r6, #0]
 8005728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800572c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005730:	2301      	movs	r3, #1
 8005732:	e09e      	b.n	8005872 <_printf_i+0x1ea>
 8005734:	6833      	ldr	r3, [r6, #0]
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	1d19      	adds	r1, r3, #4
 800573a:	6031      	str	r1, [r6, #0]
 800573c:	0606      	lsls	r6, r0, #24
 800573e:	d501      	bpl.n	8005744 <_printf_i+0xbc>
 8005740:	681d      	ldr	r5, [r3, #0]
 8005742:	e003      	b.n	800574c <_printf_i+0xc4>
 8005744:	0645      	lsls	r5, r0, #25
 8005746:	d5fb      	bpl.n	8005740 <_printf_i+0xb8>
 8005748:	f9b3 5000 	ldrsh.w	r5, [r3]
 800574c:	2d00      	cmp	r5, #0
 800574e:	da03      	bge.n	8005758 <_printf_i+0xd0>
 8005750:	232d      	movs	r3, #45	@ 0x2d
 8005752:	426d      	negs	r5, r5
 8005754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005758:	230a      	movs	r3, #10
 800575a:	4859      	ldr	r0, [pc, #356]	@ (80058c0 <_printf_i+0x238>)
 800575c:	e011      	b.n	8005782 <_printf_i+0xfa>
 800575e:	6821      	ldr	r1, [r4, #0]
 8005760:	6833      	ldr	r3, [r6, #0]
 8005762:	0608      	lsls	r0, r1, #24
 8005764:	f853 5b04 	ldr.w	r5, [r3], #4
 8005768:	d402      	bmi.n	8005770 <_printf_i+0xe8>
 800576a:	0649      	lsls	r1, r1, #25
 800576c:	bf48      	it	mi
 800576e:	b2ad      	uxthmi	r5, r5
 8005770:	2f6f      	cmp	r7, #111	@ 0x6f
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	bf14      	ite	ne
 8005776:	230a      	movne	r3, #10
 8005778:	2308      	moveq	r3, #8
 800577a:	4851      	ldr	r0, [pc, #324]	@ (80058c0 <_printf_i+0x238>)
 800577c:	2100      	movs	r1, #0
 800577e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005782:	6866      	ldr	r6, [r4, #4]
 8005784:	2e00      	cmp	r6, #0
 8005786:	bfa8      	it	ge
 8005788:	6821      	ldrge	r1, [r4, #0]
 800578a:	60a6      	str	r6, [r4, #8]
 800578c:	bfa4      	itt	ge
 800578e:	f021 0104 	bicge.w	r1, r1, #4
 8005792:	6021      	strge	r1, [r4, #0]
 8005794:	b90d      	cbnz	r5, 800579a <_printf_i+0x112>
 8005796:	2e00      	cmp	r6, #0
 8005798:	d04b      	beq.n	8005832 <_printf_i+0x1aa>
 800579a:	4616      	mov	r6, r2
 800579c:	fbb5 f1f3 	udiv	r1, r5, r3
 80057a0:	fb03 5711 	mls	r7, r3, r1, r5
 80057a4:	5dc7      	ldrb	r7, [r0, r7]
 80057a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057aa:	462f      	mov	r7, r5
 80057ac:	42bb      	cmp	r3, r7
 80057ae:	460d      	mov	r5, r1
 80057b0:	d9f4      	bls.n	800579c <_printf_i+0x114>
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d10b      	bne.n	80057ce <_printf_i+0x146>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	07df      	lsls	r7, r3, #31
 80057ba:	d508      	bpl.n	80057ce <_printf_i+0x146>
 80057bc:	6923      	ldr	r3, [r4, #16]
 80057be:	6861      	ldr	r1, [r4, #4]
 80057c0:	4299      	cmp	r1, r3
 80057c2:	bfde      	ittt	le
 80057c4:	2330      	movle	r3, #48	@ 0x30
 80057c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057ce:	1b92      	subs	r2, r2, r6
 80057d0:	6122      	str	r2, [r4, #16]
 80057d2:	464b      	mov	r3, r9
 80057d4:	4621      	mov	r1, r4
 80057d6:	4640      	mov	r0, r8
 80057d8:	f8cd a000 	str.w	sl, [sp]
 80057dc:	aa03      	add	r2, sp, #12
 80057de:	f7ff fee1 	bl	80055a4 <_printf_common>
 80057e2:	3001      	adds	r0, #1
 80057e4:	d14a      	bne.n	800587c <_printf_i+0x1f4>
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ea:	b004      	add	sp, #16
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	f043 0320 	orr.w	r3, r3, #32
 80057f6:	6023      	str	r3, [r4, #0]
 80057f8:	2778      	movs	r7, #120	@ 0x78
 80057fa:	4832      	ldr	r0, [pc, #200]	@ (80058c4 <_printf_i+0x23c>)
 80057fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	6831      	ldr	r1, [r6, #0]
 8005804:	061f      	lsls	r7, r3, #24
 8005806:	f851 5b04 	ldr.w	r5, [r1], #4
 800580a:	d402      	bmi.n	8005812 <_printf_i+0x18a>
 800580c:	065f      	lsls	r7, r3, #25
 800580e:	bf48      	it	mi
 8005810:	b2ad      	uxthmi	r5, r5
 8005812:	6031      	str	r1, [r6, #0]
 8005814:	07d9      	lsls	r1, r3, #31
 8005816:	bf44      	itt	mi
 8005818:	f043 0320 	orrmi.w	r3, r3, #32
 800581c:	6023      	strmi	r3, [r4, #0]
 800581e:	b11d      	cbz	r5, 8005828 <_printf_i+0x1a0>
 8005820:	2310      	movs	r3, #16
 8005822:	e7ab      	b.n	800577c <_printf_i+0xf4>
 8005824:	4826      	ldr	r0, [pc, #152]	@ (80058c0 <_printf_i+0x238>)
 8005826:	e7e9      	b.n	80057fc <_printf_i+0x174>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	f023 0320 	bic.w	r3, r3, #32
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	e7f6      	b.n	8005820 <_printf_i+0x198>
 8005832:	4616      	mov	r6, r2
 8005834:	e7bd      	b.n	80057b2 <_printf_i+0x12a>
 8005836:	6833      	ldr	r3, [r6, #0]
 8005838:	6825      	ldr	r5, [r4, #0]
 800583a:	1d18      	adds	r0, r3, #4
 800583c:	6961      	ldr	r1, [r4, #20]
 800583e:	6030      	str	r0, [r6, #0]
 8005840:	062e      	lsls	r6, r5, #24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	d501      	bpl.n	800584a <_printf_i+0x1c2>
 8005846:	6019      	str	r1, [r3, #0]
 8005848:	e002      	b.n	8005850 <_printf_i+0x1c8>
 800584a:	0668      	lsls	r0, r5, #25
 800584c:	d5fb      	bpl.n	8005846 <_printf_i+0x1be>
 800584e:	8019      	strh	r1, [r3, #0]
 8005850:	2300      	movs	r3, #0
 8005852:	4616      	mov	r6, r2
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	e7bc      	b.n	80057d2 <_printf_i+0x14a>
 8005858:	6833      	ldr	r3, [r6, #0]
 800585a:	2100      	movs	r1, #0
 800585c:	1d1a      	adds	r2, r3, #4
 800585e:	6032      	str	r2, [r6, #0]
 8005860:	681e      	ldr	r6, [r3, #0]
 8005862:	6862      	ldr	r2, [r4, #4]
 8005864:	4630      	mov	r0, r6
 8005866:	f000 f859 	bl	800591c <memchr>
 800586a:	b108      	cbz	r0, 8005870 <_printf_i+0x1e8>
 800586c:	1b80      	subs	r0, r0, r6
 800586e:	6060      	str	r0, [r4, #4]
 8005870:	6863      	ldr	r3, [r4, #4]
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	2300      	movs	r3, #0
 8005876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587a:	e7aa      	b.n	80057d2 <_printf_i+0x14a>
 800587c:	4632      	mov	r2, r6
 800587e:	4649      	mov	r1, r9
 8005880:	4640      	mov	r0, r8
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	47d0      	blx	sl
 8005886:	3001      	adds	r0, #1
 8005888:	d0ad      	beq.n	80057e6 <_printf_i+0x15e>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	079b      	lsls	r3, r3, #30
 800588e:	d413      	bmi.n	80058b8 <_printf_i+0x230>
 8005890:	68e0      	ldr	r0, [r4, #12]
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	4298      	cmp	r0, r3
 8005896:	bfb8      	it	lt
 8005898:	4618      	movlt	r0, r3
 800589a:	e7a6      	b.n	80057ea <_printf_i+0x162>
 800589c:	2301      	movs	r3, #1
 800589e:	4632      	mov	r2, r6
 80058a0:	4649      	mov	r1, r9
 80058a2:	4640      	mov	r0, r8
 80058a4:	47d0      	blx	sl
 80058a6:	3001      	adds	r0, #1
 80058a8:	d09d      	beq.n	80057e6 <_printf_i+0x15e>
 80058aa:	3501      	adds	r5, #1
 80058ac:	68e3      	ldr	r3, [r4, #12]
 80058ae:	9903      	ldr	r1, [sp, #12]
 80058b0:	1a5b      	subs	r3, r3, r1
 80058b2:	42ab      	cmp	r3, r5
 80058b4:	dcf2      	bgt.n	800589c <_printf_i+0x214>
 80058b6:	e7eb      	b.n	8005890 <_printf_i+0x208>
 80058b8:	2500      	movs	r5, #0
 80058ba:	f104 0619 	add.w	r6, r4, #25
 80058be:	e7f5      	b.n	80058ac <_printf_i+0x224>
 80058c0:	080065ef 	.word	0x080065ef
 80058c4:	08006600 	.word	0x08006600

080058c8 <memmove>:
 80058c8:	4288      	cmp	r0, r1
 80058ca:	b510      	push	{r4, lr}
 80058cc:	eb01 0402 	add.w	r4, r1, r2
 80058d0:	d902      	bls.n	80058d8 <memmove+0x10>
 80058d2:	4284      	cmp	r4, r0
 80058d4:	4623      	mov	r3, r4
 80058d6:	d807      	bhi.n	80058e8 <memmove+0x20>
 80058d8:	1e43      	subs	r3, r0, #1
 80058da:	42a1      	cmp	r1, r4
 80058dc:	d008      	beq.n	80058f0 <memmove+0x28>
 80058de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058e6:	e7f8      	b.n	80058da <memmove+0x12>
 80058e8:	4601      	mov	r1, r0
 80058ea:	4402      	add	r2, r0
 80058ec:	428a      	cmp	r2, r1
 80058ee:	d100      	bne.n	80058f2 <memmove+0x2a>
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058fa:	e7f7      	b.n	80058ec <memmove+0x24>

080058fc <_sbrk_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	2300      	movs	r3, #0
 8005900:	4d05      	ldr	r5, [pc, #20]	@ (8005918 <_sbrk_r+0x1c>)
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	f7fc fbbe 	bl	8002088 <_sbrk>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_sbrk_r+0x1a>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b103      	cbz	r3, 8005916 <_sbrk_r+0x1a>
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000864 	.word	0x20000864

0800591c <memchr>:
 800591c:	4603      	mov	r3, r0
 800591e:	b510      	push	{r4, lr}
 8005920:	b2c9      	uxtb	r1, r1
 8005922:	4402      	add	r2, r0
 8005924:	4293      	cmp	r3, r2
 8005926:	4618      	mov	r0, r3
 8005928:	d101      	bne.n	800592e <memchr+0x12>
 800592a:	2000      	movs	r0, #0
 800592c:	e003      	b.n	8005936 <memchr+0x1a>
 800592e:	7804      	ldrb	r4, [r0, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	428c      	cmp	r4, r1
 8005934:	d1f6      	bne.n	8005924 <memchr+0x8>
 8005936:	bd10      	pop	{r4, pc}

08005938 <memcpy>:
 8005938:	440a      	add	r2, r1
 800593a:	4291      	cmp	r1, r2
 800593c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005940:	d100      	bne.n	8005944 <memcpy+0xc>
 8005942:	4770      	bx	lr
 8005944:	b510      	push	{r4, lr}
 8005946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800594a:	4291      	cmp	r1, r2
 800594c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005950:	d1f9      	bne.n	8005946 <memcpy+0xe>
 8005952:	bd10      	pop	{r4, pc}

08005954 <_realloc_r>:
 8005954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005958:	4680      	mov	r8, r0
 800595a:	4615      	mov	r5, r2
 800595c:	460c      	mov	r4, r1
 800595e:	b921      	cbnz	r1, 800596a <_realloc_r+0x16>
 8005960:	4611      	mov	r1, r2
 8005962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005966:	f7ff bc39 	b.w	80051dc <_malloc_r>
 800596a:	b92a      	cbnz	r2, 8005978 <_realloc_r+0x24>
 800596c:	f7ff fbcc 	bl	8005108 <_free_r>
 8005970:	2400      	movs	r4, #0
 8005972:	4620      	mov	r0, r4
 8005974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005978:	f000 f81a 	bl	80059b0 <_malloc_usable_size_r>
 800597c:	4285      	cmp	r5, r0
 800597e:	4606      	mov	r6, r0
 8005980:	d802      	bhi.n	8005988 <_realloc_r+0x34>
 8005982:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005986:	d8f4      	bhi.n	8005972 <_realloc_r+0x1e>
 8005988:	4629      	mov	r1, r5
 800598a:	4640      	mov	r0, r8
 800598c:	f7ff fc26 	bl	80051dc <_malloc_r>
 8005990:	4607      	mov	r7, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	d0ec      	beq.n	8005970 <_realloc_r+0x1c>
 8005996:	42b5      	cmp	r5, r6
 8005998:	462a      	mov	r2, r5
 800599a:	4621      	mov	r1, r4
 800599c:	bf28      	it	cs
 800599e:	4632      	movcs	r2, r6
 80059a0:	f7ff ffca 	bl	8005938 <memcpy>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4640      	mov	r0, r8
 80059a8:	f7ff fbae 	bl	8005108 <_free_r>
 80059ac:	463c      	mov	r4, r7
 80059ae:	e7e0      	b.n	8005972 <_realloc_r+0x1e>

080059b0 <_malloc_usable_size_r>:
 80059b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b4:	1f18      	subs	r0, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	bfbc      	itt	lt
 80059ba:	580b      	ldrlt	r3, [r1, r0]
 80059bc:	18c0      	addlt	r0, r0, r3
 80059be:	4770      	bx	lr

080059c0 <_init>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr

080059cc <_fini>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr
