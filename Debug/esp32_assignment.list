
esp32_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001064  08004328  08004328  00005328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  0000708c  2**0
                  CONTENTS
  4 .ARM          00000008  0800538c  0800538c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005394  08005394  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800539c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  2000008c  08005428  0000708c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08005428  00007704  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008459  00000000  00000000  000070b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  0000f50e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c7  00000000  00000000  00011798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cb4  00000000  00000000  00011d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d46  00000000  00000000  00029a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008400a  00000000  00000000  00033759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7763  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c8  00000000  00000000  000b77a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000ba070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004310 	.word	0x08004310

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004310 	.word	0x08004310

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SendCommand>:
char *setting = "<!DOCTYPE html><html><head><style>*{font-family:Arial,Helvetica,sans-serif;font-size:medium}h1{font-size:30px}input[type=number]{border-radius:3px;border:1px gray solid}.btn1,.btn2,.btn3{border-radius:5px;border:none;color:#000;font-weight:700;padding:5px 10px 5px 10px;cursor:pointer}.btn1{background-color:#a7d477}.btn2{background-color:#ffb200}.btn3{background-color:#0d92f4}form{margin-top:40px;width:300px;min-height:150px;display:flex;flex-direction:column;justify-content:space-around}.roww{display:flex;justify-content:space-between}</style></head><body style=\"display:flex;flex-direction:column;align-items:center;justify-content:center\"><h1>LIGHT TRAFFICT SETTING</h1><form action=\"/save\"><div class=\"roww\"><label for=\"redtime\">Light red time (s):</label><input type=\"number\" id=\"redtime\" name=\"redtime\" min=\"0\" max=\"99\" required></div><div class=\"roww\"><label for=\"greentime\">Light green time (s):</label><input type=\"number\" id=\"greentime\" name=\"greentime\" min=\"0\" max=\"99\" required></div><div class=\"roww\"><label for=\"yellowtime\">Light yellow time (s):</label><input type=\"number\" id=\"yellowtime\" name=\"yellowtime\" min=\"0\" max=\"99\" required></div><div style=\"display:flex;justify-content:space-around;margin-top:10px\"><input type=\"submit\" class=\"btn1\" value=\"Save\"> <input type=\"reset\" class=\"btn2\" value=\"Clear Form\"></div></form><button class=\"btn3\" onclick=\"location.href='/run'\">Run</button></body></html>";
//--------------------------------------------------------------------------------------

int Server_State = OFF_SERVER;

void SendCommand(char* str){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	command_size = strlen(str);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	461a      	mov	r2, r3
 800016e:	4b0d      	ldr	r3, [pc, #52]	@ (80001a4 <SendCommand+0x48>)
 8000170:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 8000172:	6878      	ldr	r0, [r7, #4]
 8000174:	f7ff ffea 	bl	800014c <strlen>
 8000178:	4603      	mov	r3, r0
 800017a:	b29a      	uxth	r2, r3
 800017c:	f04f 33ff 	mov.w	r3, #4294967295
 8000180:	6879      	ldr	r1, [r7, #4]
 8000182:	4809      	ldr	r0, [pc, #36]	@ (80001a8 <SendCommand+0x4c>)
 8000184:	f002 f8ac 	bl	80022e0 <HAL_UART_Transmit>
	if(Server_State == OFF_SERVER) HAL_UART_Receive_IT(&huart1, data_byte_receive,1);
 8000188:	4b08      	ldr	r3, [pc, #32]	@ (80001ac <SendCommand+0x50>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d104      	bne.n	800019a <SendCommand+0x3e>
 8000190:	2201      	movs	r2, #1
 8000192:	4907      	ldr	r1, [pc, #28]	@ (80001b0 <SendCommand+0x54>)
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <SendCommand+0x4c>)
 8000196:	f002 f92e 	bl	80023f6 <HAL_UART_Receive_IT>
}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	200004cc 	.word	0x200004cc
 80001a8:	200004d8 	.word	0x200004d8
 80001ac:	20000020 	.word	0x20000020
 80001b0:	200000a8 	.word	0x200000a8

080001b4 <WaitForResponse>:
void WaitForResponse(int timeout,char* OKE_response,char* Error_response){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
	uint32_t tickStart = HAL_GetTick();
 80001c0:	f001 f8a6 	bl	8001310 <HAL_GetTick>
 80001c4:	6178      	str	r0, [r7, #20]
		while(Flag_Response == 0){
 80001c6:	e026      	b.n	8000216 <WaitForResponse+0x62>
			if(HAL_GetTick()-tickStart > timeout){
 80001c8:	f001 f8a2 	bl	8001310 <HAL_GetTick>
 80001cc:	4602      	mov	r2, r0
 80001ce:	697b      	ldr	r3, [r7, #20]
 80001d0:	1ad2      	subs	r2, r2, r3
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d909      	bls.n	80001ec <WaitForResponse+0x38>
				count_data_come = 0;
 80001d8:	4b17      	ldr	r3, [pc, #92]	@ (8000238 <WaitForResponse+0x84>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
				idx=0;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <WaitForResponse+0x88>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
				command_size=0;
 80001e4:	4b16      	ldr	r3, [pc, #88]	@ (8000240 <WaitForResponse+0x8c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
				return;
 80001ea:	e021      	b.n	8000230 <WaitForResponse+0x7c>
			}
			if(strstr((char*)ESP_Response,OKE_response) != NULL){
 80001ec:	68b9      	ldr	r1, [r7, #8]
 80001ee:	4815      	ldr	r0, [pc, #84]	@ (8000244 <WaitForResponse+0x90>)
 80001f0:	f003 f826 	bl	8003240 <strstr>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d003      	beq.n	8000202 <WaitForResponse+0x4e>
				Flag_Response = 1;
 80001fa:	4b13      	ldr	r3, [pc, #76]	@ (8000248 <WaitForResponse+0x94>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	e009      	b.n	8000216 <WaitForResponse+0x62>
			}
			else if(strstr((char*)ESP_Response,Error_response) != NULL){
 8000202:	6879      	ldr	r1, [r7, #4]
 8000204:	480f      	ldr	r0, [pc, #60]	@ (8000244 <WaitForResponse+0x90>)
 8000206:	f003 f81b 	bl	8003240 <strstr>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d002      	beq.n	8000216 <WaitForResponse+0x62>
				Flag_Response = 2;
 8000210:	4b0d      	ldr	r3, [pc, #52]	@ (8000248 <WaitForResponse+0x94>)
 8000212:	2202      	movs	r2, #2
 8000214:	601a      	str	r2, [r3, #0]
		while(Flag_Response == 0){
 8000216:	4b0c      	ldr	r3, [pc, #48]	@ (8000248 <WaitForResponse+0x94>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0d4      	beq.n	80001c8 <WaitForResponse+0x14>
			}
		}
		idx=0;
 800021e:	4b07      	ldr	r3, [pc, #28]	@ (800023c <WaitForResponse+0x88>)
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
		command_size =0;
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <WaitForResponse+0x8c>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
		count_data_come = 0;
 800022a:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <WaitForResponse+0x84>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
}
 8000230:	3718      	adds	r7, #24
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	200004c8 	.word	0x200004c8
 800023c:	200004d4 	.word	0x200004d4
 8000240:	200004cc 	.word	0x200004cc
 8000244:	200000ac 	.word	0x200000ac
 8000248:	200004d0 	.word	0x200004d0

0800024c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle){
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	if(Flag_Response == 0||Server_State==ON_SERVER) HAL_UART_Receive_IT(&huart1, data_byte_receive, 1);
 8000254:	4b16      	ldr	r3, [pc, #88]	@ (80002b0 <HAL_UART_RxCpltCallback+0x64>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d003      	beq.n	8000264 <HAL_UART_RxCpltCallback+0x18>
 800025c:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <HAL_UART_RxCpltCallback+0x68>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d104      	bne.n	800026e <HAL_UART_RxCpltCallback+0x22>
 8000264:	2201      	movs	r2, #1
 8000266:	4914      	ldr	r1, [pc, #80]	@ (80002b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000268:	4814      	ldr	r0, [pc, #80]	@ (80002bc <HAL_UART_RxCpltCallback+0x70>)
 800026a:	f002 f8c4 	bl	80023f6 <HAL_UART_Receive_IT>
		count_data_come++;
 800026e:	4b14      	ldr	r3, [pc, #80]	@ (80002c0 <HAL_UART_RxCpltCallback+0x74>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3301      	adds	r3, #1
 8000274:	4a12      	ldr	r2, [pc, #72]	@ (80002c0 <HAL_UART_RxCpltCallback+0x74>)
 8000276:	6013      	str	r3, [r2, #0]
		if(count_data_come > command_size){
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <HAL_UART_RxCpltCallback+0x74>)
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <HAL_UART_RxCpltCallback+0x78>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	dd10      	ble.n	80002a6 <HAL_UART_RxCpltCallback+0x5a>
			ESP_Response[idx++] = data_byte_receive[0];
 8000284:	4b10      	ldr	r3, [pc, #64]	@ (80002c8 <HAL_UART_RxCpltCallback+0x7c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	490f      	ldr	r1, [pc, #60]	@ (80002c8 <HAL_UART_RxCpltCallback+0x7c>)
 800028c:	600a      	str	r2, [r1, #0]
 800028e:	4a0a      	ldr	r2, [pc, #40]	@ (80002b8 <HAL_UART_RxCpltCallback+0x6c>)
 8000290:	7811      	ldrb	r1, [r2, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <HAL_UART_RxCpltCallback+0x80>)
 8000294:	54d1      	strb	r1, [r2, r3]
			if(idx>=1000){ //+IPD
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <HAL_UART_RxCpltCallback+0x7c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800029e:	db02      	blt.n	80002a6 <HAL_UART_RxCpltCallback+0x5a>
				idx = 0;
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <HAL_UART_RxCpltCallback+0x7c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
			}
		}
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	200004d0 	.word	0x200004d0
 80002b4:	20000020 	.word	0x20000020
 80002b8:	200000a8 	.word	0x200000a8
 80002bc:	200004d8 	.word	0x200004d8
 80002c0:	200004c8 	.word	0x200004c8
 80002c4:	200004cc 	.word	0x200004cc
 80002c8:	200004d4 	.word	0x200004d4
 80002cc:	200000ac 	.word	0x200000ac

080002d0 <ESP_INIT>:
void ESP_INIT(){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	SendCommand("AT+RESTORE\r\n");
 80002d4:	486a      	ldr	r0, [pc, #424]	@ (8000480 <ESP_INIT+0x1b0>)
 80002d6:	f7ff ff41 	bl	800015c <SendCommand>
	WaitForResponse(20000,"ready\r\n","ERROR\r\n");
 80002da:	4a6a      	ldr	r2, [pc, #424]	@ (8000484 <ESP_INIT+0x1b4>)
 80002dc:	496a      	ldr	r1, [pc, #424]	@ (8000488 <ESP_INIT+0x1b8>)
 80002de:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80002e2:	f7ff ff67 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 80002e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80002ea:	2100      	movs	r1, #0
 80002ec:	4867      	ldr	r0, [pc, #412]	@ (800048c <ESP_INIT+0x1bc>)
 80002ee:	f002 ff36 	bl	800315e <memset>
	if(Flag_Response == 1){
 80002f2:	4b67      	ldr	r3, [pc, #412]	@ (8000490 <ESP_INIT+0x1c0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d106      	bne.n	8000308 <ESP_INIT+0x38>
		HAL_UART_Transmit(&huart3, (uint8_t*)"OKE", 3, 100);
 80002fa:	2364      	movs	r3, #100	@ 0x64
 80002fc:	2203      	movs	r2, #3
 80002fe:	4965      	ldr	r1, [pc, #404]	@ (8000494 <ESP_INIT+0x1c4>)
 8000300:	4865      	ldr	r0, [pc, #404]	@ (8000498 <ESP_INIT+0x1c8>)
 8000302:	f001 ffed 	bl	80022e0 <HAL_UART_Transmit>
 8000306:	e009      	b.n	800031c <ESP_INIT+0x4c>
	}
	else if(Flag_Response == 2){
 8000308:	4b61      	ldr	r3, [pc, #388]	@ (8000490 <ESP_INIT+0x1c0>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b02      	cmp	r3, #2
 800030e:	d105      	bne.n	800031c <ESP_INIT+0x4c>
		HAL_UART_Transmit(&huart3, (uint8_t*)"ERR", 3, 100);
 8000310:	2364      	movs	r3, #100	@ 0x64
 8000312:	2203      	movs	r2, #3
 8000314:	4961      	ldr	r1, [pc, #388]	@ (800049c <ESP_INIT+0x1cc>)
 8000316:	4860      	ldr	r0, [pc, #384]	@ (8000498 <ESP_INIT+0x1c8>)
 8000318:	f001 ffe2 	bl	80022e0 <HAL_UART_Transmit>
	}
	Flag_Response = 0;
 800031c:	4b5c      	ldr	r3, [pc, #368]	@ (8000490 <ESP_INIT+0x1c0>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
	SendCommand("AT+CWMODE=1\r\n");
 8000322:	485f      	ldr	r0, [pc, #380]	@ (80004a0 <ESP_INIT+0x1d0>)
 8000324:	f7ff ff1a 	bl	800015c <SendCommand>
	WaitForResponse(5000,"OK\r\n","ERROR\r\n");
 8000328:	4a56      	ldr	r2, [pc, #344]	@ (8000484 <ESP_INIT+0x1b4>)
 800032a:	495e      	ldr	r1, [pc, #376]	@ (80004a4 <ESP_INIT+0x1d4>)
 800032c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000330:	f7ff ff40 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000338:	2100      	movs	r1, #0
 800033a:	4854      	ldr	r0, [pc, #336]	@ (800048c <ESP_INIT+0x1bc>)
 800033c:	f002 ff0f 	bl	800315e <memset>
	if(Flag_Response == 1){
 8000340:	4b53      	ldr	r3, [pc, #332]	@ (8000490 <ESP_INIT+0x1c0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <ESP_INIT+0x86>
		HAL_UART_Transmit(&huart3, (uint8_t*)"OKE", 3, 100);
 8000348:	2364      	movs	r3, #100	@ 0x64
 800034a:	2203      	movs	r2, #3
 800034c:	4951      	ldr	r1, [pc, #324]	@ (8000494 <ESP_INIT+0x1c4>)
 800034e:	4852      	ldr	r0, [pc, #328]	@ (8000498 <ESP_INIT+0x1c8>)
 8000350:	f001 ffc6 	bl	80022e0 <HAL_UART_Transmit>
 8000354:	e009      	b.n	800036a <ESP_INIT+0x9a>
	}
	else if(Flag_Response == 2){
 8000356:	4b4e      	ldr	r3, [pc, #312]	@ (8000490 <ESP_INIT+0x1c0>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b02      	cmp	r3, #2
 800035c:	d105      	bne.n	800036a <ESP_INIT+0x9a>
		HAL_UART_Transmit(&huart3, (uint8_t*)"ERR", 3, 100);
 800035e:	2364      	movs	r3, #100	@ 0x64
 8000360:	2203      	movs	r2, #3
 8000362:	494e      	ldr	r1, [pc, #312]	@ (800049c <ESP_INIT+0x1cc>)
 8000364:	484c      	ldr	r0, [pc, #304]	@ (8000498 <ESP_INIT+0x1c8>)
 8000366:	f001 ffbb 	bl	80022e0 <HAL_UART_Transmit>
	}
	Flag_Response = 0;
 800036a:	4b49      	ldr	r3, [pc, #292]	@ (8000490 <ESP_INIT+0x1c0>)
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"AT+CWJAP=%s,%s\r\n",SSID,Pass);
 8000370:	4b4d      	ldr	r3, [pc, #308]	@ (80004a8 <ESP_INIT+0x1d8>)
 8000372:	4a4e      	ldr	r2, [pc, #312]	@ (80004ac <ESP_INIT+0x1dc>)
 8000374:	494e      	ldr	r1, [pc, #312]	@ (80004b0 <ESP_INIT+0x1e0>)
 8000376:	484f      	ldr	r0, [pc, #316]	@ (80004b4 <ESP_INIT+0x1e4>)
 8000378:	f002 fe8e 	bl	8003098 <siprintf>
	SendCommand(buffer);
 800037c:	484d      	ldr	r0, [pc, #308]	@ (80004b4 <ESP_INIT+0x1e4>)
 800037e:	f7ff feed 	bl	800015c <SendCommand>
	memset(buffer,0,sizeof(buffer));
 8000382:	2232      	movs	r2, #50	@ 0x32
 8000384:	2100      	movs	r1, #0
 8000386:	484b      	ldr	r0, [pc, #300]	@ (80004b4 <ESP_INIT+0x1e4>)
 8000388:	f002 fee9 	bl	800315e <memset>
	WaitForResponse(20000,"OK\r\n","ERROR\r\n");
 800038c:	4a3d      	ldr	r2, [pc, #244]	@ (8000484 <ESP_INIT+0x1b4>)
 800038e:	4945      	ldr	r1, [pc, #276]	@ (80004a4 <ESP_INIT+0x1d4>)
 8000390:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000394:	f7ff ff0e 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000398:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800039c:	2100      	movs	r1, #0
 800039e:	483b      	ldr	r0, [pc, #236]	@ (800048c <ESP_INIT+0x1bc>)
 80003a0:	f002 fedd 	bl	800315e <memset>
	if(Flag_Response == 1){
 80003a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000490 <ESP_INIT+0x1c0>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d106      	bne.n	80003ba <ESP_INIT+0xea>
		HAL_UART_Transmit(&huart3, (uint8_t*)"OKE", 3, 100);
 80003ac:	2364      	movs	r3, #100	@ 0x64
 80003ae:	2203      	movs	r2, #3
 80003b0:	4938      	ldr	r1, [pc, #224]	@ (8000494 <ESP_INIT+0x1c4>)
 80003b2:	4839      	ldr	r0, [pc, #228]	@ (8000498 <ESP_INIT+0x1c8>)
 80003b4:	f001 ff94 	bl	80022e0 <HAL_UART_Transmit>
 80003b8:	e009      	b.n	80003ce <ESP_INIT+0xfe>
	}
	else if(Flag_Response == 2){
 80003ba:	4b35      	ldr	r3, [pc, #212]	@ (8000490 <ESP_INIT+0x1c0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	d105      	bne.n	80003ce <ESP_INIT+0xfe>
		HAL_UART_Transmit(&huart3, (uint8_t*)"ERR", 3, 100);
 80003c2:	2364      	movs	r3, #100	@ 0x64
 80003c4:	2203      	movs	r2, #3
 80003c6:	4935      	ldr	r1, [pc, #212]	@ (800049c <ESP_INIT+0x1cc>)
 80003c8:	4833      	ldr	r0, [pc, #204]	@ (8000498 <ESP_INIT+0x1c8>)
 80003ca:	f001 ff89 	bl	80022e0 <HAL_UART_Transmit>
	}
	Flag_Response = 0;
 80003ce:	4b30      	ldr	r3, [pc, #192]	@ (8000490 <ESP_INIT+0x1c0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
	SendCommand("AT+CIPMUX=1\r\n");
 80003d4:	4838      	ldr	r0, [pc, #224]	@ (80004b8 <ESP_INIT+0x1e8>)
 80003d6:	f7ff fec1 	bl	800015c <SendCommand>
	WaitForResponse(5000,"OK\r\n","ERROR\r\n");
 80003da:	4a2a      	ldr	r2, [pc, #168]	@ (8000484 <ESP_INIT+0x1b4>)
 80003dc:	4931      	ldr	r1, [pc, #196]	@ (80004a4 <ESP_INIT+0x1d4>)
 80003de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80003e2:	f7ff fee7 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 80003e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80003ea:	2100      	movs	r1, #0
 80003ec:	4827      	ldr	r0, [pc, #156]	@ (800048c <ESP_INIT+0x1bc>)
 80003ee:	f002 feb6 	bl	800315e <memset>
	if(Flag_Response == 1){
 80003f2:	4b27      	ldr	r3, [pc, #156]	@ (8000490 <ESP_INIT+0x1c0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d106      	bne.n	8000408 <ESP_INIT+0x138>
			HAL_UART_Transmit(&huart3, (uint8_t*)"OKE", 3, 100);
 80003fa:	2364      	movs	r3, #100	@ 0x64
 80003fc:	2203      	movs	r2, #3
 80003fe:	4925      	ldr	r1, [pc, #148]	@ (8000494 <ESP_INIT+0x1c4>)
 8000400:	4825      	ldr	r0, [pc, #148]	@ (8000498 <ESP_INIT+0x1c8>)
 8000402:	f001 ff6d 	bl	80022e0 <HAL_UART_Transmit>
 8000406:	e009      	b.n	800041c <ESP_INIT+0x14c>
		}
		else if(Flag_Response == 2){
 8000408:	4b21      	ldr	r3, [pc, #132]	@ (8000490 <ESP_INIT+0x1c0>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d105      	bne.n	800041c <ESP_INIT+0x14c>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ERR", 3, 100);
 8000410:	2364      	movs	r3, #100	@ 0x64
 8000412:	2203      	movs	r2, #3
 8000414:	4921      	ldr	r1, [pc, #132]	@ (800049c <ESP_INIT+0x1cc>)
 8000416:	4820      	ldr	r0, [pc, #128]	@ (8000498 <ESP_INIT+0x1c8>)
 8000418:	f001 ff62 	bl	80022e0 <HAL_UART_Transmit>
		}
	Flag_Response = 0;
 800041c:	4b1c      	ldr	r3, [pc, #112]	@ (8000490 <ESP_INIT+0x1c0>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
	SendCommand("AT+CIPSERVER=1,80\r\n");
 8000422:	4826      	ldr	r0, [pc, #152]	@ (80004bc <ESP_INIT+0x1ec>)
 8000424:	f7ff fe9a 	bl	800015c <SendCommand>
	WaitForResponse(5000,"OK\r\n","ERROR\r\n");
 8000428:	4a16      	ldr	r2, [pc, #88]	@ (8000484 <ESP_INIT+0x1b4>)
 800042a:	491e      	ldr	r1, [pc, #120]	@ (80004a4 <ESP_INIT+0x1d4>)
 800042c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000430:	f7ff fec0 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000434:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000438:	2100      	movs	r1, #0
 800043a:	4814      	ldr	r0, [pc, #80]	@ (800048c <ESP_INIT+0x1bc>)
 800043c:	f002 fe8f 	bl	800315e <memset>
	if(Flag_Response == 1){
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <ESP_INIT+0x1c0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d106      	bne.n	8000456 <ESP_INIT+0x186>
			HAL_UART_Transmit(&huart3, (uint8_t*)"OKE", 3, 100);
 8000448:	2364      	movs	r3, #100	@ 0x64
 800044a:	2203      	movs	r2, #3
 800044c:	4911      	ldr	r1, [pc, #68]	@ (8000494 <ESP_INIT+0x1c4>)
 800044e:	4812      	ldr	r0, [pc, #72]	@ (8000498 <ESP_INIT+0x1c8>)
 8000450:	f001 ff46 	bl	80022e0 <HAL_UART_Transmit>
 8000454:	e009      	b.n	800046a <ESP_INIT+0x19a>
		}
		else if(Flag_Response == 2){
 8000456:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <ESP_INIT+0x1c0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2b02      	cmp	r3, #2
 800045c:	d105      	bne.n	800046a <ESP_INIT+0x19a>
			HAL_UART_Transmit(&huart3, (uint8_t*)"ERR", 3, 100);
 800045e:	2364      	movs	r3, #100	@ 0x64
 8000460:	2203      	movs	r2, #3
 8000462:	490e      	ldr	r1, [pc, #56]	@ (800049c <ESP_INIT+0x1cc>)
 8000464:	480c      	ldr	r0, [pc, #48]	@ (8000498 <ESP_INIT+0x1c8>)
 8000466:	f001 ff3b 	bl	80022e0 <HAL_UART_Transmit>
		}
	Server_State = ON_SERVER;
 800046a:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <ESP_INIT+0x1f0>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, data_byte_receive, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	4914      	ldr	r1, [pc, #80]	@ (80004c4 <ESP_INIT+0x1f4>)
 8000474:	4814      	ldr	r0, [pc, #80]	@ (80004c8 <ESP_INIT+0x1f8>)
 8000476:	f001 ffbe 	bl	80023f6 <HAL_UART_Receive_IT>
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	080050f0 	.word	0x080050f0
 8000484:	08005100 	.word	0x08005100
 8000488:	08005108 	.word	0x08005108
 800048c:	200000ac 	.word	0x200000ac
 8000490:	200004d0 	.word	0x200004d0
 8000494:	08005110 	.word	0x08005110
 8000498:	20000568 	.word	0x20000568
 800049c:	08005114 	.word	0x08005114
 80004a0:	08005118 	.word	0x08005118
 80004a4:	08005128 	.word	0x08005128
 80004a8:	20000004 	.word	0x20000004
 80004ac:	20000000 	.word	0x20000000
 80004b0:	08005130 	.word	0x08005130
 80004b4:	20000494 	.word	0x20000494
 80004b8:	08005144 	.word	0x08005144
 80004bc:	08005154 	.word	0x08005154
 80004c0:	20000020 	.word	0x20000020
 80004c4:	200000a8 	.word	0x200000a8
 80004c8:	200004d8 	.word	0x200004d8

080004cc <Server_Send>:
void Server_Send(int linkID,char* str){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
 80004d4:	6039      	str	r1, [r7, #0]
	Flag_Response = 0;
 80004d6:	4b2d      	ldr	r3, [pc, #180]	@ (800058c <Server_Send+0xc0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"AT+CIPSEND=%d,%d\r\n",linkID,strlen(str));
 80004dc:	6838      	ldr	r0, [r7, #0]
 80004de:	f7ff fe35 	bl	800014c <strlen>
 80004e2:	4603      	mov	r3, r0
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	492a      	ldr	r1, [pc, #168]	@ (8000590 <Server_Send+0xc4>)
 80004e8:	482a      	ldr	r0, [pc, #168]	@ (8000594 <Server_Send+0xc8>)
 80004ea:	f002 fdd5 	bl	8003098 <siprintf>
	SendCommand(buffer);
 80004ee:	4829      	ldr	r0, [pc, #164]	@ (8000594 <Server_Send+0xc8>)
 80004f0:	f7ff fe34 	bl	800015c <SendCommand>
	memset(buffer,0,sizeof(buffer));
 80004f4:	2232      	movs	r2, #50	@ 0x32
 80004f6:	2100      	movs	r1, #0
 80004f8:	4826      	ldr	r0, [pc, #152]	@ (8000594 <Server_Send+0xc8>)
 80004fa:	f002 fe30 	bl	800315e <memset>
	WaitForResponse(10000,">","ERROR");
 80004fe:	4a26      	ldr	r2, [pc, #152]	@ (8000598 <Server_Send+0xcc>)
 8000500:	4926      	ldr	r1, [pc, #152]	@ (800059c <Server_Send+0xd0>)
 8000502:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000506:	f7ff fe55 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 800050a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800050e:	2100      	movs	r1, #0
 8000510:	4823      	ldr	r0, [pc, #140]	@ (80005a0 <Server_Send+0xd4>)
 8000512:	f002 fe24 	bl	800315e <memset>

	Flag_Response = 0;
 8000516:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <Server_Send+0xc0>)
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),HAL_MAX_DELAY);
 800051c:	6838      	ldr	r0, [r7, #0]
 800051e:	f7ff fe15 	bl	800014c <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b29a      	uxth	r2, r3
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	6839      	ldr	r1, [r7, #0]
 800052c:	481d      	ldr	r0, [pc, #116]	@ (80005a4 <Server_Send+0xd8>)
 800052e:	f001 fed7 	bl	80022e0 <HAL_UART_Transmit>
	WaitForResponse(20000,"SEND OK","SEND FAIL");
 8000532:	4a1d      	ldr	r2, [pc, #116]	@ (80005a8 <Server_Send+0xdc>)
 8000534:	491d      	ldr	r1, [pc, #116]	@ (80005ac <Server_Send+0xe0>)
 8000536:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800053a:	f7ff fe3b 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 800053e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000542:	2100      	movs	r1, #0
 8000544:	4816      	ldr	r0, [pc, #88]	@ (80005a0 <Server_Send+0xd4>)
 8000546:	f002 fe0a 	bl	800315e <memset>

	Flag_Response = 0;
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <Server_Send+0xc0>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"AT+CIPCLOSE=%d\r\n",linkID);
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4917      	ldr	r1, [pc, #92]	@ (80005b0 <Server_Send+0xe4>)
 8000554:	480f      	ldr	r0, [pc, #60]	@ (8000594 <Server_Send+0xc8>)
 8000556:	f002 fd9f 	bl	8003098 <siprintf>
	SendCommand(buffer);
 800055a:	480e      	ldr	r0, [pc, #56]	@ (8000594 <Server_Send+0xc8>)
 800055c:	f7ff fdfe 	bl	800015c <SendCommand>
	memset(buffer,0,sizeof(buffer));
 8000560:	2232      	movs	r2, #50	@ 0x32
 8000562:	2100      	movs	r1, #0
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <Server_Send+0xc8>)
 8000566:	f002 fdfa 	bl	800315e <memset>
	WaitForResponse(10000,"OK\r\n","ERROR\r\n");
 800056a:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <Server_Send+0xe8>)
 800056c:	4912      	ldr	r1, [pc, #72]	@ (80005b8 <Server_Send+0xec>)
 800056e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000572:	f7ff fe1f 	bl	80001b4 <WaitForResponse>
	memset(ESP_Response,0,sizeof(ESP_Response));
 8000576:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800057a:	2100      	movs	r1, #0
 800057c:	4808      	ldr	r0, [pc, #32]	@ (80005a0 <Server_Send+0xd4>)
 800057e:	f002 fdee 	bl	800315e <memset>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200004d0 	.word	0x200004d0
 8000590:	08005168 	.word	0x08005168
 8000594:	20000494 	.word	0x20000494
 8000598:	0800517c 	.word	0x0800517c
 800059c:	08005184 	.word	0x08005184
 80005a0:	200000ac 	.word	0x200000ac
 80005a4:	200004d8 	.word	0x200004d8
 80005a8:	08005188 	.word	0x08005188
 80005ac:	08005194 	.word	0x08005194
 80005b0:	0800519c 	.word	0x0800519c
 80005b4:	08005100 	.word	0x08005100
 80005b8:	08005128 	.word	0x08005128

080005bc <server_on>:
void server_on(){
 80005bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005be:	b08d      	sub	sp, #52	@ 0x34
 80005c0:	af04      	add	r7, sp, #16
	char* pos = strstr((char*)ESP_Response,"+IPD,");
 80005c2:	49a8      	ldr	r1, [pc, #672]	@ (8000864 <server_on+0x2a8>)
 80005c4:	48a8      	ldr	r0, [pc, #672]	@ (8000868 <server_on+0x2ac>)
 80005c6:	f002 fe3b 	bl	8003240 <strstr>
 80005ca:	6138      	str	r0, [r7, #16]
	if(pos!=NULL){
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <server_on+0x26>
			store_char = Link_ID;
 80005d2:	4ba6      	ldr	r3, [pc, #664]	@ (800086c <server_on+0x2b0>)
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4ba6      	ldr	r3, [pc, #664]	@ (8000870 <server_on+0x2b4>)
 80005d8:	701a      	strb	r2, [r3, #0]
			Link_ID = (*(pos+5));
 80005da:	693b      	ldr	r3, [r7, #16]
 80005dc:	795a      	ldrb	r2, [r3, #5]
 80005de:	4ba3      	ldr	r3, [pc, #652]	@ (800086c <server_on+0x2b0>)
 80005e0:	701a      	strb	r2, [r3, #0]
	}
	if(store_char == Link_ID && Link_ID >='0' && Link_ID <= '4'){
 80005e2:	4ba3      	ldr	r3, [pc, #652]	@ (8000870 <server_on+0x2b4>)
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4ba1      	ldr	r3, [pc, #644]	@ (800086c <server_on+0x2b0>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	f040 829c 	bne.w	8000b28 <server_on+0x56c>
 80005f0:	4b9e      	ldr	r3, [pc, #632]	@ (800086c <server_on+0x2b0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80005f6:	f240 8297 	bls.w	8000b28 <server_on+0x56c>
 80005fa:	4b9c      	ldr	r3, [pc, #624]	@ (800086c <server_on+0x2b0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b34      	cmp	r3, #52	@ 0x34
 8000600:	f200 8292 	bhi.w	8000b28 <server_on+0x56c>
		if(strstr((char*)ESP_Response,"GET")!=NULL){
 8000604:	499b      	ldr	r1, [pc, #620]	@ (8000874 <server_on+0x2b8>)
 8000606:	4898      	ldr	r0, [pc, #608]	@ (8000868 <server_on+0x2ac>)
 8000608:	f002 fe1a 	bl	8003240 <strstr>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	f000 828a 	beq.w	8000b28 <server_on+0x56c>
		   if(strstr((char*)ESP_Response,"/home")!=NULL){
 8000614:	4998      	ldr	r1, [pc, #608]	@ (8000878 <server_on+0x2bc>)
 8000616:	4894      	ldr	r0, [pc, #592]	@ (8000868 <server_on+0x2ac>)
 8000618:	f002 fe12 	bl	8003240 <strstr>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d01d      	beq.n	800065e <server_on+0xa2>
			    Server_Send(Link_ID-48, home);
 8000622:	4b92      	ldr	r3, [pc, #584]	@ (800086c <server_on+0x2b0>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	3b30      	subs	r3, #48	@ 0x30
 8000628:	4a94      	ldr	r2, [pc, #592]	@ (800087c <server_on+0x2c0>)
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	4611      	mov	r1, r2
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff4c 	bl	80004cc <Server_Send>
				Flag_Response = 0;
 8000634:	4b92      	ldr	r3, [pc, #584]	@ (8000880 <server_on+0x2c4>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800063a:	4a92      	ldr	r2, [pc, #584]	@ (8000884 <server_on+0x2c8>)
 800063c:	4992      	ldr	r1, [pc, #584]	@ (8000888 <server_on+0x2cc>)
 800063e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000642:	f7ff fdb7 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000646:	4b8e      	ldr	r3, [pc, #568]	@ (8000880 <server_on+0x2c4>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	f040 826c 	bne.w	8000b28 <server_on+0x56c>
 8000650:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000654:	2100      	movs	r1, #0
 8000656:	4884      	ldr	r0, [pc, #528]	@ (8000868 <server_on+0x2ac>)
 8000658:	f002 fd81 	bl	800315e <memset>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
			}
		}

	}
}
 800065c:	e264      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/manual")!=NULL){
 800065e:	498b      	ldr	r1, [pc, #556]	@ (800088c <server_on+0x2d0>)
 8000660:	4881      	ldr	r0, [pc, #516]	@ (8000868 <server_on+0x2ac>)
 8000662:	f002 fded 	bl	8003240 <strstr>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d023      	beq.n	80006b4 <server_on+0xf8>
				Server_Send(Link_ID-48,manual);
 800066c:	4b7f      	ldr	r3, [pc, #508]	@ (800086c <server_on+0x2b0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3b30      	subs	r3, #48	@ 0x30
 8000672:	4a87      	ldr	r2, [pc, #540]	@ (8000890 <server_on+0x2d4>)
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ff27 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!man#", 5, 100);
 800067e:	2364      	movs	r3, #100	@ 0x64
 8000680:	2205      	movs	r2, #5
 8000682:	4984      	ldr	r1, [pc, #528]	@ (8000894 <server_on+0x2d8>)
 8000684:	4884      	ldr	r0, [pc, #528]	@ (8000898 <server_on+0x2dc>)
 8000686:	f001 fe2b 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 800068a:	4b7d      	ldr	r3, [pc, #500]	@ (8000880 <server_on+0x2c4>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 8000690:	4a7c      	ldr	r2, [pc, #496]	@ (8000884 <server_on+0x2c8>)
 8000692:	497d      	ldr	r1, [pc, #500]	@ (8000888 <server_on+0x2cc>)
 8000694:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000698:	f7ff fd8c 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 800069c:	4b78      	ldr	r3, [pc, #480]	@ (8000880 <server_on+0x2c4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	f040 8241 	bne.w	8000b28 <server_on+0x56c>
 80006a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006aa:	2100      	movs	r1, #0
 80006ac:	486e      	ldr	r0, [pc, #440]	@ (8000868 <server_on+0x2ac>)
 80006ae:	f002 fd56 	bl	800315e <memset>
}
 80006b2:	e239      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/redgreen")!=NULL){
 80006b4:	4979      	ldr	r1, [pc, #484]	@ (800089c <server_on+0x2e0>)
 80006b6:	486c      	ldr	r0, [pc, #432]	@ (8000868 <server_on+0x2ac>)
 80006b8:	f002 fdc2 	bl	8003240 <strstr>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d023      	beq.n	800070a <server_on+0x14e>
				Server_Send(Link_ID-48,manual);
 80006c2:	4b6a      	ldr	r3, [pc, #424]	@ (800086c <server_on+0x2b0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3b30      	subs	r3, #48	@ 0x30
 80006c8:	4a71      	ldr	r2, [pc, #452]	@ (8000890 <server_on+0x2d4>)
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fefc 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!rg#", 4, 100);
 80006d4:	2364      	movs	r3, #100	@ 0x64
 80006d6:	2204      	movs	r2, #4
 80006d8:	4971      	ldr	r1, [pc, #452]	@ (80008a0 <server_on+0x2e4>)
 80006da:	486f      	ldr	r0, [pc, #444]	@ (8000898 <server_on+0x2dc>)
 80006dc:	f001 fe00 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 80006e0:	4b67      	ldr	r3, [pc, #412]	@ (8000880 <server_on+0x2c4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 80006e6:	4a67      	ldr	r2, [pc, #412]	@ (8000884 <server_on+0x2c8>)
 80006e8:	4967      	ldr	r1, [pc, #412]	@ (8000888 <server_on+0x2cc>)
 80006ea:	f242 7010 	movw	r0, #10000	@ 0x2710
 80006ee:	f7ff fd61 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 80006f2:	4b63      	ldr	r3, [pc, #396]	@ (8000880 <server_on+0x2c4>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	f040 8216 	bne.w	8000b28 <server_on+0x56c>
 80006fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000700:	2100      	movs	r1, #0
 8000702:	4859      	ldr	r0, [pc, #356]	@ (8000868 <server_on+0x2ac>)
 8000704:	f002 fd2b 	bl	800315e <memset>
}
 8000708:	e20e      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/redyellow")!=NULL){
 800070a:	4966      	ldr	r1, [pc, #408]	@ (80008a4 <server_on+0x2e8>)
 800070c:	4856      	ldr	r0, [pc, #344]	@ (8000868 <server_on+0x2ac>)
 800070e:	f002 fd97 	bl	8003240 <strstr>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d023      	beq.n	8000760 <server_on+0x1a4>
				Server_Send(Link_ID-48,manual);
 8000718:	4b54      	ldr	r3, [pc, #336]	@ (800086c <server_on+0x2b0>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	3b30      	subs	r3, #48	@ 0x30
 800071e:	4a5c      	ldr	r2, [pc, #368]	@ (8000890 <server_on+0x2d4>)
 8000720:	6812      	ldr	r2, [r2, #0]
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fed1 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!ry#", 4, 100);
 800072a:	2364      	movs	r3, #100	@ 0x64
 800072c:	2204      	movs	r2, #4
 800072e:	495e      	ldr	r1, [pc, #376]	@ (80008a8 <server_on+0x2ec>)
 8000730:	4859      	ldr	r0, [pc, #356]	@ (8000898 <server_on+0x2dc>)
 8000732:	f001 fdd5 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 8000736:	4b52      	ldr	r3, [pc, #328]	@ (8000880 <server_on+0x2c4>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800073c:	4a51      	ldr	r2, [pc, #324]	@ (8000884 <server_on+0x2c8>)
 800073e:	4952      	ldr	r1, [pc, #328]	@ (8000888 <server_on+0x2cc>)
 8000740:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000744:	f7ff fd36 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000748:	4b4d      	ldr	r3, [pc, #308]	@ (8000880 <server_on+0x2c4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	f040 81eb 	bne.w	8000b28 <server_on+0x56c>
 8000752:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000756:	2100      	movs	r1, #0
 8000758:	4843      	ldr	r0, [pc, #268]	@ (8000868 <server_on+0x2ac>)
 800075a:	f002 fd00 	bl	800315e <memset>
}
 800075e:	e1e3      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/greenred")!=NULL){
 8000760:	4952      	ldr	r1, [pc, #328]	@ (80008ac <server_on+0x2f0>)
 8000762:	4841      	ldr	r0, [pc, #260]	@ (8000868 <server_on+0x2ac>)
 8000764:	f002 fd6c 	bl	8003240 <strstr>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d023      	beq.n	80007b6 <server_on+0x1fa>
				Server_Send(Link_ID-48,manual);
 800076e:	4b3f      	ldr	r3, [pc, #252]	@ (800086c <server_on+0x2b0>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3b30      	subs	r3, #48	@ 0x30
 8000774:	4a46      	ldr	r2, [pc, #280]	@ (8000890 <server_on+0x2d4>)
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fea6 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!gr#", 4, 100);
 8000780:	2364      	movs	r3, #100	@ 0x64
 8000782:	2204      	movs	r2, #4
 8000784:	494a      	ldr	r1, [pc, #296]	@ (80008b0 <server_on+0x2f4>)
 8000786:	4844      	ldr	r0, [pc, #272]	@ (8000898 <server_on+0x2dc>)
 8000788:	f001 fdaa 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 800078c:	4b3c      	ldr	r3, [pc, #240]	@ (8000880 <server_on+0x2c4>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 8000792:	4a3c      	ldr	r2, [pc, #240]	@ (8000884 <server_on+0x2c8>)
 8000794:	493c      	ldr	r1, [pc, #240]	@ (8000888 <server_on+0x2cc>)
 8000796:	f242 7010 	movw	r0, #10000	@ 0x2710
 800079a:	f7ff fd0b 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 800079e:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <server_on+0x2c4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	f040 81c0 	bne.w	8000b28 <server_on+0x56c>
 80007a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007ac:	2100      	movs	r1, #0
 80007ae:	482e      	ldr	r0, [pc, #184]	@ (8000868 <server_on+0x2ac>)
 80007b0:	f002 fcd5 	bl	800315e <memset>
}
 80007b4:	e1b8      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/yellowred")!=NULL){
 80007b6:	493f      	ldr	r1, [pc, #252]	@ (80008b4 <server_on+0x2f8>)
 80007b8:	482b      	ldr	r0, [pc, #172]	@ (8000868 <server_on+0x2ac>)
 80007ba:	f002 fd41 	bl	8003240 <strstr>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d023      	beq.n	800080c <server_on+0x250>
				Server_Send(Link_ID-48,manual);
 80007c4:	4b29      	ldr	r3, [pc, #164]	@ (800086c <server_on+0x2b0>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	3b30      	subs	r3, #48	@ 0x30
 80007ca:	4a31      	ldr	r2, [pc, #196]	@ (8000890 <server_on+0x2d4>)
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f7ff fe7b 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!yr#", 4, 100);
 80007d6:	2364      	movs	r3, #100	@ 0x64
 80007d8:	2204      	movs	r2, #4
 80007da:	4937      	ldr	r1, [pc, #220]	@ (80008b8 <server_on+0x2fc>)
 80007dc:	482e      	ldr	r0, [pc, #184]	@ (8000898 <server_on+0x2dc>)
 80007de:	f001 fd7f 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 80007e2:	4b27      	ldr	r3, [pc, #156]	@ (8000880 <server_on+0x2c4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 80007e8:	4a26      	ldr	r2, [pc, #152]	@ (8000884 <server_on+0x2c8>)
 80007ea:	4927      	ldr	r1, [pc, #156]	@ (8000888 <server_on+0x2cc>)
 80007ec:	f242 7010 	movw	r0, #10000	@ 0x2710
 80007f0:	f7ff fce0 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <server_on+0x2c4>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	f040 8195 	bne.w	8000b28 <server_on+0x56c>
 80007fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000802:	2100      	movs	r1, #0
 8000804:	4818      	ldr	r0, [pc, #96]	@ (8000868 <server_on+0x2ac>)
 8000806:	f002 fcaa 	bl	800315e <memset>
}
 800080a:	e18d      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/run")!=NULL){
 800080c:	492b      	ldr	r1, [pc, #172]	@ (80008bc <server_on+0x300>)
 800080e:	4816      	ldr	r0, [pc, #88]	@ (8000868 <server_on+0x2ac>)
 8000810:	f002 fd16 	bl	8003240 <strstr>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d054      	beq.n	80008c4 <server_on+0x308>
				Server_Send(Link_ID-48, home);
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <server_on+0x2b0>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3b30      	subs	r3, #48	@ 0x30
 8000820:	4a16      	ldr	r2, [pc, #88]	@ (800087c <server_on+0x2c0>)
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fe50 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!run#", 5, 100);
 800082c:	2364      	movs	r3, #100	@ 0x64
 800082e:	2205      	movs	r2, #5
 8000830:	4923      	ldr	r1, [pc, #140]	@ (80008c0 <server_on+0x304>)
 8000832:	4819      	ldr	r0, [pc, #100]	@ (8000898 <server_on+0x2dc>)
 8000834:	f001 fd54 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <server_on+0x2c4>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 800083e:	4a11      	ldr	r2, [pc, #68]	@ (8000884 <server_on+0x2c8>)
 8000840:	4911      	ldr	r1, [pc, #68]	@ (8000888 <server_on+0x2cc>)
 8000842:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000846:	f7ff fcb5 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <server_on+0x2c4>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	f040 816a 	bne.w	8000b28 <server_on+0x56c>
 8000854:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000858:	2100      	movs	r1, #0
 800085a:	4803      	ldr	r0, [pc, #12]	@ (8000868 <server_on+0x2ac>)
 800085c:	f002 fc7f 	bl	800315e <memset>
}
 8000860:	e162      	b.n	8000b28 <server_on+0x56c>
 8000862:	bf00      	nop
 8000864:	080051b0 	.word	0x080051b0
 8000868:	200000ac 	.word	0x200000ac
 800086c:	2000000f 	.word	0x2000000f
 8000870:	20000010 	.word	0x20000010
 8000874:	080051b8 	.word	0x080051b8
 8000878:	080051bc 	.word	0x080051bc
 800087c:	20000014 	.word	0x20000014
 8000880:	200004d0 	.word	0x200004d0
 8000884:	08005100 	.word	0x08005100
 8000888:	080051c4 	.word	0x080051c4
 800088c:	080051c8 	.word	0x080051c8
 8000890:	20000018 	.word	0x20000018
 8000894:	080051d0 	.word	0x080051d0
 8000898:	20000568 	.word	0x20000568
 800089c:	080051d8 	.word	0x080051d8
 80008a0:	080051e4 	.word	0x080051e4
 80008a4:	080051ec 	.word	0x080051ec
 80008a8:	080051f8 	.word	0x080051f8
 80008ac:	08005200 	.word	0x08005200
 80008b0:	0800520c 	.word	0x0800520c
 80008b4:	08005214 	.word	0x08005214
 80008b8:	08005220 	.word	0x08005220
 80008bc:	08005228 	.word	0x08005228
 80008c0:	08005230 	.word	0x08005230
			else if(strstr((char*)ESP_Response,"/setting")!=NULL){
 80008c4:	499a      	ldr	r1, [pc, #616]	@ (8000b30 <server_on+0x574>)
 80008c6:	489b      	ldr	r0, [pc, #620]	@ (8000b34 <server_on+0x578>)
 80008c8:	f002 fcba 	bl	8003240 <strstr>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d023      	beq.n	800091a <server_on+0x35e>
				Server_Send(Link_ID-48,setting);
 80008d2:	4b99      	ldr	r3, [pc, #612]	@ (8000b38 <server_on+0x57c>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	3b30      	subs	r3, #48	@ 0x30
 80008d8:	4a98      	ldr	r2, [pc, #608]	@ (8000b3c <server_on+0x580>)
 80008da:	6812      	ldr	r2, [r2, #0]
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fdf4 	bl	80004cc <Server_Send>
				HAL_UART_Transmit(&huart3, (uint8_t*)"!set#", 5, 100);
 80008e4:	2364      	movs	r3, #100	@ 0x64
 80008e6:	2205      	movs	r2, #5
 80008e8:	4995      	ldr	r1, [pc, #596]	@ (8000b40 <server_on+0x584>)
 80008ea:	4896      	ldr	r0, [pc, #600]	@ (8000b44 <server_on+0x588>)
 80008ec:	f001 fcf8 	bl	80022e0 <HAL_UART_Transmit>
				Flag_Response = 0;
 80008f0:	4b95      	ldr	r3, [pc, #596]	@ (8000b48 <server_on+0x58c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 80008f6:	4a95      	ldr	r2, [pc, #596]	@ (8000b4c <server_on+0x590>)
 80008f8:	4995      	ldr	r1, [pc, #596]	@ (8000b50 <server_on+0x594>)
 80008fa:	f242 7010 	movw	r0, #10000	@ 0x2710
 80008fe:	f7ff fc59 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000902:	4b91      	ldr	r3, [pc, #580]	@ (8000b48 <server_on+0x58c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	f040 810e 	bne.w	8000b28 <server_on+0x56c>
 800090c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000910:	2100      	movs	r1, #0
 8000912:	4888      	ldr	r0, [pc, #544]	@ (8000b34 <server_on+0x578>)
 8000914:	f002 fc23 	bl	800315e <memset>
}
 8000918:	e106      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"redtime")!=NULL){
 800091a:	498e      	ldr	r1, [pc, #568]	@ (8000b54 <server_on+0x598>)
 800091c:	4885      	ldr	r0, [pc, #532]	@ (8000b34 <server_on+0x578>)
 800091e:	f002 fc8f 	bl	8003240 <strstr>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 80dc 	beq.w	8000ae2 <server_on+0x526>
				char* substr = strstr((char*)ESP_Response,"redtime");
 800092a:	498a      	ldr	r1, [pc, #552]	@ (8000b54 <server_on+0x598>)
 800092c:	4881      	ldr	r0, [pc, #516]	@ (8000b34 <server_on+0x578>)
 800092e:	f002 fc87 	bl	8003240 <strstr>
 8000932:	60f8      	str	r0, [r7, #12]
				while(strstr((char*)ESP_Response,"HTTP")==NULL);
 8000934:	bf00      	nop
 8000936:	4988      	ldr	r1, [pc, #544]	@ (8000b58 <server_on+0x59c>)
 8000938:	487e      	ldr	r0, [pc, #504]	@ (8000b34 <server_on+0x578>)
 800093a:	f002 fc81 	bl	8003240 <strstr>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0f8      	beq.n	8000936 <server_on+0x37a>
				strtok(substr," ");
 8000944:	4985      	ldr	r1, [pc, #532]	@ (8000b5c <server_on+0x5a0>)
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f002 fc1e 	bl	8003188 <strtok>
				char* infor_red = strtok(substr,"&");
 800094c:	4984      	ldr	r1, [pc, #528]	@ (8000b60 <server_on+0x5a4>)
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f002 fc1a 	bl	8003188 <strtok>
 8000954:	60b8      	str	r0, [r7, #8]
				char* infor_green = strtok(NULL,"&");
 8000956:	4982      	ldr	r1, [pc, #520]	@ (8000b60 <server_on+0x5a4>)
 8000958:	2000      	movs	r0, #0
 800095a:	f002 fc15 	bl	8003188 <strtok>
 800095e:	6078      	str	r0, [r7, #4]
				char *infor_yellow = strtok(NULL, "&");
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <server_on+0x5a4>)
 8000962:	2000      	movs	r0, #0
 8000964:	f002 fc10 	bl	8003188 <strtok>
 8000968:	6038      	str	r0, [r7, #0]
				infor_red = strstr(infor_red, "=") + 1;
 800096a:	213d      	movs	r1, #61	@ 0x3d
 800096c:	68b8      	ldr	r0, [r7, #8]
 800096e:	f002 fbfe 	bl	800316e <strchr>
 8000972:	4603      	mov	r3, r0
 8000974:	3301      	adds	r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
				infor_green = strstr(infor_green, "=") + 1;
 8000978:	213d      	movs	r1, #61	@ 0x3d
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f002 fbf7 	bl	800316e <strchr>
 8000980:	4603      	mov	r3, r0
 8000982:	3301      	adds	r3, #1
 8000984:	607b      	str	r3, [r7, #4]
				infor_yellow = strstr(infor_yellow, "=") + 1;
 8000986:	213d      	movs	r1, #61	@ 0x3d
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f002 fbf0 	bl	800316e <strchr>
 800098e:	4603      	mov	r3, r0
 8000990:	3301      	adds	r3, #1
 8000992:	603b      	str	r3, [r7, #0]
				if(strlen(infor_red) == 1){
 8000994:	68b8      	ldr	r0, [r7, #8]
 8000996:	f7ff fbd9 	bl	800014c <strlen>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d104      	bne.n	80009aa <server_on+0x3ee>
					time_red = infor_red[0]-48;
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	3b30      	subs	r3, #48	@ 0x30
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	e00e      	b.n	80009c8 <server_on+0x40c>
					time_red = (infor_red[0]-48)*10 + (infor_red[1]-48);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80009b2:	4613      	mov	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	4413      	add	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	461a      	mov	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	3301      	adds	r3, #1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3b30      	subs	r3, #48	@ 0x30
 80009c4:	4413      	add	r3, r2
 80009c6:	61fb      	str	r3, [r7, #28]
				if(strlen(infor_yellow) == 1){
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f7ff fbbf 	bl	800014c <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d104      	bne.n	80009de <server_on+0x422>
					time_yellow = infor_yellow[0]-48;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	3b30      	subs	r3, #48	@ 0x30
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	e00e      	b.n	80009fc <server_on+0x440>
					time_yellow = (infor_yellow[0]-48)*10 + (infor_yellow[1]-48);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	461a      	mov	r2, r3
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	3b30      	subs	r3, #48	@ 0x30
 80009f8:	4413      	add	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]
				if(strlen(infor_green) == 1){
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fba5 	bl	800014c <strlen>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d104      	bne.n	8000a12 <server_on+0x456>
					time_green = infor_green[0]-48;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3b30      	subs	r3, #48	@ 0x30
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	e00e      	b.n	8000a30 <server_on+0x474>
					time_green = (infor_green[0]-48)*10 + (infor_green[1]-48);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	461a      	mov	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3301      	adds	r3, #1
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	3b30      	subs	r3, #48	@ 0x30
 8000a2c:	4413      	add	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
				sprintf(buffer,"!*r%d%d&y%d%d&g%d%d#",time_red/10,time_red%10,time_yellow/10,time_yellow%10,time_green/10,time_green%10);
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	4a4c      	ldr	r2, [pc, #304]	@ (8000b64 <server_on+0x5a8>)
 8000a34:	fb82 1203 	smull	r1, r2, r2, r3
 8000a38:	1092      	asrs	r2, r2, #2
 8000a3a:	17db      	asrs	r3, r3, #31
 8000a3c:	eba2 0c03 	sub.w	ip, r2, r3
 8000a40:	69fa      	ldr	r2, [r7, #28]
 8000a42:	4b48      	ldr	r3, [pc, #288]	@ (8000b64 <server_on+0x5a8>)
 8000a44:	fb83 1302 	smull	r1, r3, r3, r2
 8000a48:	1099      	asrs	r1, r3, #2
 8000a4a:	17d3      	asrs	r3, r2, #31
 8000a4c:	1acc      	subs	r4, r1, r3
 8000a4e:	4623      	mov	r3, r4
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4423      	add	r3, r4
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad4      	subs	r4, r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	4a42      	ldr	r2, [pc, #264]	@ (8000b64 <server_on+0x5a8>)
 8000a5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a60:	1092      	asrs	r2, r2, #2
 8000a62:	17db      	asrs	r3, r3, #31
 8000a64:	1ad5      	subs	r5, r2, r3
 8000a66:	6979      	ldr	r1, [r7, #20]
 8000a68:	4b3e      	ldr	r3, [pc, #248]	@ (8000b64 <server_on+0x5a8>)
 8000a6a:	fb83 2301 	smull	r2, r3, r3, r1
 8000a6e:	109a      	asrs	r2, r3, #2
 8000a70:	17cb      	asrs	r3, r1, #31
 8000a72:	1ad2      	subs	r2, r2, r3
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	1aca      	subs	r2, r1, r3
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4938      	ldr	r1, [pc, #224]	@ (8000b64 <server_on+0x5a8>)
 8000a82:	fb81 0103 	smull	r0, r1, r1, r3
 8000a86:	1089      	asrs	r1, r1, #2
 8000a88:	17db      	asrs	r3, r3, #31
 8000a8a:	1ace      	subs	r6, r1, r3
 8000a8c:	69b8      	ldr	r0, [r7, #24]
 8000a8e:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <server_on+0x5a8>)
 8000a90:	fb83 1300 	smull	r1, r3, r3, r0
 8000a94:	1099      	asrs	r1, r3, #2
 8000a96:	17c3      	asrs	r3, r0, #31
 8000a98:	1ac9      	subs	r1, r1, r3
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	1ac1      	subs	r1, r0, r3
 8000aa4:	9103      	str	r1, [sp, #12]
 8000aa6:	9602      	str	r6, [sp, #8]
 8000aa8:	9201      	str	r2, [sp, #4]
 8000aaa:	9500      	str	r5, [sp, #0]
 8000aac:	4623      	mov	r3, r4
 8000aae:	4662      	mov	r2, ip
 8000ab0:	492d      	ldr	r1, [pc, #180]	@ (8000b68 <server_on+0x5ac>)
 8000ab2:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <server_on+0x5b0>)
 8000ab4:	f002 faf0 	bl	8003098 <siprintf>
				HAL_UART_Transmit(&huart3,(uint8_t*)buffer,14, 100);
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	220e      	movs	r2, #14
 8000abc:	492b      	ldr	r1, [pc, #172]	@ (8000b6c <server_on+0x5b0>)
 8000abe:	4821      	ldr	r0, [pc, #132]	@ (8000b44 <server_on+0x588>)
 8000ac0:	f001 fc0e 	bl	80022e0 <HAL_UART_Transmit>
				memset(buffer,0,sizeof(buffer));
 8000ac4:	2232      	movs	r2, #50	@ 0x32
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4828      	ldr	r0, [pc, #160]	@ (8000b6c <server_on+0x5b0>)
 8000aca:	f002 fb48 	bl	800315e <memset>
				Server_Send(Link_ID-48,setting);
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <server_on+0x57c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3b30      	subs	r3, #48	@ 0x30
 8000ad4:	4a19      	ldr	r2, [pc, #100]	@ (8000b3c <server_on+0x580>)
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fcf6 	bl	80004cc <Server_Send>
}
 8000ae0:	e022      	b.n	8000b28 <server_on+0x56c>
			else if(strstr((char*)ESP_Response,"/ ")!=NULL){
 8000ae2:	4923      	ldr	r1, [pc, #140]	@ (8000b70 <server_on+0x5b4>)
 8000ae4:	4813      	ldr	r0, [pc, #76]	@ (8000b34 <server_on+0x578>)
 8000ae6:	f002 fbab 	bl	8003240 <strstr>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d01b      	beq.n	8000b28 <server_on+0x56c>
				Server_Send(Link_ID-48, home);
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <server_on+0x57c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3b30      	subs	r3, #48	@ 0x30
 8000af6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b74 <server_on+0x5b8>)
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fce5 	bl	80004cc <Server_Send>
				Flag_Response = 0;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <server_on+0x58c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
				WaitForResponse(10000, "\r\n", "ERROR\r\n");
 8000b08:	4a10      	ldr	r2, [pc, #64]	@ (8000b4c <server_on+0x590>)
 8000b0a:	4911      	ldr	r1, [pc, #68]	@ (8000b50 <server_on+0x594>)
 8000b0c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000b10:	f7ff fb50 	bl	80001b4 <WaitForResponse>
				if(Flag_Response == 1) memset(ESP_Response,0,sizeof(ESP_Response));
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <server_on+0x58c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d105      	bne.n	8000b28 <server_on+0x56c>
 8000b1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b20:	2100      	movs	r1, #0
 8000b22:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <server_on+0x578>)
 8000b24:	f002 fb1b 	bl	800315e <memset>
}
 8000b28:	bf00      	nop
 8000b2a:	3724      	adds	r7, #36	@ 0x24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b30:	08005238 	.word	0x08005238
 8000b34:	200000ac 	.word	0x200000ac
 8000b38:	2000000f 	.word	0x2000000f
 8000b3c:	2000001c 	.word	0x2000001c
 8000b40:	08005244 	.word	0x08005244
 8000b44:	20000568 	.word	0x20000568
 8000b48:	200004d0 	.word	0x200004d0
 8000b4c:	08005100 	.word	0x08005100
 8000b50:	080051c4 	.word	0x080051c4
 8000b54:	0800524c 	.word	0x0800524c
 8000b58:	08005254 	.word	0x08005254
 8000b5c:	0800525c 	.word	0x0800525c
 8000b60:	08005260 	.word	0x08005260
 8000b64:	66666667 	.word	0x66666667
 8000b68:	08005264 	.word	0x08005264
 8000b6c:	20000494 	.word	0x20000494
 8000b70:	0800527c 	.word	0x0800527c
 8000b74:	20000014 	.word	0x20000014

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fb70 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f80d 	bl	8000b9e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 f8ca 	bl	8000d1c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b88:	f000 f874 	bl	8000c74 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000b8c:	f000 f848 	bl	8000c20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 f89a 	bl	8000cc8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ESP_INIT();
 8000b94:	f7ff fb9c 	bl	80002d0 <ESP_INIT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  server_on();
 8000b98:	f7ff fd10 	bl	80005bc <server_on>
 8000b9c:	e7fc      	b.n	8000b98 <main+0x20>

08000b9e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b090      	sub	sp, #64	@ 0x40
 8000ba2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba4:	f107 0318 	add.w	r3, r7, #24
 8000ba8:	2228      	movs	r2, #40	@ 0x28
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 fad6 	bl	800315e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc8:	2310      	movs	r3, #16
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bd4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 ff1e 	bl	8001a20 <HAL_RCC_OscConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bea:	f000 f905 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bee:	230f      	movs	r3, #15
 8000bf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2102      	movs	r1, #2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f98b 	bl	8001f24 <HAL_RCC_ClockConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c14:	f000 f8f0 	bl	8000df8 <Error_Handler>
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3740      	adds	r7, #64	@ 0x40
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	@ (8000c70 <MX_USART1_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c58:	f001 faf2 	bl	8002240 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 f8c9 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200004d8 	.word	0x200004d8
 8000c70:	40013800 	.word	0x40013800

08000c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	@ (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f001 fac8 	bl	8002240 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f000 f89f 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000520 	.word	0x20000520
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <MX_USART3_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	@ (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000d00:	f001 fa9e 	bl	8002240 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f000 f875 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000568 	.word	0x20000568
 8000d18:	40004800 	.word	0x40004800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d30:	4b2d      	ldr	r3, [pc, #180]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a2c      	ldr	r2, [pc, #176]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d48:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a26      	ldr	r2, [pc, #152]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a20      	ldr	r2, [pc, #128]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d7e:	f043 0308 	orr.w	r3, r3, #8
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_GPIO_Init+0xcc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0308 	and.w	r3, r3, #8
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	4815      	ldr	r0, [pc, #84]	@ (8000dec <MX_GPIO_Init+0xd0>)
 8000d96:	f000 fe09 	bl	80019ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <MX_GPIO_Init+0xd4>)
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <MX_GPIO_Init+0xd8>)
 8000db0:	f000 fc78 	bl	80016a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db4:	2320      	movs	r3, #32
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4808      	ldr	r0, [pc, #32]	@ (8000dec <MX_GPIO_Init+0xd0>)
 8000dcc:	f000 fc6a 	bl	80016a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2028      	movs	r0, #40	@ 0x28
 8000dd6:	f000 fb7c 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dda:	2028      	movs	r0, #40	@ 0x28
 8000ddc:	f000 fb95 	bl	800150a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de0:	bf00      	nop
 8000de2:	3720      	adds	r7, #32
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	10110000 	.word	0x10110000
 8000df4:	40011000 	.word	0x40011000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e64 <HAL_MspInit+0x60>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <HAL_MspInit+0x60>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	@ 0x38
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a5a      	ldr	r2, [pc, #360]	@ (8000fec <HAL_UART_MspInit+0x184>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d13a      	bne.n	8000efe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e88:	4b59      	ldr	r3, [pc, #356]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a58      	ldr	r2, [pc, #352]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b56      	ldr	r3, [pc, #344]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b53      	ldr	r3, [pc, #332]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a52      	ldr	r2, [pc, #328]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b50      	ldr	r3, [pc, #320]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4849      	ldr	r0, [pc, #292]	@ (8000ff4 <HAL_UART_MspInit+0x18c>)
 8000ece:	f000 fbe9 	bl	80016a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ed2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4843      	ldr	r0, [pc, #268]	@ (8000ff4 <HAL_UART_MspInit+0x18c>)
 8000ee8:	f000 fbdc 	bl	80016a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2025      	movs	r0, #37	@ 0x25
 8000ef2:	f000 faee 	bl	80014d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ef6:	2025      	movs	r0, #37	@ 0x25
 8000ef8:	f000 fb07 	bl	800150a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000efc:	e072      	b.n	8000fe4 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a3d      	ldr	r2, [pc, #244]	@ (8000ff8 <HAL_UART_MspInit+0x190>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d124      	bne.n	8000f52 <HAL_UART_MspInit+0xea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f08:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a38      	ldr	r2, [pc, #224]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f12:	61d3      	str	r3, [r2, #28]
 8000f14:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b33      	ldr	r3, [pc, #204]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a32      	ldr	r2, [pc, #200]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2302      	movs	r3, #2
 8000f42:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f48:	4619      	mov	r1, r3
 8000f4a:	482a      	ldr	r0, [pc, #168]	@ (8000ff4 <HAL_UART_MspInit+0x18c>)
 8000f4c:	f000 fbaa 	bl	80016a4 <HAL_GPIO_Init>
}
 8000f50:	e048      	b.n	8000fe4 <HAL_UART_MspInit+0x17c>
  else if(huart->Instance==USART3)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a29      	ldr	r2, [pc, #164]	@ (8000ffc <HAL_UART_MspInit+0x194>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d143      	bne.n	8000fe4 <HAL_UART_MspInit+0x17c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5c:	4b24      	ldr	r3, [pc, #144]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	4a23      	ldr	r2, [pc, #140]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f66:	61d3      	str	r3, [r2, #28]
 8000f68:	4b21      	ldr	r3, [pc, #132]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff0 <HAL_UART_MspInit+0x188>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0310 	and.w	r3, r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4817      	ldr	r0, [pc, #92]	@ (8001000 <HAL_UART_MspInit+0x198>)
 8000fa2:	f000 fb7f 	bl	80016a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fa6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4811      	ldr	r0, [pc, #68]	@ (8001000 <HAL_UART_MspInit+0x198>)
 8000fbc:	f000 fb72 	bl	80016a4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_UART_MspInit+0x19c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000fde:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <HAL_UART_MspInit+0x19c>)
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe2:	6053      	str	r3, [r2, #4]
}
 8000fe4:	bf00      	nop
 8000fe6:	3738      	adds	r7, #56	@ 0x38
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40013800 	.word	0x40013800
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40004400 	.word	0x40004400
 8000ffc:	40004800 	.word	0x40004800
 8001000:	40011000 	.word	0x40011000
 8001004:	40010000 	.word	0x40010000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <NMI_Handler+0x4>

08001010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <MemManage_Handler+0x4>

08001020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <UsageFault_Handler+0x4>

08001030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001058:	f000 f948 	bl	80012ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <USART1_IRQHandler+0x10>)
 8001066:	f001 f9eb 	bl	8002440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200004d8 	.word	0x200004d8

08001074 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001078:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800107c:	f000 fcae 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <_kill>:

int _kill(int pid, int sig)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800109c:	f002 f92c 	bl	80032f8 <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2216      	movs	r2, #22
 80010a4:	601a      	str	r2, [r3, #0]
  return -1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_exit>:

void _exit (int status)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010ba:	f04f 31ff 	mov.w	r1, #4294967295
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffe7 	bl	8001092 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <_exit+0x12>

080010c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
  }

  return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e009      	b.n	8001128 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf1      	blt.n	8001114 <_write+0x12>
  }
  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_close>:

int _close(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001160:	605a      	str	r2, [r3, #4]
  return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <_isatty>:

int _isatty(int file)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f002 f894 	bl	80032f8 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	@ (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20005000 	.word	0x20005000
 80011fc:	00000400 	.word	0x00000400
 8001200:	200005b0 	.word	0x200005b0
 8001204:	20000708 	.word	0x20000708

08001208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001214:	f7ff fff8 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800121a:	490c      	ldr	r1, [pc, #48]	@ (800124c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800121c:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <LoopFillZerobss+0x16>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001220:	e002      	b.n	8001228 <LoopCopyDataInit>

08001222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001226:	3304      	adds	r3, #4

08001228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800122c:	d3f9      	bcc.n	8001222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001230:	4c09      	ldr	r4, [pc, #36]	@ (8001258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001234:	e001      	b.n	800123a <LoopFillZerobss>

08001236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001238:	3204      	adds	r2, #4

0800123a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800123c:	d3fb      	bcc.n	8001236 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800123e:	f002 f861 	bl	8003304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001242:	f7ff fc99 	bl	8000b78 <main>
  bx lr
 8001246:	4770      	bx	lr
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001250:	0800539c 	.word	0x0800539c
  ldr r2, =_sbss
 8001254:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001258:	20000704 	.word	0x20000704

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>
	...

08001260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_Init+0x28>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_Init+0x28>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001270:	2003      	movs	r0, #3
 8001272:	f000 f923 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f808 	bl	800128c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800127c:	f7ff fdc2 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <HAL_InitTick+0x54>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0x58>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f93b 	bl	8001526 <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00e      	b.n	80012d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d80a      	bhi.n	80012d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c0:	2200      	movs	r2, #0
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f000 f903 	bl	80014d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_InitTick+0x5c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e000      	b.n	80012d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000024 	.word	0x20000024
 80012e4:	2000002c 	.word	0x2000002c
 80012e8:	20000028 	.word	0x20000028

080012ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <HAL_IncTick+0x1c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_IncTick+0x20>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	4a03      	ldr	r2, [pc, #12]	@ (800130c <HAL_IncTick+0x20>)
 80012fe:	6013      	str	r3, [r2, #0]
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	2000002c 	.word	0x2000002c
 800130c:	200005b4 	.word	0x200005b4

08001310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b02      	ldr	r3, [pc, #8]	@ (8001320 <HAL_GetTick+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	200005b4 	.word	0x200005b4

08001324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800134c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001356:	4a04      	ldr	r2, [pc, #16]	@ (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	60d3      	str	r3, [r2, #12]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	@ (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4906      	ldr	r1, [pc, #24]	@ (80013bc <__NVIC_EnableIRQ+0x34>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	e000e100 	.word	0xe000e100

080013c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	6039      	str	r1, [r7, #0]
 80013ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	db0a      	blt.n	80013ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	490c      	ldr	r1, [pc, #48]	@ (800140c <__NVIC_SetPriority+0x4c>)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	0112      	lsls	r2, r2, #4
 80013e0:	b2d2      	uxtb	r2, r2
 80013e2:	440b      	add	r3, r1
 80013e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e8:	e00a      	b.n	8001400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4908      	ldr	r1, [pc, #32]	@ (8001410 <__NVIC_SetPriority+0x50>)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	3b04      	subs	r3, #4
 80013f8:	0112      	lsls	r2, r2, #4
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	440b      	add	r3, r1
 80013fe:	761a      	strb	r2, [r3, #24]
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	@ 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f1c3 0307 	rsb	r3, r3, #7
 800142e:	2b04      	cmp	r3, #4
 8001430:	bf28      	it	cs
 8001432:	2304      	movcs	r3, #4
 8001434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3304      	adds	r3, #4
 800143a:	2b06      	cmp	r3, #6
 800143c:	d902      	bls.n	8001444 <NVIC_EncodePriority+0x30>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3b03      	subs	r3, #3
 8001442:	e000      	b.n	8001446 <NVIC_EncodePriority+0x32>
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	401a      	ands	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800145c:	f04f 31ff 	mov.w	r1, #4294967295
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa01 f303 	lsl.w	r3, r1, r3
 8001466:	43d9      	mvns	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	4313      	orrs	r3, r2
         );
}
 800146e:	4618      	mov	r0, r3
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff90 	bl	80013c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff2d 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e4:	f7ff ff42 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7ff ff90 	bl	8001414 <NVIC_EncodePriority>
 80014f4:	4602      	mov	r2, r0
 80014f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ff5f 	bl	80013c0 <__NVIC_SetPriority>
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff35 	bl	8001388 <__NVIC_EnableIRQ>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff ffa2 	bl	8001478 <SysTick_Config>
 8001534:	4603      	mov	r3, r0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d008      	beq.n	8001568 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2204      	movs	r2, #4
 800155a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e020      	b.n	80015aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 020e 	bic.w	r2, r2, #14
 8001576:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d005      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2204      	movs	r2, #4
 80015d0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
 80015d6:	e051      	b.n	800167c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020e 	bic.w	r2, r2, #14
 80015e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a22      	ldr	r2, [pc, #136]	@ (8001688 <HAL_DMA_Abort_IT+0xd4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d029      	beq.n	8001656 <HAL_DMA_Abort_IT+0xa2>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a21      	ldr	r2, [pc, #132]	@ (800168c <HAL_DMA_Abort_IT+0xd8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <HAL_DMA_Abort_IT+0x9e>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1f      	ldr	r2, [pc, #124]	@ (8001690 <HAL_DMA_Abort_IT+0xdc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d01a      	beq.n	800164c <HAL_DMA_Abort_IT+0x98>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1e      	ldr	r2, [pc, #120]	@ (8001694 <HAL_DMA_Abort_IT+0xe0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d012      	beq.n	8001646 <HAL_DMA_Abort_IT+0x92>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <HAL_DMA_Abort_IT+0xe4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00a      	beq.n	8001640 <HAL_DMA_Abort_IT+0x8c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <HAL_DMA_Abort_IT+0xe8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d102      	bne.n	800163a <HAL_DMA_Abort_IT+0x86>
 8001634:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001638:	e00e      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 800163a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800163e:	e00b      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001640:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001644:	e008      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164a:	e005      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 800164c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001650:	e002      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001652:	2310      	movs	r3, #16
 8001654:	e000      	b.n	8001658 <HAL_DMA_Abort_IT+0xa4>
 8001656:	2301      	movs	r3, #1
 8001658:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <HAL_DMA_Abort_IT+0xec>)
 800165a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
    } 
  }
  return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40020008 	.word	0x40020008
 800168c:	4002001c 	.word	0x4002001c
 8001690:	40020030 	.word	0x40020030
 8001694:	40020044 	.word	0x40020044
 8001698:	40020058 	.word	0x40020058
 800169c:	4002006c 	.word	0x4002006c
 80016a0:	40020000 	.word	0x40020000

080016a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b08b      	sub	sp, #44	@ 0x2c
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e169      	b.n	800198c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b8:	2201      	movs	r2, #1
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	f040 8158 	bne.w	8001986 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a9a      	ldr	r2, [pc, #616]	@ (8001944 <HAL_GPIO_Init+0x2a0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d05e      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016e0:	4a98      	ldr	r2, [pc, #608]	@ (8001944 <HAL_GPIO_Init+0x2a0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d875      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016e6:	4a98      	ldr	r2, [pc, #608]	@ (8001948 <HAL_GPIO_Init+0x2a4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d058      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016ec:	4a96      	ldr	r2, [pc, #600]	@ (8001948 <HAL_GPIO_Init+0x2a4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d86f      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016f2:	4a96      	ldr	r2, [pc, #600]	@ (800194c <HAL_GPIO_Init+0x2a8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d052      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 80016f8:	4a94      	ldr	r2, [pc, #592]	@ (800194c <HAL_GPIO_Init+0x2a8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d869      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 80016fe:	4a94      	ldr	r2, [pc, #592]	@ (8001950 <HAL_GPIO_Init+0x2ac>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d04c      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001704:	4a92      	ldr	r2, [pc, #584]	@ (8001950 <HAL_GPIO_Init+0x2ac>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d863      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800170a:	4a92      	ldr	r2, [pc, #584]	@ (8001954 <HAL_GPIO_Init+0x2b0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d046      	beq.n	800179e <HAL_GPIO_Init+0xfa>
 8001710:	4a90      	ldr	r2, [pc, #576]	@ (8001954 <HAL_GPIO_Init+0x2b0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d85d      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 8001716:	2b12      	cmp	r3, #18
 8001718:	d82a      	bhi.n	8001770 <HAL_GPIO_Init+0xcc>
 800171a:	2b12      	cmp	r3, #18
 800171c:	d859      	bhi.n	80017d2 <HAL_GPIO_Init+0x12e>
 800171e:	a201      	add	r2, pc, #4	@ (adr r2, 8001724 <HAL_GPIO_Init+0x80>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	0800179f 	.word	0x0800179f
 8001728:	08001779 	.word	0x08001779
 800172c:	0800178b 	.word	0x0800178b
 8001730:	080017cd 	.word	0x080017cd
 8001734:	080017d3 	.word	0x080017d3
 8001738:	080017d3 	.word	0x080017d3
 800173c:	080017d3 	.word	0x080017d3
 8001740:	080017d3 	.word	0x080017d3
 8001744:	080017d3 	.word	0x080017d3
 8001748:	080017d3 	.word	0x080017d3
 800174c:	080017d3 	.word	0x080017d3
 8001750:	080017d3 	.word	0x080017d3
 8001754:	080017d3 	.word	0x080017d3
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017d3 	.word	0x080017d3
 8001760:	080017d3 	.word	0x080017d3
 8001764:	080017d3 	.word	0x080017d3
 8001768:	08001781 	.word	0x08001781
 800176c:	08001795 	.word	0x08001795
 8001770:	4a79      	ldr	r2, [pc, #484]	@ (8001958 <HAL_GPIO_Init+0x2b4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d013      	beq.n	800179e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001776:	e02c      	b.n	80017d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e029      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	3304      	adds	r3, #4
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e024      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	3308      	adds	r3, #8
 8001790:	623b      	str	r3, [r7, #32]
          break;
 8001792:	e01f      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	330c      	adds	r3, #12
 800179a:	623b      	str	r3, [r7, #32]
          break;
 800179c:	e01a      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017a6:	2304      	movs	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e013      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	611a      	str	r2, [r3, #16]
          break;
 80017be:	e009      	b.n	80017d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017c0:	2308      	movs	r3, #8
 80017c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	615a      	str	r2, [r3, #20]
          break;
 80017ca:	e003      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x130>
          break;
 80017d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2bff      	cmp	r3, #255	@ 0xff
 80017d8:	d801      	bhi.n	80017de <HAL_GPIO_Init+0x13a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	e001      	b.n	80017e2 <HAL_GPIO_Init+0x13e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3304      	adds	r3, #4
 80017e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2bff      	cmp	r3, #255	@ 0xff
 80017e8:	d802      	bhi.n	80017f0 <HAL_GPIO_Init+0x14c>
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x152>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	3b08      	subs	r3, #8
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	210f      	movs	r1, #15
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	401a      	ands	r2, r3
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	431a      	orrs	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80b1 	beq.w	8001986 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001824:	4b4d      	ldr	r3, [pc, #308]	@ (800195c <HAL_GPIO_Init+0x2b8>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	4a4c      	ldr	r2, [pc, #304]	@ (800195c <HAL_GPIO_Init+0x2b8>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6193      	str	r3, [r2, #24]
 8001830:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <HAL_GPIO_Init+0x2b8>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800183c:	4a48      	ldr	r2, [pc, #288]	@ (8001960 <HAL_GPIO_Init+0x2bc>)
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001848:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a40      	ldr	r2, [pc, #256]	@ (8001964 <HAL_GPIO_Init+0x2c0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_GPIO_Init+0x1ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a3f      	ldr	r2, [pc, #252]	@ (8001968 <HAL_GPIO_Init+0x2c4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00d      	beq.n	800188c <HAL_GPIO_Init+0x1e8>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3e      	ldr	r2, [pc, #248]	@ (800196c <HAL_GPIO_Init+0x2c8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_Init+0x1e4>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a3d      	ldr	r2, [pc, #244]	@ (8001970 <HAL_GPIO_Init+0x2cc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_GPIO_Init+0x1e0>
 8001880:	2303      	movs	r3, #3
 8001882:	e006      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001884:	2304      	movs	r3, #4
 8001886:	e004      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001888:	2302      	movs	r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_GPIO_Init+0x1ee>
 8001890:	2300      	movs	r3, #0
 8001892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001894:	f002 0203 	and.w	r2, r2, #3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	4093      	lsls	r3, r2
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4313      	orrs	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018a2:	492f      	ldr	r1, [pc, #188]	@ (8001960 <HAL_GPIO_Init+0x2bc>)
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	492c      	ldr	r1, [pc, #176]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4928      	ldr	r1, [pc, #160]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018e4:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4922      	ldr	r1, [pc, #136]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	491e      	ldr	r1, [pc, #120]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d006      	beq.n	800191a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800190c:	4b19      	ldr	r3, [pc, #100]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	4918      	ldr	r1, [pc, #96]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800191a:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	43db      	mvns	r3, r3
 8001922:	4914      	ldr	r1, [pc, #80]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 8001924:	4013      	ands	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d021      	beq.n	8001978 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001934:	4b0f      	ldr	r3, [pc, #60]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	490e      	ldr	r1, [pc, #56]	@ (8001974 <HAL_GPIO_Init+0x2d0>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	600b      	str	r3, [r1, #0]
 8001940:	e021      	b.n	8001986 <HAL_GPIO_Init+0x2e2>
 8001942:	bf00      	nop
 8001944:	10320000 	.word	0x10320000
 8001948:	10310000 	.word	0x10310000
 800194c:	10220000 	.word	0x10220000
 8001950:	10210000 	.word	0x10210000
 8001954:	10120000 	.word	0x10120000
 8001958:	10110000 	.word	0x10110000
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	40010800 	.word	0x40010800
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40011000 	.word	0x40011000
 8001970:	40011400 	.word	0x40011400
 8001974:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001978:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_GPIO_Init+0x304>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	43db      	mvns	r3, r3
 8001980:	4909      	ldr	r1, [pc, #36]	@ (80019a8 <HAL_GPIO_Init+0x304>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	3301      	adds	r3, #1
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	f47f ae8e 	bne.w	80016b8 <HAL_GPIO_Init+0x14>
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	372c      	adds	r7, #44	@ 0x2c
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	40010400 	.word	0x40010400

080019ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
 80019b8:	4613      	mov	r3, r2
 80019ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	041a      	lsls	r2, r3, #16
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	611a      	str	r2, [r3, #16]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e6:	4b08      	ldr	r3, [pc, #32]	@ (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	@ (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f806 	bl	8001a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e272      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a40:	4b92      	ldr	r3, [pc, #584]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4c:	4b8f      	ldr	r3, [pc, #572]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
 8001a58:	4b8c      	ldr	r3, [pc, #560]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b89      	ldr	r3, [pc, #548]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x12c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d168      	bne.n	8001b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e24c      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x76>
 8001a88:	4b80      	ldr	r3, [pc, #512]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e02e      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b78      	ldr	r3, [pc, #480]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a77      	ldr	r2, [pc, #476]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xbc>
 8001ac2:	4b72      	ldr	r3, [pc, #456]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a71      	ldr	r2, [pc, #452]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6f      	ldr	r3, [pc, #444]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001adc:	4b6b      	ldr	r3, [pc, #428]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b68      	ldr	r3, [pc, #416]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a67      	ldr	r2, [pc, #412]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff fc08 	bl	8001310 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fc04 	bl	8001310 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e200      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5d      	ldr	r3, [pc, #372]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe4>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fbf4 	bl	8001310 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff fbf0 	bl	8001310 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1ec      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b53      	ldr	r3, [pc, #332]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x10c>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b66:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
 8001b72:	4b46      	ldr	r3, [pc, #280]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1c0      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4939      	ldr	r1, [pc, #228]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fba9 	bl	8001310 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff fba5 	bl	8001310 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1a1      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4927      	ldr	r1, [pc, #156]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b26      	ldr	r3, [pc, #152]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fb88 	bl	8001310 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7ff fb84 	bl	8001310 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e180      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03a      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d019      	beq.n	8001c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff fb68 	bl	8001310 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff fb64 	bl	8001310 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e160      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0d      	ldr	r3, [pc, #52]	@ (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 face 	bl	8002204 <RCC_Delay>
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff fb4e 	bl	8001310 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7ff fb4a 	bl	8001310 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e146      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	42420000 	.word	0x42420000
 8001c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b92      	ldr	r3, [pc, #584]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e9      	bne.n	8001c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a6 	beq.w	8001dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b88      	ldr	r3, [pc, #544]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a87      	ldr	r2, [pc, #540]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b85      	ldr	r3, [pc, #532]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b82      	ldr	r3, [pc, #520]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fb0b 	bl	8001310 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7ff fb07 	bl	8001310 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	@ 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e103      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b75      	ldr	r3, [pc, #468]	@ (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x312>
 8001d24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a69      	ldr	r2, [pc, #420]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b67      	ldr	r3, [pc, #412]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a66      	ldr	r2, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	e01c      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x356>
 8001d5c:	4b61      	ldr	r3, [pc, #388]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a60      	ldr	r2, [pc, #384]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b58      	ldr	r3, [pc, #352]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a57      	ldr	r2, [pc, #348]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff fabb 	bl	8001310 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff fab7 	bl	8001310 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0b1      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <HAL_RCC_OscConfig+0x37e>
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff faa5 	bl	8001310 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7ff faa1 	bl	8001310 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e09b      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a3b      	ldr	r2, [pc, #236]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8087 	beq.w	8001f16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d061      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d146      	bne.n	8001eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa75 	bl	8001310 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fa71 	bl	8001310 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e06d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4921      	ldr	r1, [pc, #132]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a19      	ldr	r1, [r3, #32]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	430b      	orrs	r3, r1
 8001e76:	491b      	ldr	r1, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fa45 	bl	8001310 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff fa41 	bl	8001310 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46a>
 8001ea8:	e035      	b.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fa2e 	bl	8001310 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7ff fa2a 	bl	8001310 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e026      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x498>
 8001ed6:	e01e      	b.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e019      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <HAL_RCC_OscConfig+0x500>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d0      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b6a      	ldr	r3, [pc, #424]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b67      	ldr	r3, [pc, #412]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4965      	ldr	r1, [pc, #404]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a58      	ldr	r2, [pc, #352]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d040      	beq.n	8002044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	4b41      	ldr	r3, [pc, #260]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e073      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b39      	ldr	r3, [pc, #228]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4936      	ldr	r1, [pc, #216]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002014:	f7ff f97c 	bl	8001310 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7ff f978 	bl	8001310 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e053      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d210      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4922      	ldr	r1, [pc, #136]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209e:	4b12      	ldr	r3, [pc, #72]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	@ (80020ec <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <HAL_RCC_ClockConfig+0x1cc>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_RCC_ClockConfig+0x1d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f8da 	bl	800128c <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08005280 	.word	0x08005280
 80020f0:	20000024 	.word	0x20000024
 80020f4:	20000028 	.word	0x20000028

080020f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <HAL_RCC_GetSysClockFreq+0x94>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b04      	cmp	r3, #4
 8002120:	d002      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x30>
 8002122:	2b08      	cmp	r3, #8
 8002124:	d003      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x36>
 8002126:	e027      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002128:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x98>)
 800212a:	613b      	str	r3, [r7, #16]
      break;
 800212c:	e027      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	0c9b      	lsrs	r3, r3, #18
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <HAL_RCC_GetSysClockFreq+0x94>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	0c5b      	lsrs	r3, r3, #17
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x98>)
 800215a:	fb03 f202 	mul.w	r2, r3, r2
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	e004      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a0c      	ldr	r2, [pc, #48]	@ (800219c <HAL_RCC_GetSysClockFreq+0xa4>)
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_RCC_GetSysClockFreq+0x98>)
 800217a:	613b      	str	r3, [r7, #16]
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	693b      	ldr	r3, [r7, #16]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	007a1200 	.word	0x007a1200
 8002194:	08005298 	.word	0x08005298
 8002198:	080052a8 	.word	0x080052a8
 800219c:	003d0900 	.word	0x003d0900

080021a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a4:	4b02      	ldr	r3, [pc, #8]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr
 80021b0:	20000024 	.word	0x20000024

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff fff2 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	@ (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	@ (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08005290 	.word	0x08005290

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	@ (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08005290 	.word	0x08005290

08002204 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800220c:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <RCC_Delay+0x34>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <RCC_Delay+0x38>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0a5b      	lsrs	r3, r3, #9
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002220:	bf00      	nop
  }
  while (Delay --);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1e5a      	subs	r2, r3, #1
 8002226:	60fa      	str	r2, [r7, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f9      	bne.n	8002220 <RCC_Delay+0x1c>
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr
 8002238:	20000024 	.word	0x20000024
 800223c:	10624dd3 	.word	0x10624dd3

08002240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e042      	b.n	80022d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fdfe 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2224      	movs	r2, #36	@ 0x24
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fdb7 	bl	8002df8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d175      	bne.n	80023ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_UART_Transmit+0x2c>
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e06e      	b.n	80023ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2221      	movs	r2, #33	@ 0x21
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231e:	f7fe fff7 	bl	8001310 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002338:	d108      	bne.n	800234c <HAL_UART_Transmit+0x6c>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d104      	bne.n	800234c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e003      	b.n	8002354 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002354:	e02e      	b.n	80023b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2200      	movs	r2, #0
 800235e:	2180      	movs	r1, #128	@ 0x80
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fb1c 	bl	800299e <UART_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e03a      	b.n	80023ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	3302      	adds	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e007      	b.n	80023a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1cb      	bne.n	8002356 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	@ 0x40
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fae8 	bl	800299e <UART_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e006      	b.n	80023ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	4613      	mov	r3, r2
 8002402:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b20      	cmp	r3, #32
 800240e:	d112      	bne.n	8002436 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_UART_Receive_IT+0x26>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00b      	b.n	8002438 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	461a      	mov	r2, r3
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 fb0f 	bl	8002a50 <UART_Start_Receive_IT>
 8002432:	4603      	mov	r3, r0
 8002434:	e000      	b.n	8002438 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002436:	2302      	movs	r3, #2
  }
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0ba      	sub	sp, #232	@ 0xe8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800247e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800248a:	f003 0320 	and.w	r3, r3, #32
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <HAL_UART_IRQHandler+0x66>
 8002492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fbec 	bl	8002c7c <UART_Receive_IT>
      return;
 80024a4:	e25b      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80de 	beq.w	800266c <HAL_UART_IRQHandler+0x22c>
 80024b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80d1 	beq.w	800266c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_UART_IRQHandler+0xae>
 80024d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d005      	beq.n	80024ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_UART_IRQHandler+0xd2>
 80024fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0202 	orr.w	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_UART_IRQHandler+0xf6>
 800251e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d011      	beq.n	8002566 <HAL_UART_IRQHandler+0x126>
 8002542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800254e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f043 0208 	orr.w	r2, r3, #8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 81f2 	beq.w	8002954 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002574:	f003 0320 	and.w	r3, r3, #32
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_UART_IRQHandler+0x14e>
 800257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb77 	bl	8002c7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <HAL_UART_IRQHandler+0x17a>
 80025b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d04f      	beq.n	800265a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa81 	bl	8002ac2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d041      	beq.n	8002652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3314      	adds	r3, #20
 80025d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80025e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80025ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3314      	adds	r3, #20
 80025f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800260a:	e841 2300 	strex	r3, r2, [r1]
 800260e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1d9      	bne.n	80025ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d013      	beq.n	800264a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002626:	4a7e      	ldr	r2, [pc, #504]	@ (8002820 <HAL_UART_IRQHandler+0x3e0>)
 8002628:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe ffc0 	bl	80015b4 <HAL_DMA_Abort_IT>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002644:	4610      	mov	r0, r2
 8002646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e00e      	b.n	8002668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f993 	bl	8002976 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002650:	e00a      	b.n	8002668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f98f 	bl	8002976 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e006      	b.n	8002668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f98b 	bl	8002976 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002666:	e175      	b.n	8002954 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002668:	bf00      	nop
    return;
 800266a:	e173      	b.n	8002954 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	2b01      	cmp	r3, #1
 8002672:	f040 814f 	bne.w	8002914 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8148 	beq.w	8002914 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8141 	beq.w	8002914 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80b6 	beq.w	8002824 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8145 	beq.w	8002958 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80026d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026d6:	429a      	cmp	r2, r3
 80026d8:	f080 813e 	bcs.w	8002958 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80026e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	f000 8088 	beq.w	8002800 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	330c      	adds	r3, #12
 80026f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026fe:	e853 3f00 	ldrex	r3, [r3]
 8002702:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002706:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800270a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800270e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800271c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002720:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002724:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002728:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800272c:	e841 2300 	strex	r3, r2, [r1]
 8002730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1d9      	bne.n	80026f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3314      	adds	r3, #20
 8002742:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002746:	e853 3f00 	ldrex	r3, [r3]
 800274a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800274c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3314      	adds	r3, #20
 800275c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002760:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002764:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002768:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800276c:	e841 2300 	strex	r3, r2, [r1]
 8002770:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002772:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e1      	bne.n	800273c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3314      	adds	r3, #20
 800277e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800278a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800278e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800279c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800279e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80027a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80027a4:	e841 2300 	strex	r3, r2, [r1]
 80027a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80027aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1e3      	bne.n	8002778 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	330c      	adds	r3, #12
 80027c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80027ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80027e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80027e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80027e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027ea:	e841 2300 	strex	r3, r2, [r1]
 80027ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1e3      	bne.n	80027be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe fe9f 	bl	800153e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800280e:	b29b      	uxth	r3, r3
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	b29b      	uxth	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8b6 	bl	8002988 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800281c:	e09c      	b.n	8002958 <HAL_UART_IRQHandler+0x518>
 800281e:	bf00      	nop
 8002820:	08002b87 	.word	0x08002b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800282c:	b29b      	uxth	r3, r3
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 808e 	beq.w	800295c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8089 	beq.w	800295c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	330c      	adds	r3, #12
 8002850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800285a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800286e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002870:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002876:	e841 2300 	strex	r3, r2, [r1]
 800287a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800287c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1e3      	bne.n	800284a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	623b      	str	r3, [r7, #32]
   return(result);
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80028a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80028a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e3      	bne.n	8002882 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	330c      	adds	r3, #12
 80028e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80028ec:	61fa      	str	r2, [r7, #28]
 80028ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f0:	69b9      	ldr	r1, [r7, #24]
 80028f2:	69fa      	ldr	r2, [r7, #28]
 80028f4:	e841 2300 	strex	r3, r2, [r1]
 80028f8:	617b      	str	r3, [r7, #20]
   return(result);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e3      	bne.n	80028c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800290a:	4619      	mov	r1, r3
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f83b 	bl	8002988 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002912:	e023      	b.n	800295c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_UART_IRQHandler+0x4f4>
 8002920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f93e 	bl	8002bae <UART_Transmit_IT>
    return;
 8002932:	e014      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00e      	beq.n	800295e <HAL_UART_IRQHandler+0x51e>
 8002940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f97d 	bl	8002c4c <UART_EndTransmit_IT>
    return;
 8002952:	e004      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
    return;
 8002954:	bf00      	nop
 8002956:	e002      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
      return;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_UART_IRQHandler+0x51e>
      return;
 800295c:	bf00      	nop
  }
}
 800295e:	37e8      	adds	r7, #232	@ 0xe8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ae:	e03b      	b.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d037      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b8:	f7fe fcaa 	bl	8001310 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	6a3a      	ldr	r2, [r7, #32]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d302      	bcc.n	80029ce <UART_WaitOnFlagUntilTimeout+0x30>
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e03a      	b.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d023      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b80      	cmp	r3, #128	@ 0x80
 80029e4:	d020      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x8a>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b40      	cmp	r3, #64	@ 0x40
 80029ea:	d01d      	beq.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d116      	bne.n	8002a28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f856 	bl	8002ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00f      	b.n	8002a48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d0b4      	beq.n	80029b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	88fa      	ldrh	r2, [r7, #6]
 8002a68:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2222      	movs	r2, #34	@ 0x22
 8002a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr

08002ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b095      	sub	sp, #84	@ 0x54
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002aea:	643a      	str	r2, [r7, #64]	@ 0x40
 8002aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002af0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e5      	bne.n	8002aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	e853 3f00 	ldrex	r3, [r3]
 8002b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3314      	adds	r3, #20
 8002b1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e5      	bne.n	8002afe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d119      	bne.n	8002b6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	e853 3f00 	ldrex	r3, [r3]
 8002b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f023 0310 	bic.w	r3, r3, #16
 8002b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	330c      	adds	r3, #12
 8002b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b5a:	61ba      	str	r2, [r7, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6979      	ldr	r1, [r7, #20]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	613b      	str	r3, [r7, #16]
   return(result);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e5      	bne.n	8002b3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b7c:	bf00      	nop
 8002b7e:	3754      	adds	r7, #84	@ 0x54
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f7ff fee8 	bl	8002976 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b085      	sub	sp, #20
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b21      	cmp	r3, #33	@ 0x21
 8002bc0:	d13e      	bne.n	8002c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bca:	d114      	bne.n	8002bf6 <UART_Transmit_IT+0x48>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d110      	bne.n	8002bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	1c9a      	adds	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	621a      	str	r2, [r3, #32]
 8002bf4:	e008      	b.n	8002c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6211      	str	r1, [r2, #32]
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4619      	mov	r1, r3
 8002c16:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10f      	bne.n	8002c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	e000      	b.n	8002c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c40:	2302      	movs	r3, #2
  }
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7ff fe79 	bl	8002964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	@ 0x30
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b22      	cmp	r3, #34	@ 0x22
 8002c8e:	f040 80ae 	bne.w	8002dee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9a:	d117      	bne.n	8002ccc <UART_Receive_IT+0x50>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d113      	bne.n	8002ccc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	1c9a      	adds	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cca:	e026      	b.n	8002d1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cde:	d007      	beq.n	8002cf0 <UART_Receive_IT+0x74>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <UART_Receive_IT+0x82>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d106      	bne.n	8002cfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e008      	b.n	8002d10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4619      	mov	r1, r3
 8002d28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d15d      	bne.n	8002dea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0220 	bic.w	r2, r2, #32
 8002d3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695a      	ldr	r2, [r3, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d135      	bne.n	8002de0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f023 0310 	bic.w	r3, r3, #16
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	330c      	adds	r3, #12
 8002d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9a:	623a      	str	r2, [r7, #32]
 8002d9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	69f9      	ldr	r1, [r7, #28]
 8002da0:	6a3a      	ldr	r2, [r7, #32]
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e5      	bne.n	8002d7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d10a      	bne.n	8002dd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff fdd5 	bl	8002988 <HAL_UARTEx_RxEventCallback>
 8002dde:	e002      	b.n	8002de6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fd fa33 	bl	800024c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e002      	b.n	8002df0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3730      	adds	r7, #48	@ 0x30
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e32:	f023 030c 	bic.w	r3, r3, #12
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <UART_SetConfig+0x114>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d103      	bne.n	8002e68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e60:	f7ff f9bc 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	e002      	b.n	8002e6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e68:	f7ff f9a4 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8002e6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009a      	lsls	r2, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	4a22      	ldr	r2, [pc, #136]	@ (8002f10 <UART_SetConfig+0x118>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	0119      	lsls	r1, r3, #4
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009a      	lsls	r2, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <UART_SetConfig+0x118>)
 8002ea6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	2064      	movs	r0, #100	@ 0x64
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	3332      	adds	r3, #50	@ 0x32
 8002eb8:	4a15      	ldr	r2, [pc, #84]	@ (8002f10 <UART_SetConfig+0x118>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	095b      	lsrs	r3, r3, #5
 8002ec0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ec4:	4419      	add	r1, r3
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002edc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f10 <UART_SetConfig+0x118>)
 8002ede:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2064      	movs	r0, #100	@ 0x64
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	@ 0x32
 8002ef0:	4a07      	ldr	r2, [pc, #28]	@ (8002f10 <UART_SetConfig+0x118>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 020f 	and.w	r2, r3, #15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	440a      	add	r2, r1
 8002f02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f04:	bf00      	nop
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	51eb851f 	.word	0x51eb851f

08002f14 <std>:
 8002f14:	2300      	movs	r3, #0
 8002f16:	b510      	push	{r4, lr}
 8002f18:	4604      	mov	r4, r0
 8002f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8002f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f22:	6083      	str	r3, [r0, #8]
 8002f24:	8181      	strh	r1, [r0, #12]
 8002f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f28:	81c2      	strh	r2, [r0, #14]
 8002f2a:	6183      	str	r3, [r0, #24]
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	2208      	movs	r2, #8
 8002f30:	305c      	adds	r0, #92	@ 0x5c
 8002f32:	f000 f914 	bl	800315e <memset>
 8002f36:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <std+0x58>)
 8002f38:	6224      	str	r4, [r4, #32]
 8002f3a:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <std+0x5c>)
 8002f3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f40:	4b0c      	ldr	r3, [pc, #48]	@ (8002f74 <std+0x60>)
 8002f42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f44:	4b0c      	ldr	r3, [pc, #48]	@ (8002f78 <std+0x64>)
 8002f46:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f48:	4b0c      	ldr	r3, [pc, #48]	@ (8002f7c <std+0x68>)
 8002f4a:	429c      	cmp	r4, r3
 8002f4c:	d006      	beq.n	8002f5c <std+0x48>
 8002f4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f52:	4294      	cmp	r4, r2
 8002f54:	d002      	beq.n	8002f5c <std+0x48>
 8002f56:	33d0      	adds	r3, #208	@ 0xd0
 8002f58:	429c      	cmp	r4, r3
 8002f5a:	d105      	bne.n	8002f68 <std+0x54>
 8002f5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f64:	f000 b9f2 	b.w	800334c <__retarget_lock_init_recursive>
 8002f68:	bd10      	pop	{r4, pc}
 8002f6a:	bf00      	nop
 8002f6c:	080030d9 	.word	0x080030d9
 8002f70:	080030fb 	.word	0x080030fb
 8002f74:	08003133 	.word	0x08003133
 8002f78:	08003157 	.word	0x08003157
 8002f7c:	200005b8 	.word	0x200005b8

08002f80 <stdio_exit_handler>:
 8002f80:	4a02      	ldr	r2, [pc, #8]	@ (8002f8c <stdio_exit_handler+0xc>)
 8002f82:	4903      	ldr	r1, [pc, #12]	@ (8002f90 <stdio_exit_handler+0x10>)
 8002f84:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <stdio_exit_handler+0x14>)
 8002f86:	f000 b869 	b.w	800305c <_fwalk_sglue>
 8002f8a:	bf00      	nop
 8002f8c:	20000030 	.word	0x20000030
 8002f90:	08003c61 	.word	0x08003c61
 8002f94:	20000040 	.word	0x20000040

08002f98 <cleanup_stdio>:
 8002f98:	6841      	ldr	r1, [r0, #4]
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <cleanup_stdio+0x34>)
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	4299      	cmp	r1, r3
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	d001      	beq.n	8002fa8 <cleanup_stdio+0x10>
 8002fa4:	f000 fe5c 	bl	8003c60 <_fflush_r>
 8002fa8:	68a1      	ldr	r1, [r4, #8]
 8002faa:	4b09      	ldr	r3, [pc, #36]	@ (8002fd0 <cleanup_stdio+0x38>)
 8002fac:	4299      	cmp	r1, r3
 8002fae:	d002      	beq.n	8002fb6 <cleanup_stdio+0x1e>
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f000 fe55 	bl	8003c60 <_fflush_r>
 8002fb6:	68e1      	ldr	r1, [r4, #12]
 8002fb8:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <cleanup_stdio+0x3c>)
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	d004      	beq.n	8002fc8 <cleanup_stdio+0x30>
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc4:	f000 be4c 	b.w	8003c60 <_fflush_r>
 8002fc8:	bd10      	pop	{r4, pc}
 8002fca:	bf00      	nop
 8002fcc:	200005b8 	.word	0x200005b8
 8002fd0:	20000620 	.word	0x20000620
 8002fd4:	20000688 	.word	0x20000688

08002fd8 <global_stdio_init.part.0>:
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <global_stdio_init.part.0+0x30>)
 8002fdc:	4c0b      	ldr	r4, [pc, #44]	@ (800300c <global_stdio_init.part.0+0x34>)
 8002fde:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <global_stdio_init.part.0+0x38>)
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f7ff ff94 	bl	8002f14 <std>
 8002fec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	2109      	movs	r1, #9
 8002ff4:	f7ff ff8e 	bl	8002f14 <std>
 8002ff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003002:	2112      	movs	r1, #18
 8003004:	f7ff bf86 	b.w	8002f14 <std>
 8003008:	200006f0 	.word	0x200006f0
 800300c:	200005b8 	.word	0x200005b8
 8003010:	08002f81 	.word	0x08002f81

08003014 <__sfp_lock_acquire>:
 8003014:	4801      	ldr	r0, [pc, #4]	@ (800301c <__sfp_lock_acquire+0x8>)
 8003016:	f000 b99a 	b.w	800334e <__retarget_lock_acquire_recursive>
 800301a:	bf00      	nop
 800301c:	200006f9 	.word	0x200006f9

08003020 <__sfp_lock_release>:
 8003020:	4801      	ldr	r0, [pc, #4]	@ (8003028 <__sfp_lock_release+0x8>)
 8003022:	f000 b995 	b.w	8003350 <__retarget_lock_release_recursive>
 8003026:	bf00      	nop
 8003028:	200006f9 	.word	0x200006f9

0800302c <__sinit>:
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
 8003030:	f7ff fff0 	bl	8003014 <__sfp_lock_acquire>
 8003034:	6a23      	ldr	r3, [r4, #32]
 8003036:	b11b      	cbz	r3, 8003040 <__sinit+0x14>
 8003038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800303c:	f7ff bff0 	b.w	8003020 <__sfp_lock_release>
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <__sinit+0x28>)
 8003042:	6223      	str	r3, [r4, #32]
 8003044:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <__sinit+0x2c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f5      	bne.n	8003038 <__sinit+0xc>
 800304c:	f7ff ffc4 	bl	8002fd8 <global_stdio_init.part.0>
 8003050:	e7f2      	b.n	8003038 <__sinit+0xc>
 8003052:	bf00      	nop
 8003054:	08002f99 	.word	0x08002f99
 8003058:	200006f0 	.word	0x200006f0

0800305c <_fwalk_sglue>:
 800305c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003060:	4607      	mov	r7, r0
 8003062:	4688      	mov	r8, r1
 8003064:	4614      	mov	r4, r2
 8003066:	2600      	movs	r6, #0
 8003068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800306c:	f1b9 0901 	subs.w	r9, r9, #1
 8003070:	d505      	bpl.n	800307e <_fwalk_sglue+0x22>
 8003072:	6824      	ldr	r4, [r4, #0]
 8003074:	2c00      	cmp	r4, #0
 8003076:	d1f7      	bne.n	8003068 <_fwalk_sglue+0xc>
 8003078:	4630      	mov	r0, r6
 800307a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800307e:	89ab      	ldrh	r3, [r5, #12]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d907      	bls.n	8003094 <_fwalk_sglue+0x38>
 8003084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003088:	3301      	adds	r3, #1
 800308a:	d003      	beq.n	8003094 <_fwalk_sglue+0x38>
 800308c:	4629      	mov	r1, r5
 800308e:	4638      	mov	r0, r7
 8003090:	47c0      	blx	r8
 8003092:	4306      	orrs	r6, r0
 8003094:	3568      	adds	r5, #104	@ 0x68
 8003096:	e7e9      	b.n	800306c <_fwalk_sglue+0x10>

08003098 <siprintf>:
 8003098:	b40e      	push	{r1, r2, r3}
 800309a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800309e:	b500      	push	{lr}
 80030a0:	b09c      	sub	sp, #112	@ 0x70
 80030a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80030a4:	9002      	str	r0, [sp, #8]
 80030a6:	9006      	str	r0, [sp, #24]
 80030a8:	9107      	str	r1, [sp, #28]
 80030aa:	9104      	str	r1, [sp, #16]
 80030ac:	4808      	ldr	r0, [pc, #32]	@ (80030d0 <siprintf+0x38>)
 80030ae:	4909      	ldr	r1, [pc, #36]	@ (80030d4 <siprintf+0x3c>)
 80030b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80030b4:	9105      	str	r1, [sp, #20]
 80030b6:	6800      	ldr	r0, [r0, #0]
 80030b8:	a902      	add	r1, sp, #8
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	f000 fac2 	bl	8003644 <_svfiprintf_r>
 80030c0:	2200      	movs	r2, #0
 80030c2:	9b02      	ldr	r3, [sp, #8]
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	b01c      	add	sp, #112	@ 0x70
 80030c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030cc:	b003      	add	sp, #12
 80030ce:	4770      	bx	lr
 80030d0:	2000003c 	.word	0x2000003c
 80030d4:	ffff0208 	.word	0xffff0208

080030d8 <__sread>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	460c      	mov	r4, r1
 80030dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e0:	f000 f8e6 	bl	80032b0 <_read_r>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	bfab      	itete	ge
 80030e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030ea:	89a3      	ldrhlt	r3, [r4, #12]
 80030ec:	181b      	addge	r3, r3, r0
 80030ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030f2:	bfac      	ite	ge
 80030f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030f6:	81a3      	strhlt	r3, [r4, #12]
 80030f8:	bd10      	pop	{r4, pc}

080030fa <__swrite>:
 80030fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fe:	461f      	mov	r7, r3
 8003100:	898b      	ldrh	r3, [r1, #12]
 8003102:	4605      	mov	r5, r0
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	460c      	mov	r4, r1
 8003108:	4616      	mov	r6, r2
 800310a:	d505      	bpl.n	8003118 <__swrite+0x1e>
 800310c:	2302      	movs	r3, #2
 800310e:	2200      	movs	r2, #0
 8003110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003114:	f000 f8ba 	bl	800328c <_lseek_r>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	4632      	mov	r2, r6
 800311c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003120:	81a3      	strh	r3, [r4, #12]
 8003122:	4628      	mov	r0, r5
 8003124:	463b      	mov	r3, r7
 8003126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800312a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800312e:	f000 b8d1 	b.w	80032d4 <_write_r>

08003132 <__sseek>:
 8003132:	b510      	push	{r4, lr}
 8003134:	460c      	mov	r4, r1
 8003136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800313a:	f000 f8a7 	bl	800328c <_lseek_r>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	bf15      	itete	ne
 8003144:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003146:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800314a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800314e:	81a3      	strheq	r3, [r4, #12]
 8003150:	bf18      	it	ne
 8003152:	81a3      	strhne	r3, [r4, #12]
 8003154:	bd10      	pop	{r4, pc}

08003156 <__sclose>:
 8003156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315a:	f000 b887 	b.w	800326c <_close_r>

0800315e <memset>:
 800315e:	4603      	mov	r3, r0
 8003160:	4402      	add	r2, r0
 8003162:	4293      	cmp	r3, r2
 8003164:	d100      	bne.n	8003168 <memset+0xa>
 8003166:	4770      	bx	lr
 8003168:	f803 1b01 	strb.w	r1, [r3], #1
 800316c:	e7f9      	b.n	8003162 <memset+0x4>

0800316e <strchr>:
 800316e:	4603      	mov	r3, r0
 8003170:	b2c9      	uxtb	r1, r1
 8003172:	4618      	mov	r0, r3
 8003174:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003178:	b112      	cbz	r2, 8003180 <strchr+0x12>
 800317a:	428a      	cmp	r2, r1
 800317c:	d1f9      	bne.n	8003172 <strchr+0x4>
 800317e:	4770      	bx	lr
 8003180:	2900      	cmp	r1, #0
 8003182:	bf18      	it	ne
 8003184:	2000      	movne	r0, #0
 8003186:	4770      	bx	lr

08003188 <strtok>:
 8003188:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <strtok+0x5c>)
 800318a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800318e:	681f      	ldr	r7, [r3, #0]
 8003190:	4605      	mov	r5, r0
 8003192:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003194:	460e      	mov	r6, r1
 8003196:	b9ec      	cbnz	r4, 80031d4 <strtok+0x4c>
 8003198:	2050      	movs	r0, #80	@ 0x50
 800319a:	f000 f941 	bl	8003420 <malloc>
 800319e:	4602      	mov	r2, r0
 80031a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80031a2:	b920      	cbnz	r0, 80031ae <strtok+0x26>
 80031a4:	215b      	movs	r1, #91	@ 0x5b
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <strtok+0x60>)
 80031a8:	4810      	ldr	r0, [pc, #64]	@ (80031ec <strtok+0x64>)
 80031aa:	f000 f8d3 	bl	8003354 <__assert_func>
 80031ae:	e9c0 4400 	strd	r4, r4, [r0]
 80031b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80031b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80031ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80031be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80031c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80031c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80031ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80031ce:	6184      	str	r4, [r0, #24]
 80031d0:	7704      	strb	r4, [r0, #28]
 80031d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80031d4:	4631      	mov	r1, r6
 80031d6:	4628      	mov	r0, r5
 80031d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031da:	2301      	movs	r3, #1
 80031dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80031e0:	f000 b806 	b.w	80031f0 <__strtok_r>
 80031e4:	2000003c 	.word	0x2000003c
 80031e8:	080052aa 	.word	0x080052aa
 80031ec:	080052c1 	.word	0x080052c1

080031f0 <__strtok_r>:
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	4604      	mov	r4, r0
 80031f4:	b908      	cbnz	r0, 80031fa <__strtok_r+0xa>
 80031f6:	6814      	ldr	r4, [r2, #0]
 80031f8:	b144      	cbz	r4, 800320c <__strtok_r+0x1c>
 80031fa:	460f      	mov	r7, r1
 80031fc:	4620      	mov	r0, r4
 80031fe:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003202:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003206:	b91e      	cbnz	r6, 8003210 <__strtok_r+0x20>
 8003208:	b965      	cbnz	r5, 8003224 <__strtok_r+0x34>
 800320a:	6015      	str	r5, [r2, #0]
 800320c:	2000      	movs	r0, #0
 800320e:	e005      	b.n	800321c <__strtok_r+0x2c>
 8003210:	42b5      	cmp	r5, r6
 8003212:	d1f6      	bne.n	8003202 <__strtok_r+0x12>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <__strtok_r+0xa>
 8003218:	6014      	str	r4, [r2, #0]
 800321a:	7003      	strb	r3, [r0, #0]
 800321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321e:	461c      	mov	r4, r3
 8003220:	e00c      	b.n	800323c <__strtok_r+0x4c>
 8003222:	b915      	cbnz	r5, 800322a <__strtok_r+0x3a>
 8003224:	460e      	mov	r6, r1
 8003226:	f814 3b01 	ldrb.w	r3, [r4], #1
 800322a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800322e:	42ab      	cmp	r3, r5
 8003230:	d1f7      	bne.n	8003222 <__strtok_r+0x32>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f3      	beq.n	800321e <__strtok_r+0x2e>
 8003236:	2300      	movs	r3, #0
 8003238:	f804 3c01 	strb.w	r3, [r4, #-1]
 800323c:	6014      	str	r4, [r2, #0]
 800323e:	e7ed      	b.n	800321c <__strtok_r+0x2c>

08003240 <strstr>:
 8003240:	780a      	ldrb	r2, [r1, #0]
 8003242:	b570      	push	{r4, r5, r6, lr}
 8003244:	b96a      	cbnz	r2, 8003262 <strstr+0x22>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	429a      	cmp	r2, r3
 800324a:	d109      	bne.n	8003260 <strstr+0x20>
 800324c:	460c      	mov	r4, r1
 800324e:	4605      	mov	r5, r0
 8003250:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f6      	beq.n	8003246 <strstr+0x6>
 8003258:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800325c:	429e      	cmp	r6, r3
 800325e:	d0f7      	beq.n	8003250 <strstr+0x10>
 8003260:	3001      	adds	r0, #1
 8003262:	7803      	ldrb	r3, [r0, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ef      	bne.n	8003248 <strstr+0x8>
 8003268:	4618      	mov	r0, r3
 800326a:	e7ec      	b.n	8003246 <strstr+0x6>

0800326c <_close_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	2300      	movs	r3, #0
 8003270:	4d05      	ldr	r5, [pc, #20]	@ (8003288 <_close_r+0x1c>)
 8003272:	4604      	mov	r4, r0
 8003274:	4608      	mov	r0, r1
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	f7fd ff5f 	bl	800113a <_close>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_close_r+0x1a>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	b103      	cbz	r3, 8003286 <_close_r+0x1a>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	200006f4 	.word	0x200006f4

0800328c <_lseek_r>:
 800328c:	b538      	push	{r3, r4, r5, lr}
 800328e:	4604      	mov	r4, r0
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	2200      	movs	r2, #0
 8003296:	4d05      	ldr	r5, [pc, #20]	@ (80032ac <_lseek_r+0x20>)
 8003298:	602a      	str	r2, [r5, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	f7fd ff71 	bl	8001182 <_lseek>
 80032a0:	1c43      	adds	r3, r0, #1
 80032a2:	d102      	bne.n	80032aa <_lseek_r+0x1e>
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	b103      	cbz	r3, 80032aa <_lseek_r+0x1e>
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	bd38      	pop	{r3, r4, r5, pc}
 80032ac:	200006f4 	.word	0x200006f4

080032b0 <_read_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	4604      	mov	r4, r0
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	2200      	movs	r2, #0
 80032ba:	4d05      	ldr	r5, [pc, #20]	@ (80032d0 <_read_r+0x20>)
 80032bc:	602a      	str	r2, [r5, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	f7fd ff02 	bl	80010c8 <_read>
 80032c4:	1c43      	adds	r3, r0, #1
 80032c6:	d102      	bne.n	80032ce <_read_r+0x1e>
 80032c8:	682b      	ldr	r3, [r5, #0]
 80032ca:	b103      	cbz	r3, 80032ce <_read_r+0x1e>
 80032cc:	6023      	str	r3, [r4, #0]
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
 80032d0:	200006f4 	.word	0x200006f4

080032d4 <_write_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4604      	mov	r4, r0
 80032d8:	4608      	mov	r0, r1
 80032da:	4611      	mov	r1, r2
 80032dc:	2200      	movs	r2, #0
 80032de:	4d05      	ldr	r5, [pc, #20]	@ (80032f4 <_write_r+0x20>)
 80032e0:	602a      	str	r2, [r5, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f7fd ff0d 	bl	8001102 <_write>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	d102      	bne.n	80032f2 <_write_r+0x1e>
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	b103      	cbz	r3, 80032f2 <_write_r+0x1e>
 80032f0:	6023      	str	r3, [r4, #0]
 80032f2:	bd38      	pop	{r3, r4, r5, pc}
 80032f4:	200006f4 	.word	0x200006f4

080032f8 <__errno>:
 80032f8:	4b01      	ldr	r3, [pc, #4]	@ (8003300 <__errno+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000003c 	.word	0x2000003c

08003304 <__libc_init_array>:
 8003304:	b570      	push	{r4, r5, r6, lr}
 8003306:	2600      	movs	r6, #0
 8003308:	4d0c      	ldr	r5, [pc, #48]	@ (800333c <__libc_init_array+0x38>)
 800330a:	4c0d      	ldr	r4, [pc, #52]	@ (8003340 <__libc_init_array+0x3c>)
 800330c:	1b64      	subs	r4, r4, r5
 800330e:	10a4      	asrs	r4, r4, #2
 8003310:	42a6      	cmp	r6, r4
 8003312:	d109      	bne.n	8003328 <__libc_init_array+0x24>
 8003314:	f000 fffc 	bl	8004310 <_init>
 8003318:	2600      	movs	r6, #0
 800331a:	4d0a      	ldr	r5, [pc, #40]	@ (8003344 <__libc_init_array+0x40>)
 800331c:	4c0a      	ldr	r4, [pc, #40]	@ (8003348 <__libc_init_array+0x44>)
 800331e:	1b64      	subs	r4, r4, r5
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	42a6      	cmp	r6, r4
 8003324:	d105      	bne.n	8003332 <__libc_init_array+0x2e>
 8003326:	bd70      	pop	{r4, r5, r6, pc}
 8003328:	f855 3b04 	ldr.w	r3, [r5], #4
 800332c:	4798      	blx	r3
 800332e:	3601      	adds	r6, #1
 8003330:	e7ee      	b.n	8003310 <__libc_init_array+0xc>
 8003332:	f855 3b04 	ldr.w	r3, [r5], #4
 8003336:	4798      	blx	r3
 8003338:	3601      	adds	r6, #1
 800333a:	e7f2      	b.n	8003322 <__libc_init_array+0x1e>
 800333c:	08005394 	.word	0x08005394
 8003340:	08005394 	.word	0x08005394
 8003344:	08005394 	.word	0x08005394
 8003348:	08005398 	.word	0x08005398

0800334c <__retarget_lock_init_recursive>:
 800334c:	4770      	bx	lr

0800334e <__retarget_lock_acquire_recursive>:
 800334e:	4770      	bx	lr

08003350 <__retarget_lock_release_recursive>:
 8003350:	4770      	bx	lr
	...

08003354 <__assert_func>:
 8003354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003356:	4614      	mov	r4, r2
 8003358:	461a      	mov	r2, r3
 800335a:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <__assert_func+0x2c>)
 800335c:	4605      	mov	r5, r0
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68d8      	ldr	r0, [r3, #12]
 8003362:	b954      	cbnz	r4, 800337a <__assert_func+0x26>
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <__assert_func+0x30>)
 8003366:	461c      	mov	r4, r3
 8003368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800336c:	9100      	str	r1, [sp, #0]
 800336e:	462b      	mov	r3, r5
 8003370:	4905      	ldr	r1, [pc, #20]	@ (8003388 <__assert_func+0x34>)
 8003372:	f000 fc9d 	bl	8003cb0 <fiprintf>
 8003376:	f000 fcf3 	bl	8003d60 <abort>
 800337a:	4b04      	ldr	r3, [pc, #16]	@ (800338c <__assert_func+0x38>)
 800337c:	e7f4      	b.n	8003368 <__assert_func+0x14>
 800337e:	bf00      	nop
 8003380:	2000003c 	.word	0x2000003c
 8003384:	08005356 	.word	0x08005356
 8003388:	08005328 	.word	0x08005328
 800338c:	0800531b 	.word	0x0800531b

08003390 <_free_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4605      	mov	r5, r0
 8003394:	2900      	cmp	r1, #0
 8003396:	d040      	beq.n	800341a <_free_r+0x8a>
 8003398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800339c:	1f0c      	subs	r4, r1, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bfb8      	it	lt
 80033a2:	18e4      	addlt	r4, r4, r3
 80033a4:	f000 f8e6 	bl	8003574 <__malloc_lock>
 80033a8:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <_free_r+0x8c>)
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	b933      	cbnz	r3, 80033bc <_free_r+0x2c>
 80033ae:	6063      	str	r3, [r4, #4]
 80033b0:	6014      	str	r4, [r2, #0]
 80033b2:	4628      	mov	r0, r5
 80033b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033b8:	f000 b8e2 	b.w	8003580 <__malloc_unlock>
 80033bc:	42a3      	cmp	r3, r4
 80033be:	d908      	bls.n	80033d2 <_free_r+0x42>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf01      	itttt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	1809      	addeq	r1, r1, r0
 80033ce:	6021      	streq	r1, [r4, #0]
 80033d0:	e7ed      	b.n	80033ae <_free_r+0x1e>
 80033d2:	461a      	mov	r2, r3
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b10b      	cbz	r3, 80033dc <_free_r+0x4c>
 80033d8:	42a3      	cmp	r3, r4
 80033da:	d9fa      	bls.n	80033d2 <_free_r+0x42>
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	1850      	adds	r0, r2, r1
 80033e0:	42a0      	cmp	r0, r4
 80033e2:	d10b      	bne.n	80033fc <_free_r+0x6c>
 80033e4:	6820      	ldr	r0, [r4, #0]
 80033e6:	4401      	add	r1, r0
 80033e8:	1850      	adds	r0, r2, r1
 80033ea:	4283      	cmp	r3, r0
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	d1e0      	bne.n	80033b2 <_free_r+0x22>
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4408      	add	r0, r1
 80033f6:	6010      	str	r0, [r2, #0]
 80033f8:	6053      	str	r3, [r2, #4]
 80033fa:	e7da      	b.n	80033b2 <_free_r+0x22>
 80033fc:	d902      	bls.n	8003404 <_free_r+0x74>
 80033fe:	230c      	movs	r3, #12
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	e7d6      	b.n	80033b2 <_free_r+0x22>
 8003404:	6820      	ldr	r0, [r4, #0]
 8003406:	1821      	adds	r1, r4, r0
 8003408:	428b      	cmp	r3, r1
 800340a:	bf01      	itttt	eq
 800340c:	6819      	ldreq	r1, [r3, #0]
 800340e:	685b      	ldreq	r3, [r3, #4]
 8003410:	1809      	addeq	r1, r1, r0
 8003412:	6021      	streq	r1, [r4, #0]
 8003414:	6063      	str	r3, [r4, #4]
 8003416:	6054      	str	r4, [r2, #4]
 8003418:	e7cb      	b.n	80033b2 <_free_r+0x22>
 800341a:	bd38      	pop	{r3, r4, r5, pc}
 800341c:	20000700 	.word	0x20000700

08003420 <malloc>:
 8003420:	4b02      	ldr	r3, [pc, #8]	@ (800342c <malloc+0xc>)
 8003422:	4601      	mov	r1, r0
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	f000 b825 	b.w	8003474 <_malloc_r>
 800342a:	bf00      	nop
 800342c:	2000003c 	.word	0x2000003c

08003430 <sbrk_aligned>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	4e0f      	ldr	r6, [pc, #60]	@ (8003470 <sbrk_aligned+0x40>)
 8003434:	460c      	mov	r4, r1
 8003436:	6831      	ldr	r1, [r6, #0]
 8003438:	4605      	mov	r5, r0
 800343a:	b911      	cbnz	r1, 8003442 <sbrk_aligned+0x12>
 800343c:	f000 fc64 	bl	8003d08 <_sbrk_r>
 8003440:	6030      	str	r0, [r6, #0]
 8003442:	4621      	mov	r1, r4
 8003444:	4628      	mov	r0, r5
 8003446:	f000 fc5f 	bl	8003d08 <_sbrk_r>
 800344a:	1c43      	adds	r3, r0, #1
 800344c:	d103      	bne.n	8003456 <sbrk_aligned+0x26>
 800344e:	f04f 34ff 	mov.w	r4, #4294967295
 8003452:	4620      	mov	r0, r4
 8003454:	bd70      	pop	{r4, r5, r6, pc}
 8003456:	1cc4      	adds	r4, r0, #3
 8003458:	f024 0403 	bic.w	r4, r4, #3
 800345c:	42a0      	cmp	r0, r4
 800345e:	d0f8      	beq.n	8003452 <sbrk_aligned+0x22>
 8003460:	1a21      	subs	r1, r4, r0
 8003462:	4628      	mov	r0, r5
 8003464:	f000 fc50 	bl	8003d08 <_sbrk_r>
 8003468:	3001      	adds	r0, #1
 800346a:	d1f2      	bne.n	8003452 <sbrk_aligned+0x22>
 800346c:	e7ef      	b.n	800344e <sbrk_aligned+0x1e>
 800346e:	bf00      	nop
 8003470:	200006fc 	.word	0x200006fc

08003474 <_malloc_r>:
 8003474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003478:	1ccd      	adds	r5, r1, #3
 800347a:	f025 0503 	bic.w	r5, r5, #3
 800347e:	3508      	adds	r5, #8
 8003480:	2d0c      	cmp	r5, #12
 8003482:	bf38      	it	cc
 8003484:	250c      	movcc	r5, #12
 8003486:	2d00      	cmp	r5, #0
 8003488:	4606      	mov	r6, r0
 800348a:	db01      	blt.n	8003490 <_malloc_r+0x1c>
 800348c:	42a9      	cmp	r1, r5
 800348e:	d904      	bls.n	800349a <_malloc_r+0x26>
 8003490:	230c      	movs	r3, #12
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	2000      	movs	r0, #0
 8003496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800349a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003570 <_malloc_r+0xfc>
 800349e:	f000 f869 	bl	8003574 <__malloc_lock>
 80034a2:	f8d8 3000 	ldr.w	r3, [r8]
 80034a6:	461c      	mov	r4, r3
 80034a8:	bb44      	cbnz	r4, 80034fc <_malloc_r+0x88>
 80034aa:	4629      	mov	r1, r5
 80034ac:	4630      	mov	r0, r6
 80034ae:	f7ff ffbf 	bl	8003430 <sbrk_aligned>
 80034b2:	1c43      	adds	r3, r0, #1
 80034b4:	4604      	mov	r4, r0
 80034b6:	d158      	bne.n	800356a <_malloc_r+0xf6>
 80034b8:	f8d8 4000 	ldr.w	r4, [r8]
 80034bc:	4627      	mov	r7, r4
 80034be:	2f00      	cmp	r7, #0
 80034c0:	d143      	bne.n	800354a <_malloc_r+0xd6>
 80034c2:	2c00      	cmp	r4, #0
 80034c4:	d04b      	beq.n	800355e <_malloc_r+0xea>
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	4639      	mov	r1, r7
 80034ca:	4630      	mov	r0, r6
 80034cc:	eb04 0903 	add.w	r9, r4, r3
 80034d0:	f000 fc1a 	bl	8003d08 <_sbrk_r>
 80034d4:	4581      	cmp	r9, r0
 80034d6:	d142      	bne.n	800355e <_malloc_r+0xea>
 80034d8:	6821      	ldr	r1, [r4, #0]
 80034da:	4630      	mov	r0, r6
 80034dc:	1a6d      	subs	r5, r5, r1
 80034de:	4629      	mov	r1, r5
 80034e0:	f7ff ffa6 	bl	8003430 <sbrk_aligned>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d03a      	beq.n	800355e <_malloc_r+0xea>
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	442b      	add	r3, r5
 80034ec:	6023      	str	r3, [r4, #0]
 80034ee:	f8d8 3000 	ldr.w	r3, [r8]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	bb62      	cbnz	r2, 8003550 <_malloc_r+0xdc>
 80034f6:	f8c8 7000 	str.w	r7, [r8]
 80034fa:	e00f      	b.n	800351c <_malloc_r+0xa8>
 80034fc:	6822      	ldr	r2, [r4, #0]
 80034fe:	1b52      	subs	r2, r2, r5
 8003500:	d420      	bmi.n	8003544 <_malloc_r+0xd0>
 8003502:	2a0b      	cmp	r2, #11
 8003504:	d917      	bls.n	8003536 <_malloc_r+0xc2>
 8003506:	1961      	adds	r1, r4, r5
 8003508:	42a3      	cmp	r3, r4
 800350a:	6025      	str	r5, [r4, #0]
 800350c:	bf18      	it	ne
 800350e:	6059      	strne	r1, [r3, #4]
 8003510:	6863      	ldr	r3, [r4, #4]
 8003512:	bf08      	it	eq
 8003514:	f8c8 1000 	streq.w	r1, [r8]
 8003518:	5162      	str	r2, [r4, r5]
 800351a:	604b      	str	r3, [r1, #4]
 800351c:	4630      	mov	r0, r6
 800351e:	f000 f82f 	bl	8003580 <__malloc_unlock>
 8003522:	f104 000b 	add.w	r0, r4, #11
 8003526:	1d23      	adds	r3, r4, #4
 8003528:	f020 0007 	bic.w	r0, r0, #7
 800352c:	1ac2      	subs	r2, r0, r3
 800352e:	bf1c      	itt	ne
 8003530:	1a1b      	subne	r3, r3, r0
 8003532:	50a3      	strne	r3, [r4, r2]
 8003534:	e7af      	b.n	8003496 <_malloc_r+0x22>
 8003536:	6862      	ldr	r2, [r4, #4]
 8003538:	42a3      	cmp	r3, r4
 800353a:	bf0c      	ite	eq
 800353c:	f8c8 2000 	streq.w	r2, [r8]
 8003540:	605a      	strne	r2, [r3, #4]
 8003542:	e7eb      	b.n	800351c <_malloc_r+0xa8>
 8003544:	4623      	mov	r3, r4
 8003546:	6864      	ldr	r4, [r4, #4]
 8003548:	e7ae      	b.n	80034a8 <_malloc_r+0x34>
 800354a:	463c      	mov	r4, r7
 800354c:	687f      	ldr	r7, [r7, #4]
 800354e:	e7b6      	b.n	80034be <_malloc_r+0x4a>
 8003550:	461a      	mov	r2, r3
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	42a3      	cmp	r3, r4
 8003556:	d1fb      	bne.n	8003550 <_malloc_r+0xdc>
 8003558:	2300      	movs	r3, #0
 800355a:	6053      	str	r3, [r2, #4]
 800355c:	e7de      	b.n	800351c <_malloc_r+0xa8>
 800355e:	230c      	movs	r3, #12
 8003560:	4630      	mov	r0, r6
 8003562:	6033      	str	r3, [r6, #0]
 8003564:	f000 f80c 	bl	8003580 <__malloc_unlock>
 8003568:	e794      	b.n	8003494 <_malloc_r+0x20>
 800356a:	6005      	str	r5, [r0, #0]
 800356c:	e7d6      	b.n	800351c <_malloc_r+0xa8>
 800356e:	bf00      	nop
 8003570:	20000700 	.word	0x20000700

08003574 <__malloc_lock>:
 8003574:	4801      	ldr	r0, [pc, #4]	@ (800357c <__malloc_lock+0x8>)
 8003576:	f7ff beea 	b.w	800334e <__retarget_lock_acquire_recursive>
 800357a:	bf00      	nop
 800357c:	200006f8 	.word	0x200006f8

08003580 <__malloc_unlock>:
 8003580:	4801      	ldr	r0, [pc, #4]	@ (8003588 <__malloc_unlock+0x8>)
 8003582:	f7ff bee5 	b.w	8003350 <__retarget_lock_release_recursive>
 8003586:	bf00      	nop
 8003588:	200006f8 	.word	0x200006f8

0800358c <__ssputs_r>:
 800358c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003590:	461f      	mov	r7, r3
 8003592:	688e      	ldr	r6, [r1, #8]
 8003594:	4682      	mov	sl, r0
 8003596:	42be      	cmp	r6, r7
 8003598:	460c      	mov	r4, r1
 800359a:	4690      	mov	r8, r2
 800359c:	680b      	ldr	r3, [r1, #0]
 800359e:	d82d      	bhi.n	80035fc <__ssputs_r+0x70>
 80035a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80035a8:	d026      	beq.n	80035f8 <__ssputs_r+0x6c>
 80035aa:	6965      	ldr	r5, [r4, #20]
 80035ac:	6909      	ldr	r1, [r1, #16]
 80035ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035b2:	eba3 0901 	sub.w	r9, r3, r1
 80035b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035ba:	1c7b      	adds	r3, r7, #1
 80035bc:	444b      	add	r3, r9
 80035be:	106d      	asrs	r5, r5, #1
 80035c0:	429d      	cmp	r5, r3
 80035c2:	bf38      	it	cc
 80035c4:	461d      	movcc	r5, r3
 80035c6:	0553      	lsls	r3, r2, #21
 80035c8:	d527      	bpl.n	800361a <__ssputs_r+0x8e>
 80035ca:	4629      	mov	r1, r5
 80035cc:	f7ff ff52 	bl	8003474 <_malloc_r>
 80035d0:	4606      	mov	r6, r0
 80035d2:	b360      	cbz	r0, 800362e <__ssputs_r+0xa2>
 80035d4:	464a      	mov	r2, r9
 80035d6:	6921      	ldr	r1, [r4, #16]
 80035d8:	f000 fbb4 	bl	8003d44 <memcpy>
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035e6:	81a3      	strh	r3, [r4, #12]
 80035e8:	6126      	str	r6, [r4, #16]
 80035ea:	444e      	add	r6, r9
 80035ec:	6026      	str	r6, [r4, #0]
 80035ee:	463e      	mov	r6, r7
 80035f0:	6165      	str	r5, [r4, #20]
 80035f2:	eba5 0509 	sub.w	r5, r5, r9
 80035f6:	60a5      	str	r5, [r4, #8]
 80035f8:	42be      	cmp	r6, r7
 80035fa:	d900      	bls.n	80035fe <__ssputs_r+0x72>
 80035fc:	463e      	mov	r6, r7
 80035fe:	4632      	mov	r2, r6
 8003600:	4641      	mov	r1, r8
 8003602:	6820      	ldr	r0, [r4, #0]
 8003604:	f000 fb66 	bl	8003cd4 <memmove>
 8003608:	2000      	movs	r0, #0
 800360a:	68a3      	ldr	r3, [r4, #8]
 800360c:	1b9b      	subs	r3, r3, r6
 800360e:	60a3      	str	r3, [r4, #8]
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	4433      	add	r3, r6
 8003614:	6023      	str	r3, [r4, #0]
 8003616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361a:	462a      	mov	r2, r5
 800361c:	f000 fba7 	bl	8003d6e <_realloc_r>
 8003620:	4606      	mov	r6, r0
 8003622:	2800      	cmp	r0, #0
 8003624:	d1e0      	bne.n	80035e8 <__ssputs_r+0x5c>
 8003626:	4650      	mov	r0, sl
 8003628:	6921      	ldr	r1, [r4, #16]
 800362a:	f7ff feb1 	bl	8003390 <_free_r>
 800362e:	230c      	movs	r3, #12
 8003630:	f8ca 3000 	str.w	r3, [sl]
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	f04f 30ff 	mov.w	r0, #4294967295
 800363a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800363e:	81a3      	strh	r3, [r4, #12]
 8003640:	e7e9      	b.n	8003616 <__ssputs_r+0x8a>
	...

08003644 <_svfiprintf_r>:
 8003644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003648:	4698      	mov	r8, r3
 800364a:	898b      	ldrh	r3, [r1, #12]
 800364c:	4607      	mov	r7, r0
 800364e:	061b      	lsls	r3, r3, #24
 8003650:	460d      	mov	r5, r1
 8003652:	4614      	mov	r4, r2
 8003654:	b09d      	sub	sp, #116	@ 0x74
 8003656:	d510      	bpl.n	800367a <_svfiprintf_r+0x36>
 8003658:	690b      	ldr	r3, [r1, #16]
 800365a:	b973      	cbnz	r3, 800367a <_svfiprintf_r+0x36>
 800365c:	2140      	movs	r1, #64	@ 0x40
 800365e:	f7ff ff09 	bl	8003474 <_malloc_r>
 8003662:	6028      	str	r0, [r5, #0]
 8003664:	6128      	str	r0, [r5, #16]
 8003666:	b930      	cbnz	r0, 8003676 <_svfiprintf_r+0x32>
 8003668:	230c      	movs	r3, #12
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	b01d      	add	sp, #116	@ 0x74
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	2340      	movs	r3, #64	@ 0x40
 8003678:	616b      	str	r3, [r5, #20]
 800367a:	2300      	movs	r3, #0
 800367c:	9309      	str	r3, [sp, #36]	@ 0x24
 800367e:	2320      	movs	r3, #32
 8003680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003684:	2330      	movs	r3, #48	@ 0x30
 8003686:	f04f 0901 	mov.w	r9, #1
 800368a:	f8cd 800c 	str.w	r8, [sp, #12]
 800368e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003828 <_svfiprintf_r+0x1e4>
 8003692:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003696:	4623      	mov	r3, r4
 8003698:	469a      	mov	sl, r3
 800369a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800369e:	b10a      	cbz	r2, 80036a4 <_svfiprintf_r+0x60>
 80036a0:	2a25      	cmp	r2, #37	@ 0x25
 80036a2:	d1f9      	bne.n	8003698 <_svfiprintf_r+0x54>
 80036a4:	ebba 0b04 	subs.w	fp, sl, r4
 80036a8:	d00b      	beq.n	80036c2 <_svfiprintf_r+0x7e>
 80036aa:	465b      	mov	r3, fp
 80036ac:	4622      	mov	r2, r4
 80036ae:	4629      	mov	r1, r5
 80036b0:	4638      	mov	r0, r7
 80036b2:	f7ff ff6b 	bl	800358c <__ssputs_r>
 80036b6:	3001      	adds	r0, #1
 80036b8:	f000 80a7 	beq.w	800380a <_svfiprintf_r+0x1c6>
 80036bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80036be:	445a      	add	r2, fp
 80036c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80036c2:	f89a 3000 	ldrb.w	r3, [sl]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 809f 	beq.w	800380a <_svfiprintf_r+0x1c6>
 80036cc:	2300      	movs	r3, #0
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d6:	f10a 0a01 	add.w	sl, sl, #1
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	9307      	str	r3, [sp, #28]
 80036de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80036e4:	4654      	mov	r4, sl
 80036e6:	2205      	movs	r2, #5
 80036e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ec:	484e      	ldr	r0, [pc, #312]	@ (8003828 <_svfiprintf_r+0x1e4>)
 80036ee:	f000 fb1b 	bl	8003d28 <memchr>
 80036f2:	9a04      	ldr	r2, [sp, #16]
 80036f4:	b9d8      	cbnz	r0, 800372e <_svfiprintf_r+0xea>
 80036f6:	06d0      	lsls	r0, r2, #27
 80036f8:	bf44      	itt	mi
 80036fa:	2320      	movmi	r3, #32
 80036fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003700:	0711      	lsls	r1, r2, #28
 8003702:	bf44      	itt	mi
 8003704:	232b      	movmi	r3, #43	@ 0x2b
 8003706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800370a:	f89a 3000 	ldrb.w	r3, [sl]
 800370e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003710:	d015      	beq.n	800373e <_svfiprintf_r+0xfa>
 8003712:	4654      	mov	r4, sl
 8003714:	2000      	movs	r0, #0
 8003716:	f04f 0c0a 	mov.w	ip, #10
 800371a:	9a07      	ldr	r2, [sp, #28]
 800371c:	4621      	mov	r1, r4
 800371e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003722:	3b30      	subs	r3, #48	@ 0x30
 8003724:	2b09      	cmp	r3, #9
 8003726:	d94b      	bls.n	80037c0 <_svfiprintf_r+0x17c>
 8003728:	b1b0      	cbz	r0, 8003758 <_svfiprintf_r+0x114>
 800372a:	9207      	str	r2, [sp, #28]
 800372c:	e014      	b.n	8003758 <_svfiprintf_r+0x114>
 800372e:	eba0 0308 	sub.w	r3, r0, r8
 8003732:	fa09 f303 	lsl.w	r3, r9, r3
 8003736:	4313      	orrs	r3, r2
 8003738:	46a2      	mov	sl, r4
 800373a:	9304      	str	r3, [sp, #16]
 800373c:	e7d2      	b.n	80036e4 <_svfiprintf_r+0xa0>
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	1d19      	adds	r1, r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9103      	str	r1, [sp, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfbb      	ittet	lt
 800374a:	425b      	neglt	r3, r3
 800374c:	f042 0202 	orrlt.w	r2, r2, #2
 8003750:	9307      	strge	r3, [sp, #28]
 8003752:	9307      	strlt	r3, [sp, #28]
 8003754:	bfb8      	it	lt
 8003756:	9204      	strlt	r2, [sp, #16]
 8003758:	7823      	ldrb	r3, [r4, #0]
 800375a:	2b2e      	cmp	r3, #46	@ 0x2e
 800375c:	d10a      	bne.n	8003774 <_svfiprintf_r+0x130>
 800375e:	7863      	ldrb	r3, [r4, #1]
 8003760:	2b2a      	cmp	r3, #42	@ 0x2a
 8003762:	d132      	bne.n	80037ca <_svfiprintf_r+0x186>
 8003764:	9b03      	ldr	r3, [sp, #12]
 8003766:	3402      	adds	r4, #2
 8003768:	1d1a      	adds	r2, r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	9203      	str	r2, [sp, #12]
 800376e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003772:	9305      	str	r3, [sp, #20]
 8003774:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800382c <_svfiprintf_r+0x1e8>
 8003778:	2203      	movs	r2, #3
 800377a:	4650      	mov	r0, sl
 800377c:	7821      	ldrb	r1, [r4, #0]
 800377e:	f000 fad3 	bl	8003d28 <memchr>
 8003782:	b138      	cbz	r0, 8003794 <_svfiprintf_r+0x150>
 8003784:	2240      	movs	r2, #64	@ 0x40
 8003786:	9b04      	ldr	r3, [sp, #16]
 8003788:	eba0 000a 	sub.w	r0, r0, sl
 800378c:	4082      	lsls	r2, r0
 800378e:	4313      	orrs	r3, r2
 8003790:	3401      	adds	r4, #1
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003798:	2206      	movs	r2, #6
 800379a:	4825      	ldr	r0, [pc, #148]	@ (8003830 <_svfiprintf_r+0x1ec>)
 800379c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80037a0:	f000 fac2 	bl	8003d28 <memchr>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d036      	beq.n	8003816 <_svfiprintf_r+0x1d2>
 80037a8:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <_svfiprintf_r+0x1f0>)
 80037aa:	bb1b      	cbnz	r3, 80037f4 <_svfiprintf_r+0x1b0>
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	3307      	adds	r3, #7
 80037b0:	f023 0307 	bic.w	r3, r3, #7
 80037b4:	3308      	adds	r3, #8
 80037b6:	9303      	str	r3, [sp, #12]
 80037b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ba:	4433      	add	r3, r6
 80037bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80037be:	e76a      	b.n	8003696 <_svfiprintf_r+0x52>
 80037c0:	460c      	mov	r4, r1
 80037c2:	2001      	movs	r0, #1
 80037c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037c8:	e7a8      	b.n	800371c <_svfiprintf_r+0xd8>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f04f 0c0a 	mov.w	ip, #10
 80037d0:	4619      	mov	r1, r3
 80037d2:	3401      	adds	r4, #1
 80037d4:	9305      	str	r3, [sp, #20]
 80037d6:	4620      	mov	r0, r4
 80037d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037dc:	3a30      	subs	r2, #48	@ 0x30
 80037de:	2a09      	cmp	r2, #9
 80037e0:	d903      	bls.n	80037ea <_svfiprintf_r+0x1a6>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0c6      	beq.n	8003774 <_svfiprintf_r+0x130>
 80037e6:	9105      	str	r1, [sp, #20]
 80037e8:	e7c4      	b.n	8003774 <_svfiprintf_r+0x130>
 80037ea:	4604      	mov	r4, r0
 80037ec:	2301      	movs	r3, #1
 80037ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f2:	e7f0      	b.n	80037d6 <_svfiprintf_r+0x192>
 80037f4:	ab03      	add	r3, sp, #12
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	462a      	mov	r2, r5
 80037fa:	4638      	mov	r0, r7
 80037fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003838 <_svfiprintf_r+0x1f4>)
 80037fe:	a904      	add	r1, sp, #16
 8003800:	f3af 8000 	nop.w
 8003804:	1c42      	adds	r2, r0, #1
 8003806:	4606      	mov	r6, r0
 8003808:	d1d6      	bne.n	80037b8 <_svfiprintf_r+0x174>
 800380a:	89ab      	ldrh	r3, [r5, #12]
 800380c:	065b      	lsls	r3, r3, #25
 800380e:	f53f af2d 	bmi.w	800366c <_svfiprintf_r+0x28>
 8003812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003814:	e72c      	b.n	8003670 <_svfiprintf_r+0x2c>
 8003816:	ab03      	add	r3, sp, #12
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	462a      	mov	r2, r5
 800381c:	4638      	mov	r0, r7
 800381e:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <_svfiprintf_r+0x1f4>)
 8003820:	a904      	add	r1, sp, #16
 8003822:	f000 f87d 	bl	8003920 <_printf_i>
 8003826:	e7ed      	b.n	8003804 <_svfiprintf_r+0x1c0>
 8003828:	08005357 	.word	0x08005357
 800382c:	0800535d 	.word	0x0800535d
 8003830:	08005361 	.word	0x08005361
 8003834:	00000000 	.word	0x00000000
 8003838:	0800358d 	.word	0x0800358d

0800383c <_printf_common>:
 800383c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003840:	4616      	mov	r6, r2
 8003842:	4698      	mov	r8, r3
 8003844:	688a      	ldr	r2, [r1, #8]
 8003846:	690b      	ldr	r3, [r1, #16]
 8003848:	4607      	mov	r7, r0
 800384a:	4293      	cmp	r3, r2
 800384c:	bfb8      	it	lt
 800384e:	4613      	movlt	r3, r2
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003856:	460c      	mov	r4, r1
 8003858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800385c:	b10a      	cbz	r2, 8003862 <_printf_common+0x26>
 800385e:	3301      	adds	r3, #1
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	0699      	lsls	r1, r3, #26
 8003866:	bf42      	ittt	mi
 8003868:	6833      	ldrmi	r3, [r6, #0]
 800386a:	3302      	addmi	r3, #2
 800386c:	6033      	strmi	r3, [r6, #0]
 800386e:	6825      	ldr	r5, [r4, #0]
 8003870:	f015 0506 	ands.w	r5, r5, #6
 8003874:	d106      	bne.n	8003884 <_printf_common+0x48>
 8003876:	f104 0a19 	add.w	sl, r4, #25
 800387a:	68e3      	ldr	r3, [r4, #12]
 800387c:	6832      	ldr	r2, [r6, #0]
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	42ab      	cmp	r3, r5
 8003882:	dc2b      	bgt.n	80038dc <_printf_common+0xa0>
 8003884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	3b00      	subs	r3, #0
 800388c:	bf18      	it	ne
 800388e:	2301      	movne	r3, #1
 8003890:	0692      	lsls	r2, r2, #26
 8003892:	d430      	bmi.n	80038f6 <_printf_common+0xba>
 8003894:	4641      	mov	r1, r8
 8003896:	4638      	mov	r0, r7
 8003898:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800389c:	47c8      	blx	r9
 800389e:	3001      	adds	r0, #1
 80038a0:	d023      	beq.n	80038ea <_printf_common+0xae>
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	6922      	ldr	r2, [r4, #16]
 80038a6:	f003 0306 	and.w	r3, r3, #6
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	bf14      	ite	ne
 80038ae:	2500      	movne	r5, #0
 80038b0:	6833      	ldreq	r3, [r6, #0]
 80038b2:	f04f 0600 	mov.w	r6, #0
 80038b6:	bf08      	it	eq
 80038b8:	68e5      	ldreq	r5, [r4, #12]
 80038ba:	f104 041a 	add.w	r4, r4, #26
 80038be:	bf08      	it	eq
 80038c0:	1aed      	subeq	r5, r5, r3
 80038c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80038c6:	bf08      	it	eq
 80038c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bfc4      	itt	gt
 80038d0:	1a9b      	subgt	r3, r3, r2
 80038d2:	18ed      	addgt	r5, r5, r3
 80038d4:	42b5      	cmp	r5, r6
 80038d6:	d11a      	bne.n	800390e <_printf_common+0xd2>
 80038d8:	2000      	movs	r0, #0
 80038da:	e008      	b.n	80038ee <_printf_common+0xb2>
 80038dc:	2301      	movs	r3, #1
 80038de:	4652      	mov	r2, sl
 80038e0:	4641      	mov	r1, r8
 80038e2:	4638      	mov	r0, r7
 80038e4:	47c8      	blx	r9
 80038e6:	3001      	adds	r0, #1
 80038e8:	d103      	bne.n	80038f2 <_printf_common+0xb6>
 80038ea:	f04f 30ff 	mov.w	r0, #4294967295
 80038ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f2:	3501      	adds	r5, #1
 80038f4:	e7c1      	b.n	800387a <_printf_common+0x3e>
 80038f6:	2030      	movs	r0, #48	@ 0x30
 80038f8:	18e1      	adds	r1, r4, r3
 80038fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003904:	4422      	add	r2, r4
 8003906:	3302      	adds	r3, #2
 8003908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800390c:	e7c2      	b.n	8003894 <_printf_common+0x58>
 800390e:	2301      	movs	r3, #1
 8003910:	4622      	mov	r2, r4
 8003912:	4641      	mov	r1, r8
 8003914:	4638      	mov	r0, r7
 8003916:	47c8      	blx	r9
 8003918:	3001      	adds	r0, #1
 800391a:	d0e6      	beq.n	80038ea <_printf_common+0xae>
 800391c:	3601      	adds	r6, #1
 800391e:	e7d9      	b.n	80038d4 <_printf_common+0x98>

08003920 <_printf_i>:
 8003920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	7e0f      	ldrb	r7, [r1, #24]
 8003926:	4691      	mov	r9, r2
 8003928:	2f78      	cmp	r7, #120	@ 0x78
 800392a:	4680      	mov	r8, r0
 800392c:	460c      	mov	r4, r1
 800392e:	469a      	mov	sl, r3
 8003930:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003936:	d807      	bhi.n	8003948 <_printf_i+0x28>
 8003938:	2f62      	cmp	r7, #98	@ 0x62
 800393a:	d80a      	bhi.n	8003952 <_printf_i+0x32>
 800393c:	2f00      	cmp	r7, #0
 800393e:	f000 80d3 	beq.w	8003ae8 <_printf_i+0x1c8>
 8003942:	2f58      	cmp	r7, #88	@ 0x58
 8003944:	f000 80ba 	beq.w	8003abc <_printf_i+0x19c>
 8003948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800394c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003950:	e03a      	b.n	80039c8 <_printf_i+0xa8>
 8003952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003956:	2b15      	cmp	r3, #21
 8003958:	d8f6      	bhi.n	8003948 <_printf_i+0x28>
 800395a:	a101      	add	r1, pc, #4	@ (adr r1, 8003960 <_printf_i+0x40>)
 800395c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003960:	080039b9 	.word	0x080039b9
 8003964:	080039cd 	.word	0x080039cd
 8003968:	08003949 	.word	0x08003949
 800396c:	08003949 	.word	0x08003949
 8003970:	08003949 	.word	0x08003949
 8003974:	08003949 	.word	0x08003949
 8003978:	080039cd 	.word	0x080039cd
 800397c:	08003949 	.word	0x08003949
 8003980:	08003949 	.word	0x08003949
 8003984:	08003949 	.word	0x08003949
 8003988:	08003949 	.word	0x08003949
 800398c:	08003acf 	.word	0x08003acf
 8003990:	080039f7 	.word	0x080039f7
 8003994:	08003a89 	.word	0x08003a89
 8003998:	08003949 	.word	0x08003949
 800399c:	08003949 	.word	0x08003949
 80039a0:	08003af1 	.word	0x08003af1
 80039a4:	08003949 	.word	0x08003949
 80039a8:	080039f7 	.word	0x080039f7
 80039ac:	08003949 	.word	0x08003949
 80039b0:	08003949 	.word	0x08003949
 80039b4:	08003a91 	.word	0x08003a91
 80039b8:	6833      	ldr	r3, [r6, #0]
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6032      	str	r2, [r6, #0]
 80039c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80039c8:	2301      	movs	r3, #1
 80039ca:	e09e      	b.n	8003b0a <_printf_i+0x1ea>
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	1d19      	adds	r1, r3, #4
 80039d2:	6031      	str	r1, [r6, #0]
 80039d4:	0606      	lsls	r6, r0, #24
 80039d6:	d501      	bpl.n	80039dc <_printf_i+0xbc>
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	e003      	b.n	80039e4 <_printf_i+0xc4>
 80039dc:	0645      	lsls	r5, r0, #25
 80039de:	d5fb      	bpl.n	80039d8 <_printf_i+0xb8>
 80039e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80039e4:	2d00      	cmp	r5, #0
 80039e6:	da03      	bge.n	80039f0 <_printf_i+0xd0>
 80039e8:	232d      	movs	r3, #45	@ 0x2d
 80039ea:	426d      	negs	r5, r5
 80039ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039f0:	230a      	movs	r3, #10
 80039f2:	4859      	ldr	r0, [pc, #356]	@ (8003b58 <_printf_i+0x238>)
 80039f4:	e011      	b.n	8003a1a <_printf_i+0xfa>
 80039f6:	6821      	ldr	r1, [r4, #0]
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	0608      	lsls	r0, r1, #24
 80039fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a00:	d402      	bmi.n	8003a08 <_printf_i+0xe8>
 8003a02:	0649      	lsls	r1, r1, #25
 8003a04:	bf48      	it	mi
 8003a06:	b2ad      	uxthmi	r5, r5
 8003a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a0a:	6033      	str	r3, [r6, #0]
 8003a0c:	bf14      	ite	ne
 8003a0e:	230a      	movne	r3, #10
 8003a10:	2308      	moveq	r3, #8
 8003a12:	4851      	ldr	r0, [pc, #324]	@ (8003b58 <_printf_i+0x238>)
 8003a14:	2100      	movs	r1, #0
 8003a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a1a:	6866      	ldr	r6, [r4, #4]
 8003a1c:	2e00      	cmp	r6, #0
 8003a1e:	bfa8      	it	ge
 8003a20:	6821      	ldrge	r1, [r4, #0]
 8003a22:	60a6      	str	r6, [r4, #8]
 8003a24:	bfa4      	itt	ge
 8003a26:	f021 0104 	bicge.w	r1, r1, #4
 8003a2a:	6021      	strge	r1, [r4, #0]
 8003a2c:	b90d      	cbnz	r5, 8003a32 <_printf_i+0x112>
 8003a2e:	2e00      	cmp	r6, #0
 8003a30:	d04b      	beq.n	8003aca <_printf_i+0x1aa>
 8003a32:	4616      	mov	r6, r2
 8003a34:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a38:	fb03 5711 	mls	r7, r3, r1, r5
 8003a3c:	5dc7      	ldrb	r7, [r0, r7]
 8003a3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a42:	462f      	mov	r7, r5
 8003a44:	42bb      	cmp	r3, r7
 8003a46:	460d      	mov	r5, r1
 8003a48:	d9f4      	bls.n	8003a34 <_printf_i+0x114>
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d10b      	bne.n	8003a66 <_printf_i+0x146>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	07df      	lsls	r7, r3, #31
 8003a52:	d508      	bpl.n	8003a66 <_printf_i+0x146>
 8003a54:	6923      	ldr	r3, [r4, #16]
 8003a56:	6861      	ldr	r1, [r4, #4]
 8003a58:	4299      	cmp	r1, r3
 8003a5a:	bfde      	ittt	le
 8003a5c:	2330      	movle	r3, #48	@ 0x30
 8003a5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a66:	1b92      	subs	r2, r2, r6
 8003a68:	6122      	str	r2, [r4, #16]
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4640      	mov	r0, r8
 8003a70:	f8cd a000 	str.w	sl, [sp]
 8003a74:	aa03      	add	r2, sp, #12
 8003a76:	f7ff fee1 	bl	800383c <_printf_common>
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d14a      	bne.n	8003b14 <_printf_i+0x1f4>
 8003a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a82:	b004      	add	sp, #16
 8003a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	f043 0320 	orr.w	r3, r3, #32
 8003a8e:	6023      	str	r3, [r4, #0]
 8003a90:	2778      	movs	r7, #120	@ 0x78
 8003a92:	4832      	ldr	r0, [pc, #200]	@ (8003b5c <_printf_i+0x23c>)
 8003a94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	6831      	ldr	r1, [r6, #0]
 8003a9c:	061f      	lsls	r7, r3, #24
 8003a9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003aa2:	d402      	bmi.n	8003aaa <_printf_i+0x18a>
 8003aa4:	065f      	lsls	r7, r3, #25
 8003aa6:	bf48      	it	mi
 8003aa8:	b2ad      	uxthmi	r5, r5
 8003aaa:	6031      	str	r1, [r6, #0]
 8003aac:	07d9      	lsls	r1, r3, #31
 8003aae:	bf44      	itt	mi
 8003ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab4:	6023      	strmi	r3, [r4, #0]
 8003ab6:	b11d      	cbz	r5, 8003ac0 <_printf_i+0x1a0>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	e7ab      	b.n	8003a14 <_printf_i+0xf4>
 8003abc:	4826      	ldr	r0, [pc, #152]	@ (8003b58 <_printf_i+0x238>)
 8003abe:	e7e9      	b.n	8003a94 <_printf_i+0x174>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	f023 0320 	bic.w	r3, r3, #32
 8003ac6:	6023      	str	r3, [r4, #0]
 8003ac8:	e7f6      	b.n	8003ab8 <_printf_i+0x198>
 8003aca:	4616      	mov	r6, r2
 8003acc:	e7bd      	b.n	8003a4a <_printf_i+0x12a>
 8003ace:	6833      	ldr	r3, [r6, #0]
 8003ad0:	6825      	ldr	r5, [r4, #0]
 8003ad2:	1d18      	adds	r0, r3, #4
 8003ad4:	6961      	ldr	r1, [r4, #20]
 8003ad6:	6030      	str	r0, [r6, #0]
 8003ad8:	062e      	lsls	r6, r5, #24
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	d501      	bpl.n	8003ae2 <_printf_i+0x1c2>
 8003ade:	6019      	str	r1, [r3, #0]
 8003ae0:	e002      	b.n	8003ae8 <_printf_i+0x1c8>
 8003ae2:	0668      	lsls	r0, r5, #25
 8003ae4:	d5fb      	bpl.n	8003ade <_printf_i+0x1be>
 8003ae6:	8019      	strh	r1, [r3, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4616      	mov	r6, r2
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	e7bc      	b.n	8003a6a <_printf_i+0x14a>
 8003af0:	6833      	ldr	r3, [r6, #0]
 8003af2:	2100      	movs	r1, #0
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	6032      	str	r2, [r6, #0]
 8003af8:	681e      	ldr	r6, [r3, #0]
 8003afa:	6862      	ldr	r2, [r4, #4]
 8003afc:	4630      	mov	r0, r6
 8003afe:	f000 f913 	bl	8003d28 <memchr>
 8003b02:	b108      	cbz	r0, 8003b08 <_printf_i+0x1e8>
 8003b04:	1b80      	subs	r0, r0, r6
 8003b06:	6060      	str	r0, [r4, #4]
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	6123      	str	r3, [r4, #16]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b12:	e7aa      	b.n	8003a6a <_printf_i+0x14a>
 8003b14:	4632      	mov	r2, r6
 8003b16:	4649      	mov	r1, r9
 8003b18:	4640      	mov	r0, r8
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	47d0      	blx	sl
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d0ad      	beq.n	8003a7e <_printf_i+0x15e>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	079b      	lsls	r3, r3, #30
 8003b26:	d413      	bmi.n	8003b50 <_printf_i+0x230>
 8003b28:	68e0      	ldr	r0, [r4, #12]
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	4298      	cmp	r0, r3
 8003b2e:	bfb8      	it	lt
 8003b30:	4618      	movlt	r0, r3
 8003b32:	e7a6      	b.n	8003a82 <_printf_i+0x162>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4632      	mov	r2, r6
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	47d0      	blx	sl
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d09d      	beq.n	8003a7e <_printf_i+0x15e>
 8003b42:	3501      	adds	r5, #1
 8003b44:	68e3      	ldr	r3, [r4, #12]
 8003b46:	9903      	ldr	r1, [sp, #12]
 8003b48:	1a5b      	subs	r3, r3, r1
 8003b4a:	42ab      	cmp	r3, r5
 8003b4c:	dcf2      	bgt.n	8003b34 <_printf_i+0x214>
 8003b4e:	e7eb      	b.n	8003b28 <_printf_i+0x208>
 8003b50:	2500      	movs	r5, #0
 8003b52:	f104 0619 	add.w	r6, r4, #25
 8003b56:	e7f5      	b.n	8003b44 <_printf_i+0x224>
 8003b58:	08005368 	.word	0x08005368
 8003b5c:	08005379 	.word	0x08005379

08003b60 <__sflush_r>:
 8003b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	0716      	lsls	r6, r2, #28
 8003b68:	4605      	mov	r5, r0
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	d454      	bmi.n	8003c18 <__sflush_r+0xb8>
 8003b6e:	684b      	ldr	r3, [r1, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	dc02      	bgt.n	8003b7a <__sflush_r+0x1a>
 8003b74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	dd48      	ble.n	8003c0c <__sflush_r+0xac>
 8003b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	d045      	beq.n	8003c0c <__sflush_r+0xac>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b86:	682f      	ldr	r7, [r5, #0]
 8003b88:	6a21      	ldr	r1, [r4, #32]
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	d030      	beq.n	8003bf0 <__sflush_r+0x90>
 8003b8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b90:	89a3      	ldrh	r3, [r4, #12]
 8003b92:	0759      	lsls	r1, r3, #29
 8003b94:	d505      	bpl.n	8003ba2 <__sflush_r+0x42>
 8003b96:	6863      	ldr	r3, [r4, #4]
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b9c:	b10b      	cbz	r3, 8003ba2 <__sflush_r+0x42>
 8003b9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ba0:	1ad2      	subs	r2, r2, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ba8:	6a21      	ldr	r1, [r4, #32]
 8003baa:	47b0      	blx	r6
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	d106      	bne.n	8003bc0 <__sflush_r+0x60>
 8003bb2:	6829      	ldr	r1, [r5, #0]
 8003bb4:	291d      	cmp	r1, #29
 8003bb6:	d82b      	bhi.n	8003c10 <__sflush_r+0xb0>
 8003bb8:	4a28      	ldr	r2, [pc, #160]	@ (8003c5c <__sflush_r+0xfc>)
 8003bba:	410a      	asrs	r2, r1
 8003bbc:	07d6      	lsls	r6, r2, #31
 8003bbe:	d427      	bmi.n	8003c10 <__sflush_r+0xb0>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	6062      	str	r2, [r4, #4]
 8003bc4:	6922      	ldr	r2, [r4, #16]
 8003bc6:	04d9      	lsls	r1, r3, #19
 8003bc8:	6022      	str	r2, [r4, #0]
 8003bca:	d504      	bpl.n	8003bd6 <__sflush_r+0x76>
 8003bcc:	1c42      	adds	r2, r0, #1
 8003bce:	d101      	bne.n	8003bd4 <__sflush_r+0x74>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b903      	cbnz	r3, 8003bd6 <__sflush_r+0x76>
 8003bd4:	6560      	str	r0, [r4, #84]	@ 0x54
 8003bd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bd8:	602f      	str	r7, [r5, #0]
 8003bda:	b1b9      	cbz	r1, 8003c0c <__sflush_r+0xac>
 8003bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003be0:	4299      	cmp	r1, r3
 8003be2:	d002      	beq.n	8003bea <__sflush_r+0x8a>
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7ff fbd3 	bl	8003390 <_free_r>
 8003bea:	2300      	movs	r3, #0
 8003bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bee:	e00d      	b.n	8003c0c <__sflush_r+0xac>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b0      	blx	r6
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	1c50      	adds	r0, r2, #1
 8003bfa:	d1c9      	bne.n	8003b90 <__sflush_r+0x30>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0c6      	beq.n	8003b90 <__sflush_r+0x30>
 8003c02:	2b1d      	cmp	r3, #29
 8003c04:	d001      	beq.n	8003c0a <__sflush_r+0xaa>
 8003c06:	2b16      	cmp	r3, #22
 8003c08:	d11d      	bne.n	8003c46 <__sflush_r+0xe6>
 8003c0a:	602f      	str	r7, [r5, #0]
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e021      	b.n	8003c54 <__sflush_r+0xf4>
 8003c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c14:	b21b      	sxth	r3, r3
 8003c16:	e01a      	b.n	8003c4e <__sflush_r+0xee>
 8003c18:	690f      	ldr	r7, [r1, #16]
 8003c1a:	2f00      	cmp	r7, #0
 8003c1c:	d0f6      	beq.n	8003c0c <__sflush_r+0xac>
 8003c1e:	0793      	lsls	r3, r2, #30
 8003c20:	bf18      	it	ne
 8003c22:	2300      	movne	r3, #0
 8003c24:	680e      	ldr	r6, [r1, #0]
 8003c26:	bf08      	it	eq
 8003c28:	694b      	ldreq	r3, [r1, #20]
 8003c2a:	1bf6      	subs	r6, r6, r7
 8003c2c:	600f      	str	r7, [r1, #0]
 8003c2e:	608b      	str	r3, [r1, #8]
 8003c30:	2e00      	cmp	r6, #0
 8003c32:	ddeb      	ble.n	8003c0c <__sflush_r+0xac>
 8003c34:	4633      	mov	r3, r6
 8003c36:	463a      	mov	r2, r7
 8003c38:	4628      	mov	r0, r5
 8003c3a:	6a21      	ldr	r1, [r4, #32]
 8003c3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003c40:	47e0      	blx	ip
 8003c42:	2800      	cmp	r0, #0
 8003c44:	dc07      	bgt.n	8003c56 <__sflush_r+0xf6>
 8003c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c52:	81a3      	strh	r3, [r4, #12]
 8003c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c56:	4407      	add	r7, r0
 8003c58:	1a36      	subs	r6, r6, r0
 8003c5a:	e7e9      	b.n	8003c30 <__sflush_r+0xd0>
 8003c5c:	dfbffffe 	.word	0xdfbffffe

08003c60 <_fflush_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	690b      	ldr	r3, [r1, #16]
 8003c64:	4605      	mov	r5, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	b913      	cbnz	r3, 8003c70 <_fflush_r+0x10>
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	b118      	cbz	r0, 8003c7a <_fflush_r+0x1a>
 8003c72:	6a03      	ldr	r3, [r0, #32]
 8003c74:	b90b      	cbnz	r3, 8003c7a <_fflush_r+0x1a>
 8003c76:	f7ff f9d9 	bl	800302c <__sinit>
 8003c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f3      	beq.n	8003c6a <_fflush_r+0xa>
 8003c82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c84:	07d0      	lsls	r0, r2, #31
 8003c86:	d404      	bmi.n	8003c92 <_fflush_r+0x32>
 8003c88:	0599      	lsls	r1, r3, #22
 8003c8a:	d402      	bmi.n	8003c92 <_fflush_r+0x32>
 8003c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c8e:	f7ff fb5e 	bl	800334e <__retarget_lock_acquire_recursive>
 8003c92:	4628      	mov	r0, r5
 8003c94:	4621      	mov	r1, r4
 8003c96:	f7ff ff63 	bl	8003b60 <__sflush_r>
 8003c9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	07da      	lsls	r2, r3, #31
 8003ca0:	d4e4      	bmi.n	8003c6c <_fflush_r+0xc>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	059b      	lsls	r3, r3, #22
 8003ca6:	d4e1      	bmi.n	8003c6c <_fflush_r+0xc>
 8003ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003caa:	f7ff fb51 	bl	8003350 <__retarget_lock_release_recursive>
 8003cae:	e7dd      	b.n	8003c6c <_fflush_r+0xc>

08003cb0 <fiprintf>:
 8003cb0:	b40e      	push	{r1, r2, r3}
 8003cb2:	b503      	push	{r0, r1, lr}
 8003cb4:	4601      	mov	r1, r0
 8003cb6:	ab03      	add	r3, sp, #12
 8003cb8:	4805      	ldr	r0, [pc, #20]	@ (8003cd0 <fiprintf+0x20>)
 8003cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cbe:	6800      	ldr	r0, [r0, #0]
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	f000 f8a9 	bl	8003e18 <_vfiprintf_r>
 8003cc6:	b002      	add	sp, #8
 8003cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ccc:	b003      	add	sp, #12
 8003cce:	4770      	bx	lr
 8003cd0:	2000003c 	.word	0x2000003c

08003cd4 <memmove>:
 8003cd4:	4288      	cmp	r0, r1
 8003cd6:	b510      	push	{r4, lr}
 8003cd8:	eb01 0402 	add.w	r4, r1, r2
 8003cdc:	d902      	bls.n	8003ce4 <memmove+0x10>
 8003cde:	4284      	cmp	r4, r0
 8003ce0:	4623      	mov	r3, r4
 8003ce2:	d807      	bhi.n	8003cf4 <memmove+0x20>
 8003ce4:	1e43      	subs	r3, r0, #1
 8003ce6:	42a1      	cmp	r1, r4
 8003ce8:	d008      	beq.n	8003cfc <memmove+0x28>
 8003cea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cf2:	e7f8      	b.n	8003ce6 <memmove+0x12>
 8003cf4:	4601      	mov	r1, r0
 8003cf6:	4402      	add	r2, r0
 8003cf8:	428a      	cmp	r2, r1
 8003cfa:	d100      	bne.n	8003cfe <memmove+0x2a>
 8003cfc:	bd10      	pop	{r4, pc}
 8003cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d06:	e7f7      	b.n	8003cf8 <memmove+0x24>

08003d08 <_sbrk_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4d05      	ldr	r5, [pc, #20]	@ (8003d24 <_sbrk_r+0x1c>)
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fd fa42 	bl	800119c <_sbrk>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_sbrk_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_sbrk_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	200006f4 	.word	0x200006f4

08003d28 <memchr>:
 8003d28:	4603      	mov	r3, r0
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	b2c9      	uxtb	r1, r1
 8003d2e:	4402      	add	r2, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	d101      	bne.n	8003d3a <memchr+0x12>
 8003d36:	2000      	movs	r0, #0
 8003d38:	e003      	b.n	8003d42 <memchr+0x1a>
 8003d3a:	7804      	ldrb	r4, [r0, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	428c      	cmp	r4, r1
 8003d40:	d1f6      	bne.n	8003d30 <memchr+0x8>
 8003d42:	bd10      	pop	{r4, pc}

08003d44 <memcpy>:
 8003d44:	440a      	add	r2, r1
 8003d46:	4291      	cmp	r1, r2
 8003d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d4c:	d100      	bne.n	8003d50 <memcpy+0xc>
 8003d4e:	4770      	bx	lr
 8003d50:	b510      	push	{r4, lr}
 8003d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d56:	4291      	cmp	r1, r2
 8003d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d5c:	d1f9      	bne.n	8003d52 <memcpy+0xe>
 8003d5e:	bd10      	pop	{r4, pc}

08003d60 <abort>:
 8003d60:	2006      	movs	r0, #6
 8003d62:	b508      	push	{r3, lr}
 8003d64:	f000 fa2c 	bl	80041c0 <raise>
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f7fd f9a2 	bl	80010b2 <_exit>

08003d6e <_realloc_r>:
 8003d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d72:	4680      	mov	r8, r0
 8003d74:	4615      	mov	r5, r2
 8003d76:	460c      	mov	r4, r1
 8003d78:	b921      	cbnz	r1, 8003d84 <_realloc_r+0x16>
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d80:	f7ff bb78 	b.w	8003474 <_malloc_r>
 8003d84:	b92a      	cbnz	r2, 8003d92 <_realloc_r+0x24>
 8003d86:	f7ff fb03 	bl	8003390 <_free_r>
 8003d8a:	2400      	movs	r4, #0
 8003d8c:	4620      	mov	r0, r4
 8003d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d92:	f000 fa31 	bl	80041f8 <_malloc_usable_size_r>
 8003d96:	4285      	cmp	r5, r0
 8003d98:	4606      	mov	r6, r0
 8003d9a:	d802      	bhi.n	8003da2 <_realloc_r+0x34>
 8003d9c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003da0:	d8f4      	bhi.n	8003d8c <_realloc_r+0x1e>
 8003da2:	4629      	mov	r1, r5
 8003da4:	4640      	mov	r0, r8
 8003da6:	f7ff fb65 	bl	8003474 <_malloc_r>
 8003daa:	4607      	mov	r7, r0
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d0ec      	beq.n	8003d8a <_realloc_r+0x1c>
 8003db0:	42b5      	cmp	r5, r6
 8003db2:	462a      	mov	r2, r5
 8003db4:	4621      	mov	r1, r4
 8003db6:	bf28      	it	cs
 8003db8:	4632      	movcs	r2, r6
 8003dba:	f7ff ffc3 	bl	8003d44 <memcpy>
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	f7ff fae5 	bl	8003390 <_free_r>
 8003dc6:	463c      	mov	r4, r7
 8003dc8:	e7e0      	b.n	8003d8c <_realloc_r+0x1e>

08003dca <__sfputc_r>:
 8003dca:	6893      	ldr	r3, [r2, #8]
 8003dcc:	b410      	push	{r4}
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	6093      	str	r3, [r2, #8]
 8003dd4:	da07      	bge.n	8003de6 <__sfputc_r+0x1c>
 8003dd6:	6994      	ldr	r4, [r2, #24]
 8003dd8:	42a3      	cmp	r3, r4
 8003dda:	db01      	blt.n	8003de0 <__sfputc_r+0x16>
 8003ddc:	290a      	cmp	r1, #10
 8003dde:	d102      	bne.n	8003de6 <__sfputc_r+0x1c>
 8003de0:	bc10      	pop	{r4}
 8003de2:	f000 b931 	b.w	8004048 <__swbuf_r>
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	1c58      	adds	r0, r3, #1
 8003dea:	6010      	str	r0, [r2, #0]
 8003dec:	7019      	strb	r1, [r3, #0]
 8003dee:	4608      	mov	r0, r1
 8003df0:	bc10      	pop	{r4}
 8003df2:	4770      	bx	lr

08003df4 <__sfputs_r>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	4606      	mov	r6, r0
 8003df8:	460f      	mov	r7, r1
 8003dfa:	4614      	mov	r4, r2
 8003dfc:	18d5      	adds	r5, r2, r3
 8003dfe:	42ac      	cmp	r4, r5
 8003e00:	d101      	bne.n	8003e06 <__sfputs_r+0x12>
 8003e02:	2000      	movs	r0, #0
 8003e04:	e007      	b.n	8003e16 <__sfputs_r+0x22>
 8003e06:	463a      	mov	r2, r7
 8003e08:	4630      	mov	r0, r6
 8003e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e0e:	f7ff ffdc 	bl	8003dca <__sfputc_r>
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d1f3      	bne.n	8003dfe <__sfputs_r+0xa>
 8003e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e18 <_vfiprintf_r>:
 8003e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e1c:	460d      	mov	r5, r1
 8003e1e:	4614      	mov	r4, r2
 8003e20:	4698      	mov	r8, r3
 8003e22:	4606      	mov	r6, r0
 8003e24:	b09d      	sub	sp, #116	@ 0x74
 8003e26:	b118      	cbz	r0, 8003e30 <_vfiprintf_r+0x18>
 8003e28:	6a03      	ldr	r3, [r0, #32]
 8003e2a:	b90b      	cbnz	r3, 8003e30 <_vfiprintf_r+0x18>
 8003e2c:	f7ff f8fe 	bl	800302c <__sinit>
 8003e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e32:	07d9      	lsls	r1, r3, #31
 8003e34:	d405      	bmi.n	8003e42 <_vfiprintf_r+0x2a>
 8003e36:	89ab      	ldrh	r3, [r5, #12]
 8003e38:	059a      	lsls	r2, r3, #22
 8003e3a:	d402      	bmi.n	8003e42 <_vfiprintf_r+0x2a>
 8003e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e3e:	f7ff fa86 	bl	800334e <__retarget_lock_acquire_recursive>
 8003e42:	89ab      	ldrh	r3, [r5, #12]
 8003e44:	071b      	lsls	r3, r3, #28
 8003e46:	d501      	bpl.n	8003e4c <_vfiprintf_r+0x34>
 8003e48:	692b      	ldr	r3, [r5, #16]
 8003e4a:	b99b      	cbnz	r3, 8003e74 <_vfiprintf_r+0x5c>
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4630      	mov	r0, r6
 8003e50:	f000 f938 	bl	80040c4 <__swsetup_r>
 8003e54:	b170      	cbz	r0, 8003e74 <_vfiprintf_r+0x5c>
 8003e56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003e58:	07dc      	lsls	r4, r3, #31
 8003e5a:	d504      	bpl.n	8003e66 <_vfiprintf_r+0x4e>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	b01d      	add	sp, #116	@ 0x74
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	0598      	lsls	r0, r3, #22
 8003e6a:	d4f7      	bmi.n	8003e5c <_vfiprintf_r+0x44>
 8003e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e6e:	f7ff fa6f 	bl	8003350 <__retarget_lock_release_recursive>
 8003e72:	e7f3      	b.n	8003e5c <_vfiprintf_r+0x44>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e78:	2320      	movs	r3, #32
 8003e7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e7e:	2330      	movs	r3, #48	@ 0x30
 8003e80:	f04f 0901 	mov.w	r9, #1
 8003e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e88:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004034 <_vfiprintf_r+0x21c>
 8003e8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e90:	4623      	mov	r3, r4
 8003e92:	469a      	mov	sl, r3
 8003e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e98:	b10a      	cbz	r2, 8003e9e <_vfiprintf_r+0x86>
 8003e9a:	2a25      	cmp	r2, #37	@ 0x25
 8003e9c:	d1f9      	bne.n	8003e92 <_vfiprintf_r+0x7a>
 8003e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8003ea2:	d00b      	beq.n	8003ebc <_vfiprintf_r+0xa4>
 8003ea4:	465b      	mov	r3, fp
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7ff ffa2 	bl	8003df4 <__sfputs_r>
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f000 80a7 	beq.w	8004004 <_vfiprintf_r+0x1ec>
 8003eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eb8:	445a      	add	r2, fp
 8003eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 809f 	beq.w	8004004 <_vfiprintf_r+0x1ec>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ed0:	f10a 0a01 	add.w	sl, sl, #1
 8003ed4:	9304      	str	r3, [sp, #16]
 8003ed6:	9307      	str	r3, [sp, #28]
 8003ed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ede:	4654      	mov	r4, sl
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee6:	4853      	ldr	r0, [pc, #332]	@ (8004034 <_vfiprintf_r+0x21c>)
 8003ee8:	f7ff ff1e 	bl	8003d28 <memchr>
 8003eec:	9a04      	ldr	r2, [sp, #16]
 8003eee:	b9d8      	cbnz	r0, 8003f28 <_vfiprintf_r+0x110>
 8003ef0:	06d1      	lsls	r1, r2, #27
 8003ef2:	bf44      	itt	mi
 8003ef4:	2320      	movmi	r3, #32
 8003ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003efa:	0713      	lsls	r3, r2, #28
 8003efc:	bf44      	itt	mi
 8003efe:	232b      	movmi	r3, #43	@ 0x2b
 8003f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f04:	f89a 3000 	ldrb.w	r3, [sl]
 8003f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f0a:	d015      	beq.n	8003f38 <_vfiprintf_r+0x120>
 8003f0c:	4654      	mov	r4, sl
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f04f 0c0a 	mov.w	ip, #10
 8003f14:	9a07      	ldr	r2, [sp, #28]
 8003f16:	4621      	mov	r1, r4
 8003f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f1c:	3b30      	subs	r3, #48	@ 0x30
 8003f1e:	2b09      	cmp	r3, #9
 8003f20:	d94b      	bls.n	8003fba <_vfiprintf_r+0x1a2>
 8003f22:	b1b0      	cbz	r0, 8003f52 <_vfiprintf_r+0x13a>
 8003f24:	9207      	str	r2, [sp, #28]
 8003f26:	e014      	b.n	8003f52 <_vfiprintf_r+0x13a>
 8003f28:	eba0 0308 	sub.w	r3, r0, r8
 8003f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8003f30:	4313      	orrs	r3, r2
 8003f32:	46a2      	mov	sl, r4
 8003f34:	9304      	str	r3, [sp, #16]
 8003f36:	e7d2      	b.n	8003ede <_vfiprintf_r+0xc6>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	1d19      	adds	r1, r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	9103      	str	r1, [sp, #12]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bfbb      	ittet	lt
 8003f44:	425b      	neglt	r3, r3
 8003f46:	f042 0202 	orrlt.w	r2, r2, #2
 8003f4a:	9307      	strge	r3, [sp, #28]
 8003f4c:	9307      	strlt	r3, [sp, #28]
 8003f4e:	bfb8      	it	lt
 8003f50:	9204      	strlt	r2, [sp, #16]
 8003f52:	7823      	ldrb	r3, [r4, #0]
 8003f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f56:	d10a      	bne.n	8003f6e <_vfiprintf_r+0x156>
 8003f58:	7863      	ldrb	r3, [r4, #1]
 8003f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f5c:	d132      	bne.n	8003fc4 <_vfiprintf_r+0x1ac>
 8003f5e:	9b03      	ldr	r3, [sp, #12]
 8003f60:	3402      	adds	r4, #2
 8003f62:	1d1a      	adds	r2, r3, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	9203      	str	r2, [sp, #12]
 8003f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f6c:	9305      	str	r3, [sp, #20]
 8003f6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004038 <_vfiprintf_r+0x220>
 8003f72:	2203      	movs	r2, #3
 8003f74:	4650      	mov	r0, sl
 8003f76:	7821      	ldrb	r1, [r4, #0]
 8003f78:	f7ff fed6 	bl	8003d28 <memchr>
 8003f7c:	b138      	cbz	r0, 8003f8e <_vfiprintf_r+0x176>
 8003f7e:	2240      	movs	r2, #64	@ 0x40
 8003f80:	9b04      	ldr	r3, [sp, #16]
 8003f82:	eba0 000a 	sub.w	r0, r0, sl
 8003f86:	4082      	lsls	r2, r0
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	3401      	adds	r4, #1
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f92:	2206      	movs	r2, #6
 8003f94:	4829      	ldr	r0, [pc, #164]	@ (800403c <_vfiprintf_r+0x224>)
 8003f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f9a:	f7ff fec5 	bl	8003d28 <memchr>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d03f      	beq.n	8004022 <_vfiprintf_r+0x20a>
 8003fa2:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <_vfiprintf_r+0x228>)
 8003fa4:	bb1b      	cbnz	r3, 8003fee <_vfiprintf_r+0x1d6>
 8003fa6:	9b03      	ldr	r3, [sp, #12]
 8003fa8:	3307      	adds	r3, #7
 8003faa:	f023 0307 	bic.w	r3, r3, #7
 8003fae:	3308      	adds	r3, #8
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fb4:	443b      	add	r3, r7
 8003fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fb8:	e76a      	b.n	8003e90 <_vfiprintf_r+0x78>
 8003fba:	460c      	mov	r4, r1
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc2:	e7a8      	b.n	8003f16 <_vfiprintf_r+0xfe>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f04f 0c0a 	mov.w	ip, #10
 8003fca:	4619      	mov	r1, r3
 8003fcc:	3401      	adds	r4, #1
 8003fce:	9305      	str	r3, [sp, #20]
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fd6:	3a30      	subs	r2, #48	@ 0x30
 8003fd8:	2a09      	cmp	r2, #9
 8003fda:	d903      	bls.n	8003fe4 <_vfiprintf_r+0x1cc>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0c6      	beq.n	8003f6e <_vfiprintf_r+0x156>
 8003fe0:	9105      	str	r1, [sp, #20]
 8003fe2:	e7c4      	b.n	8003f6e <_vfiprintf_r+0x156>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fec:	e7f0      	b.n	8003fd0 <_vfiprintf_r+0x1b8>
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <_vfiprintf_r+0x22c>)
 8003ff8:	a904      	add	r1, sp, #16
 8003ffa:	f3af 8000 	nop.w
 8003ffe:	4607      	mov	r7, r0
 8004000:	1c78      	adds	r0, r7, #1
 8004002:	d1d6      	bne.n	8003fb2 <_vfiprintf_r+0x19a>
 8004004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004006:	07d9      	lsls	r1, r3, #31
 8004008:	d405      	bmi.n	8004016 <_vfiprintf_r+0x1fe>
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	059a      	lsls	r2, r3, #22
 800400e:	d402      	bmi.n	8004016 <_vfiprintf_r+0x1fe>
 8004010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004012:	f7ff f99d 	bl	8003350 <__retarget_lock_release_recursive>
 8004016:	89ab      	ldrh	r3, [r5, #12]
 8004018:	065b      	lsls	r3, r3, #25
 800401a:	f53f af1f 	bmi.w	8003e5c <_vfiprintf_r+0x44>
 800401e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004020:	e71e      	b.n	8003e60 <_vfiprintf_r+0x48>
 8004022:	ab03      	add	r3, sp, #12
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	462a      	mov	r2, r5
 8004028:	4630      	mov	r0, r6
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <_vfiprintf_r+0x22c>)
 800402c:	a904      	add	r1, sp, #16
 800402e:	f7ff fc77 	bl	8003920 <_printf_i>
 8004032:	e7e4      	b.n	8003ffe <_vfiprintf_r+0x1e6>
 8004034:	08005357 	.word	0x08005357
 8004038:	0800535d 	.word	0x0800535d
 800403c:	08005361 	.word	0x08005361
 8004040:	00000000 	.word	0x00000000
 8004044:	08003df5 	.word	0x08003df5

08004048 <__swbuf_r>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	460e      	mov	r6, r1
 800404c:	4614      	mov	r4, r2
 800404e:	4605      	mov	r5, r0
 8004050:	b118      	cbz	r0, 800405a <__swbuf_r+0x12>
 8004052:	6a03      	ldr	r3, [r0, #32]
 8004054:	b90b      	cbnz	r3, 800405a <__swbuf_r+0x12>
 8004056:	f7fe ffe9 	bl	800302c <__sinit>
 800405a:	69a3      	ldr	r3, [r4, #24]
 800405c:	60a3      	str	r3, [r4, #8]
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	071a      	lsls	r2, r3, #28
 8004062:	d501      	bpl.n	8004068 <__swbuf_r+0x20>
 8004064:	6923      	ldr	r3, [r4, #16]
 8004066:	b943      	cbnz	r3, 800407a <__swbuf_r+0x32>
 8004068:	4621      	mov	r1, r4
 800406a:	4628      	mov	r0, r5
 800406c:	f000 f82a 	bl	80040c4 <__swsetup_r>
 8004070:	b118      	cbz	r0, 800407a <__swbuf_r+0x32>
 8004072:	f04f 37ff 	mov.w	r7, #4294967295
 8004076:	4638      	mov	r0, r7
 8004078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	b2f6      	uxtb	r6, r6
 8004080:	1a98      	subs	r0, r3, r2
 8004082:	6963      	ldr	r3, [r4, #20]
 8004084:	4637      	mov	r7, r6
 8004086:	4283      	cmp	r3, r0
 8004088:	dc05      	bgt.n	8004096 <__swbuf_r+0x4e>
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff fde7 	bl	8003c60 <_fflush_r>
 8004092:	2800      	cmp	r0, #0
 8004094:	d1ed      	bne.n	8004072 <__swbuf_r+0x2a>
 8004096:	68a3      	ldr	r3, [r4, #8]
 8004098:	3b01      	subs	r3, #1
 800409a:	60a3      	str	r3, [r4, #8]
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	6022      	str	r2, [r4, #0]
 80040a2:	701e      	strb	r6, [r3, #0]
 80040a4:	6962      	ldr	r2, [r4, #20]
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d004      	beq.n	80040b6 <__swbuf_r+0x6e>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	07db      	lsls	r3, r3, #31
 80040b0:	d5e1      	bpl.n	8004076 <__swbuf_r+0x2e>
 80040b2:	2e0a      	cmp	r6, #10
 80040b4:	d1df      	bne.n	8004076 <__swbuf_r+0x2e>
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7ff fdd1 	bl	8003c60 <_fflush_r>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d0d9      	beq.n	8004076 <__swbuf_r+0x2e>
 80040c2:	e7d6      	b.n	8004072 <__swbuf_r+0x2a>

080040c4 <__swsetup_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4b29      	ldr	r3, [pc, #164]	@ (800416c <__swsetup_r+0xa8>)
 80040c8:	4605      	mov	r5, r0
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	460c      	mov	r4, r1
 80040ce:	b118      	cbz	r0, 80040d8 <__swsetup_r+0x14>
 80040d0:	6a03      	ldr	r3, [r0, #32]
 80040d2:	b90b      	cbnz	r3, 80040d8 <__swsetup_r+0x14>
 80040d4:	f7fe ffaa 	bl	800302c <__sinit>
 80040d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040dc:	0719      	lsls	r1, r3, #28
 80040de:	d422      	bmi.n	8004126 <__swsetup_r+0x62>
 80040e0:	06da      	lsls	r2, r3, #27
 80040e2:	d407      	bmi.n	80040f4 <__swsetup_r+0x30>
 80040e4:	2209      	movs	r2, #9
 80040e6:	602a      	str	r2, [r5, #0]
 80040e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ec:	f04f 30ff 	mov.w	r0, #4294967295
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	e033      	b.n	800415c <__swsetup_r+0x98>
 80040f4:	0758      	lsls	r0, r3, #29
 80040f6:	d512      	bpl.n	800411e <__swsetup_r+0x5a>
 80040f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040fa:	b141      	cbz	r1, 800410e <__swsetup_r+0x4a>
 80040fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004100:	4299      	cmp	r1, r3
 8004102:	d002      	beq.n	800410a <__swsetup_r+0x46>
 8004104:	4628      	mov	r0, r5
 8004106:	f7ff f943 	bl	8003390 <_free_r>
 800410a:	2300      	movs	r3, #0
 800410c:	6363      	str	r3, [r4, #52]	@ 0x34
 800410e:	89a3      	ldrh	r3, [r4, #12]
 8004110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	2300      	movs	r3, #0
 8004118:	6063      	str	r3, [r4, #4]
 800411a:	6923      	ldr	r3, [r4, #16]
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	f043 0308 	orr.w	r3, r3, #8
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	6923      	ldr	r3, [r4, #16]
 8004128:	b94b      	cbnz	r3, 800413e <__swsetup_r+0x7a>
 800412a:	89a3      	ldrh	r3, [r4, #12]
 800412c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004134:	d003      	beq.n	800413e <__swsetup_r+0x7a>
 8004136:	4621      	mov	r1, r4
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f88a 	bl	8004252 <__smakebuf_r>
 800413e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004142:	f013 0201 	ands.w	r2, r3, #1
 8004146:	d00a      	beq.n	800415e <__swsetup_r+0x9a>
 8004148:	2200      	movs	r2, #0
 800414a:	60a2      	str	r2, [r4, #8]
 800414c:	6962      	ldr	r2, [r4, #20]
 800414e:	4252      	negs	r2, r2
 8004150:	61a2      	str	r2, [r4, #24]
 8004152:	6922      	ldr	r2, [r4, #16]
 8004154:	b942      	cbnz	r2, 8004168 <__swsetup_r+0xa4>
 8004156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800415a:	d1c5      	bne.n	80040e8 <__swsetup_r+0x24>
 800415c:	bd38      	pop	{r3, r4, r5, pc}
 800415e:	0799      	lsls	r1, r3, #30
 8004160:	bf58      	it	pl
 8004162:	6962      	ldrpl	r2, [r4, #20]
 8004164:	60a2      	str	r2, [r4, #8]
 8004166:	e7f4      	b.n	8004152 <__swsetup_r+0x8e>
 8004168:	2000      	movs	r0, #0
 800416a:	e7f7      	b.n	800415c <__swsetup_r+0x98>
 800416c:	2000003c 	.word	0x2000003c

08004170 <_raise_r>:
 8004170:	291f      	cmp	r1, #31
 8004172:	b538      	push	{r3, r4, r5, lr}
 8004174:	4605      	mov	r5, r0
 8004176:	460c      	mov	r4, r1
 8004178:	d904      	bls.n	8004184 <_raise_r+0x14>
 800417a:	2316      	movs	r3, #22
 800417c:	6003      	str	r3, [r0, #0]
 800417e:	f04f 30ff 	mov.w	r0, #4294967295
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004186:	b112      	cbz	r2, 800418e <_raise_r+0x1e>
 8004188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800418c:	b94b      	cbnz	r3, 80041a2 <_raise_r+0x32>
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f830 	bl	80041f4 <_getpid_r>
 8004194:	4622      	mov	r2, r4
 8004196:	4601      	mov	r1, r0
 8004198:	4628      	mov	r0, r5
 800419a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800419e:	f000 b817 	b.w	80041d0 <_kill_r>
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d00a      	beq.n	80041bc <_raise_r+0x4c>
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	d103      	bne.n	80041b2 <_raise_r+0x42>
 80041aa:	2316      	movs	r3, #22
 80041ac:	6003      	str	r3, [r0, #0]
 80041ae:	2001      	movs	r0, #1
 80041b0:	e7e7      	b.n	8004182 <_raise_r+0x12>
 80041b2:	2100      	movs	r1, #0
 80041b4:	4620      	mov	r0, r4
 80041b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80041ba:	4798      	blx	r3
 80041bc:	2000      	movs	r0, #0
 80041be:	e7e0      	b.n	8004182 <_raise_r+0x12>

080041c0 <raise>:
 80041c0:	4b02      	ldr	r3, [pc, #8]	@ (80041cc <raise+0xc>)
 80041c2:	4601      	mov	r1, r0
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	f7ff bfd3 	b.w	8004170 <_raise_r>
 80041ca:	bf00      	nop
 80041cc:	2000003c 	.word	0x2000003c

080041d0 <_kill_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	2300      	movs	r3, #0
 80041d4:	4d06      	ldr	r5, [pc, #24]	@ (80041f0 <_kill_r+0x20>)
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	4611      	mov	r1, r2
 80041dc:	602b      	str	r3, [r5, #0]
 80041de:	f7fc ff58 	bl	8001092 <_kill>
 80041e2:	1c43      	adds	r3, r0, #1
 80041e4:	d102      	bne.n	80041ec <_kill_r+0x1c>
 80041e6:	682b      	ldr	r3, [r5, #0]
 80041e8:	b103      	cbz	r3, 80041ec <_kill_r+0x1c>
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	bd38      	pop	{r3, r4, r5, pc}
 80041ee:	bf00      	nop
 80041f0:	200006f4 	.word	0x200006f4

080041f4 <_getpid_r>:
 80041f4:	f7fc bf46 	b.w	8001084 <_getpid>

080041f8 <_malloc_usable_size_r>:
 80041f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041fc:	1f18      	subs	r0, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bfbc      	itt	lt
 8004202:	580b      	ldrlt	r3, [r1, r0]
 8004204:	18c0      	addlt	r0, r0, r3
 8004206:	4770      	bx	lr

08004208 <__swhatbuf_r>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	460c      	mov	r4, r1
 800420c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004210:	4615      	mov	r5, r2
 8004212:	2900      	cmp	r1, #0
 8004214:	461e      	mov	r6, r3
 8004216:	b096      	sub	sp, #88	@ 0x58
 8004218:	da0c      	bge.n	8004234 <__swhatbuf_r+0x2c>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	2100      	movs	r1, #0
 800421e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004222:	bf14      	ite	ne
 8004224:	2340      	movne	r3, #64	@ 0x40
 8004226:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800422a:	2000      	movs	r0, #0
 800422c:	6031      	str	r1, [r6, #0]
 800422e:	602b      	str	r3, [r5, #0]
 8004230:	b016      	add	sp, #88	@ 0x58
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	466a      	mov	r2, sp
 8004236:	f000 f849 	bl	80042cc <_fstat_r>
 800423a:	2800      	cmp	r0, #0
 800423c:	dbed      	blt.n	800421a <__swhatbuf_r+0x12>
 800423e:	9901      	ldr	r1, [sp, #4]
 8004240:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004244:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004248:	4259      	negs	r1, r3
 800424a:	4159      	adcs	r1, r3
 800424c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004250:	e7eb      	b.n	800422a <__swhatbuf_r+0x22>

08004252 <__smakebuf_r>:
 8004252:	898b      	ldrh	r3, [r1, #12]
 8004254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004256:	079d      	lsls	r5, r3, #30
 8004258:	4606      	mov	r6, r0
 800425a:	460c      	mov	r4, r1
 800425c:	d507      	bpl.n	800426e <__smakebuf_r+0x1c>
 800425e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004262:	6023      	str	r3, [r4, #0]
 8004264:	6123      	str	r3, [r4, #16]
 8004266:	2301      	movs	r3, #1
 8004268:	6163      	str	r3, [r4, #20]
 800426a:	b003      	add	sp, #12
 800426c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800426e:	466a      	mov	r2, sp
 8004270:	ab01      	add	r3, sp, #4
 8004272:	f7ff ffc9 	bl	8004208 <__swhatbuf_r>
 8004276:	9f00      	ldr	r7, [sp, #0]
 8004278:	4605      	mov	r5, r0
 800427a:	4639      	mov	r1, r7
 800427c:	4630      	mov	r0, r6
 800427e:	f7ff f8f9 	bl	8003474 <_malloc_r>
 8004282:	b948      	cbnz	r0, 8004298 <__smakebuf_r+0x46>
 8004284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004288:	059a      	lsls	r2, r3, #22
 800428a:	d4ee      	bmi.n	800426a <__smakebuf_r+0x18>
 800428c:	f023 0303 	bic.w	r3, r3, #3
 8004290:	f043 0302 	orr.w	r3, r3, #2
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	e7e2      	b.n	800425e <__smakebuf_r+0xc>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800429e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	6020      	str	r0, [r4, #0]
 80042a8:	b15b      	cbz	r3, 80042c2 <__smakebuf_r+0x70>
 80042aa:	4630      	mov	r0, r6
 80042ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042b0:	f000 f81e 	bl	80042f0 <_isatty_r>
 80042b4:	b128      	cbz	r0, 80042c2 <__smakebuf_r+0x70>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f023 0303 	bic.w	r3, r3, #3
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	81a3      	strh	r3, [r4, #12]
 80042c2:	89a3      	ldrh	r3, [r4, #12]
 80042c4:	431d      	orrs	r5, r3
 80042c6:	81a5      	strh	r5, [r4, #12]
 80042c8:	e7cf      	b.n	800426a <__smakebuf_r+0x18>
	...

080042cc <_fstat_r>:
 80042cc:	b538      	push	{r3, r4, r5, lr}
 80042ce:	2300      	movs	r3, #0
 80042d0:	4d06      	ldr	r5, [pc, #24]	@ (80042ec <_fstat_r+0x20>)
 80042d2:	4604      	mov	r4, r0
 80042d4:	4608      	mov	r0, r1
 80042d6:	4611      	mov	r1, r2
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	f7fc ff39 	bl	8001150 <_fstat>
 80042de:	1c43      	adds	r3, r0, #1
 80042e0:	d102      	bne.n	80042e8 <_fstat_r+0x1c>
 80042e2:	682b      	ldr	r3, [r5, #0]
 80042e4:	b103      	cbz	r3, 80042e8 <_fstat_r+0x1c>
 80042e6:	6023      	str	r3, [r4, #0]
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
 80042ea:	bf00      	nop
 80042ec:	200006f4 	.word	0x200006f4

080042f0 <_isatty_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	2300      	movs	r3, #0
 80042f4:	4d05      	ldr	r5, [pc, #20]	@ (800430c <_isatty_r+0x1c>)
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc ff37 	bl	800116e <_isatty>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_isatty_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_isatty_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	200006f4 	.word	0x200006f4

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
